//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SolidCP.UniversalInstaller
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://installer.solidcp.com/services", ConfigurationName="SolidCP.UniversalInstaller.InstallerService_Soap")]
    public interface InstallerService_Soap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetReleaseFileInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        SolidCP.UniversalInstaller.ArrayOfXElement GetReleaseFileInfo(string componentCode, string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetReleaseFileInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetReleaseFileInfoAsync(string componentCode, string version);
        
        // CODEGEN: Parameter 'GetFileChunkResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'Microsoft.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetFileChunk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        SolidCP.UniversalInstaller.GetFileChunkResponse GetFileChunk(SolidCP.UniversalInstaller.GetFileChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetFileChunk", ReplyAction="*")]
        System.Threading.Tasks.Task<SolidCP.UniversalInstaller.GetFileChunkResponse> GetFileChunkAsync(SolidCP.UniversalInstaller.GetFileChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetFileSize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long GetFileSize(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetFileSize", ReplyAction="*")]
        System.Threading.Tasks.Task<long> GetFileSizeAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetAvailableComponents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        SolidCP.UniversalInstaller.ArrayOfXElement GetAvailableComponents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetAvailableComponents", ReplyAction="*")]
        System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetAvailableComponentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetLatestComponentUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        SolidCP.UniversalInstaller.ArrayOfXElement GetLatestComponentUpdate(string componentCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetLatestComponentUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetLatestComponentUpdateAsync(string componentCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetComponentUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        SolidCP.UniversalInstaller.ArrayOfXElement GetComponentUpdate(string componentCode, string release);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://installer.solidcp.com/services/GetComponentUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetComponentUpdateAsync(string componentCode, string release);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileChunk", WrapperNamespace="http://installer.solidcp.com/services", IsWrapped=true)]
    public partial class GetFileChunkRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://installer.solidcp.com/services", Order=0)]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://installer.solidcp.com/services", Order=1)]
        public int offset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://installer.solidcp.com/services", Order=2)]
        public int size;
        
        public GetFileChunkRequest()
        {
        }
        
        public GetFileChunkRequest(string fileName, int offset, int size)
        {
            this.fileName = fileName;
            this.offset = offset;
            this.size = size;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileChunkResponse", WrapperNamespace="http://installer.solidcp.com/services", IsWrapped=true)]
    public partial class GetFileChunkResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://installer.solidcp.com/services", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileChunkResult;
        
        public GetFileChunkResponse()
        {
        }
        
        public GetFileChunkResponse(byte[] GetFileChunkResult)
        {
            this.GetFileChunkResult = GetFileChunkResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface InstallerService_SoapChannel : SolidCP.UniversalInstaller.InstallerService_Soap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class InstallerService_SoapClient : System.ServiceModel.ClientBase<SolidCP.UniversalInstaller.InstallerService_Soap>, SolidCP.UniversalInstaller.InstallerService_Soap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public InstallerService_SoapClient(EndpointConfiguration endpointConfiguration) : 
                base(InstallerService_SoapClient.GetBindingForEndpoint(endpointConfiguration), InstallerService_SoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InstallerService_SoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(InstallerService_SoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InstallerService_SoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(InstallerService_SoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InstallerService_SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public SolidCP.UniversalInstaller.ArrayOfXElement GetReleaseFileInfo(string componentCode, string version)
        {
            return base.Channel.GetReleaseFileInfo(componentCode, version);
        }
        
        public System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetReleaseFileInfoAsync(string componentCode, string version)
        {
            return base.Channel.GetReleaseFileInfoAsync(componentCode, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SolidCP.UniversalInstaller.GetFileChunkResponse SolidCP.UniversalInstaller.InstallerService_Soap.GetFileChunk(SolidCP.UniversalInstaller.GetFileChunkRequest request)
        {
            return base.Channel.GetFileChunk(request);
        }
        
        public byte[] GetFileChunk(string fileName, int offset, int size)
        {
            SolidCP.UniversalInstaller.GetFileChunkRequest inValue = new SolidCP.UniversalInstaller.GetFileChunkRequest();
            inValue.fileName = fileName;
            inValue.offset = offset;
            inValue.size = size;
            SolidCP.UniversalInstaller.GetFileChunkResponse retVal = ((SolidCP.UniversalInstaller.InstallerService_Soap)(this)).GetFileChunk(inValue);
            return retVal.GetFileChunkResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SolidCP.UniversalInstaller.GetFileChunkResponse> SolidCP.UniversalInstaller.InstallerService_Soap.GetFileChunkAsync(SolidCP.UniversalInstaller.GetFileChunkRequest request)
        {
            return base.Channel.GetFileChunkAsync(request);
        }
        
        public System.Threading.Tasks.Task<SolidCP.UniversalInstaller.GetFileChunkResponse> GetFileChunkAsync(string fileName, int offset, int size)
        {
            SolidCP.UniversalInstaller.GetFileChunkRequest inValue = new SolidCP.UniversalInstaller.GetFileChunkRequest();
            inValue.fileName = fileName;
            inValue.offset = offset;
            inValue.size = size;
            return ((SolidCP.UniversalInstaller.InstallerService_Soap)(this)).GetFileChunkAsync(inValue);
        }
        
        public long GetFileSize(string fileName)
        {
            return base.Channel.GetFileSize(fileName);
        }
        
        public System.Threading.Tasks.Task<long> GetFileSizeAsync(string fileName)
        {
            return base.Channel.GetFileSizeAsync(fileName);
        }
        
        public SolidCP.UniversalInstaller.ArrayOfXElement GetAvailableComponents()
        {
            return base.Channel.GetAvailableComponents();
        }
        
        public System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetAvailableComponentsAsync()
        {
            return base.Channel.GetAvailableComponentsAsync();
        }
        
        public SolidCP.UniversalInstaller.ArrayOfXElement GetLatestComponentUpdate(string componentCode)
        {
            return base.Channel.GetLatestComponentUpdate(componentCode);
        }
        
        public System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetLatestComponentUpdateAsync(string componentCode)
        {
            return base.Channel.GetLatestComponentUpdateAsync(componentCode);
        }
        
        public SolidCP.UniversalInstaller.ArrayOfXElement GetComponentUpdate(string componentCode, string release)
        {
            return base.Channel.GetComponentUpdate(componentCode, release);
        }
        
        public System.Threading.Tasks.Task<SolidCP.UniversalInstaller.ArrayOfXElement> GetComponentUpdateAsync(string componentCode, string release)
        {
            return base.Channel.GetComponentUpdateAsync(componentCode, release);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.InstallerService_Soap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.InstallerService_Soap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.InstallerService_Soap))
            {
                return new System.ServiceModel.EndpointAddress("http://installer.solidcp.com/Services/InstallerService-1.0.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.InstallerService_Soap12))
            {
                return new System.ServiceModel.EndpointAddress("http://installer.solidcp.com/Services/InstallerService-1.0.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            InstallerService_Soap,
            
            InstallerService_Soap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.2.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
