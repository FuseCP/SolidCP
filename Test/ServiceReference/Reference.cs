//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SolidCP.Providers.Common
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultObject", Namespace="http://schemas.datacontract.org/2004/07/SolidCP.Providers.Common")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SolidCP.Providers.ResultObjects.ValueResultObjectOfboolean))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SolidCP.Providers.Common.BoolResult))]
    public partial class ResultObject : object
    {
        
        private string[] ErrorCodesField;
        
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ErrorCodes
        {
            get
            {
                return this.ErrorCodesField;
            }
            set
            {
                this.ErrorCodesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess
        {
            get
            {
                return this.IsSuccessField;
            }
            set
            {
                this.IsSuccessField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoolResult", Namespace="http://schemas.datacontract.org/2004/07/SolidCP.Providers.Common")]
    public partial class BoolResult : SolidCP.Providers.ResultObjects.ValueResultObjectOfboolean
    {
    }
}
namespace SolidCP.Providers.ResultObjects
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueResultObjectOfboolean", Namespace="http://schemas.datacontract.org/2004/07/SolidCP.Providers.ResultObjects")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SolidCP.Providers.Common.BoolResult))]
    public partial class ValueResultObjectOfboolean : SolidCP.Providers.Common.ResultObject
    {
        
        private bool ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IAutoDiscovery")]
public interface IAutoDiscovery
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutoDiscovery/IsInstalled", ReplyAction="http://tempuri.org/IAutoDiscovery/IsInstalledResponse")]
    System.Threading.Tasks.Task<SolidCP.Providers.Common.BoolResult> IsInstalledAsync(string providerName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutoDiscovery/GetServerFilePath", ReplyAction="http://tempuri.org/IAutoDiscovery/GetServerFilePathResponse")]
    System.Threading.Tasks.Task<string> GetServerFilePathAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutoDiscovery/GetServerVersion", ReplyAction="http://tempuri.org/IAutoDiscovery/GetServerVersionResponse")]
    System.Threading.Tasks.Task<string> GetServerVersionAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
public interface IAutoDiscoveryChannel : IAutoDiscovery, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
public partial class AutoDiscoveryClient : System.ServiceModel.ClientBase<IAutoDiscovery>, IAutoDiscovery
{
    
    /// <summary>
    /// Implementieren Sie diese partielle Methode, um den Dienstendpunkt zu konfigurieren.
    /// </summary>
    /// <param name="serviceEndpoint">Der zu konfigurierende Endpunkt</param>
    /// <param name="clientCredentials">Die Clientanmeldeinformationen</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
    
    public AutoDiscoveryClient(EndpointConfiguration endpointConfiguration) : 
            base(AutoDiscoveryClient.GetBindingForEndpoint(endpointConfiguration), AutoDiscoveryClient.GetEndpointAddress(endpointConfiguration))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public AutoDiscoveryClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
            base(AutoDiscoveryClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public AutoDiscoveryClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(AutoDiscoveryClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public AutoDiscoveryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Threading.Tasks.Task<SolidCP.Providers.Common.BoolResult> IsInstalledAsync(string providerName)
    {
        return base.Channel.IsInstalledAsync(providerName);
    }
    
    public System.Threading.Tasks.Task<string> GetServerFilePathAsync()
    {
        return base.Channel.GetServerFilePathAsync();
    }
    
    public System.Threading.Tasks.Task<string> GetServerVersionAsync()
    {
        return base.Channel.GetServerVersionAsync();
    }
    
    public virtual System.Threading.Tasks.Task OpenAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }
    
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAutoDiscovery))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            return result;
        }
        if ((endpointConfiguration == EndpointConfiguration.NetHttpBinding_IAutoDiscovery))
        {
            System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
            result.Elements.Add(new System.ServiceModel.Channels.BinaryMessageEncodingBindingElement());
            System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
            httpBindingElement.AllowCookies = true;
            httpBindingElement.MaxBufferSize = int.MaxValue;
            httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
            result.Elements.Add(httpBindingElement);
            return result;
        }
        if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IAutoDiscovery))
        {
            System.ServiceModel.WSHttpBinding result = new System.ServiceModel.WSHttpBinding();
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            result.Security.Mode = System.ServiceModel.SecurityMode.None;
            return result;
        }
        throw new System.InvalidOperationException(string.Format("Es wurde kein Endpunkt mit dem Namen \"{0}\" gefunden.", endpointConfiguration));
    }
    
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAutoDiscovery))
        {
            return new System.ServiceModel.EndpointAddress("http://pinocho/server/AutoDiscovery/basic");
        }
        if ((endpointConfiguration == EndpointConfiguration.NetHttpBinding_IAutoDiscovery))
        {
            return new System.ServiceModel.EndpointAddress("http://pinocho/server/AutoDiscovery/net");
        }
        if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IAutoDiscovery))
        {
            return new System.ServiceModel.EndpointAddress("http://pinocho/server/AutoDiscovery/ws");
        }
        throw new System.InvalidOperationException(string.Format("Es wurde kein Endpunkt mit dem Namen \"{0}\" gefunden.", endpointConfiguration));
    }
    
    public enum EndpointConfiguration
    {
        
        BasicHttpBinding_IAutoDiscovery,
        
        NetHttpBinding_IAutoDiscovery,
        
        WSHttpBinding_IAutoDiscovery,
    }
}
