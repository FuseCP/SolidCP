# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build
run-name: ${{ github.event.head_commit.message }} by @${{ github.actor }}

on:
  push:
    branches: [ "release" ]
  pull_request:
    branches: [ "release" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    #permissions:
    #  checks: write
    #  contents: write
    #  packages: write

    timeout-minutes: 60

    env:
      Configuration: ${{ matrix.configuration }}
      IncludeReleasePdbs: "true"
      UseAspNetPrecompile: "false"
      BuildLinuxInstallPackages: "true"
      BuildLegacyDatabaseScript: "false"
      MsBuildSwitches: "/v:m /m"
      GitHubAction: true

    steps:
      
    #- name: Add msbuild to PATH
    #  uses: microsoft/setup-msbuild@v2
    
    # Install the .NET Core workload
    #- name: Install .NET 8
    #  uses: actions/setup-dotnet@v4
    #  with:
    #    dotnet-version: 8.0.x

    #- name: Update WSL
    #  run: |
    #    wsl --update
    #    wsl --version

    - name: Install WSL Ubuntu with rpm tools
      uses: Vampire/setup-wsl@v5
      with: 
        wsl-version: 2
        distribution: Ubuntu-24.04
        additional-packages: rpm
        use-cache: 'false'

    - name: Show WSL distro info
      run: |
        wsl --list --verbose
        wsl --distribution Ubuntu-24.04 echo '"rpmbuild: $(which rpmbuild)"'

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Run deploy-release.bat
      working-directory: SolidCP
      run: .\deploy-release.bat

    - name: Publish build artifacts
      uses: actions/upload-artifact@v4
      with: 
        name: ${{ github.event.head_commit.message }} by @${{ github.actor }}
        path: |
          SolidCP\Deploy\Release\**\*.zip
          SolidCP\Deploy\Release\**\*.msi
          SolidCP\Deploy\Release\**\*.exe
          SolidCP\Deploy\Release\Packages
          SolidCP\Deploy\Release\Database
          !SolidCP\Deploy\Release\Install
          !SolidCP\Deploy\Release\Update
        compression-level: 9

    #- name: Run unit tests
    #  working-directory: SolidCP\Sources
    #  continue-on-error: true
    #  run: |
    #    dotnet test SolidCP.Tests.sln -v n --logger trx --configuration Release
