<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var usings = new List<string>
    {
        "System",
        "System.Collections.Generic",
        "SolidCP.EnterpriseServer.Data.Entities",
        "SolidCP.EnterpriseServer.Data.Configuration"
    };
    var usingscore = new List<string>()
    {
       "Microsoft.EntityFrameworkCore",
       "Microsoft.EntityFrameworkCore.Metadata",
       "Microsoft.EntityFrameworkCore.Metadata.Builders"
    };
    var usingsfx = new List<string>()
    {
      "System.Data.Entity",
      "System.Data.Entity.Spatial",
      "System.Data.Entity.Validation",
      "System.Data.Entity.ModelConfiguration"
    };

    var aliasesTemplate = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "Aliases.cs");
    var aliases = File.ReadAllText(aliasesTemplate);
    var match = Regex.Match(aliases, @$"^using\s+{Regex.Escape(EntityType.Name)}\s*=.*?$", RegexOptions.Multiline);
    if (match.Success) aliases = match.Value.Trim();
    else aliases = null;
    
    if (!string.IsNullOrEmpty(NamespaceHint))
    {
#>
namespace <#= NamespaceHint #>;

<#
    }
    if (aliases != null) { WriteLine(aliases); WriteLine(""); }
#>
public partial class <#= EntityType.Name #>Configuration: Extensions.EntityTypeConfiguration<<#= EntityType.Name #>>
{
    public DbFlavor Flavor { get; set; } = DbFlavor.Unknown;

    public <#= EntityType.Name #>Configuration(): base() { }
    public <#= EntityType.Name #>Configuration(DbFlavor flavor): base(flavor) { }

#if NetCore || NetFX
    public override void Configure() {
        
    }
#endif

}
<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
using <#= ns #>;
<#
    }

    if (usingscore.Any()) {
#>
#if NetCore
<#
      foreach (var ns in usingscore.Distinct().OrderBy(x => x, new NamespaceComparer()))
      {
#>
using <#= ns #>;
<#
      }
#>
#endif
<#
    }

    if (usingsfx.Any()) {
#>
#if NetFX
<#
      foreach (var ns in usingsfx.Distinct().OrderBy(x => x, new NamespaceComparer()))
      {
#>
using <#= ns #>;
<#
      }
#>
#endif
<#    
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
