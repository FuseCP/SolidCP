<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ parameter name="Model" type="Microsoft.EntityFrameworkCore.Metadata.IModel" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Infrastructure" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Scaffolding" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (!ProductInfo.GetVersion().StartsWith("8.0"))
    {
        Warning("Your templates were created using an older version of Entity Framework. Additional features and bug fixes may be available. See https://aka.ms/efcore-docs-updating-templates for more information.");
    }

    Console.WriteLine("Writing DbContextBase.Source.cs");

    var services = (IServiceProvider)Host;
    var providerCode = services.GetRequiredService<IProviderConfigurationCodeGenerator>();
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var usings = new List<string>
    {
        "System",
        "System.Collections.Generic",
        "System.Collections.Concurrent",
        "SolidCP.EnterpriseServer.Data.Configuration"
    };

    var usingscore = new List<string>()
    {
        "Microsoft.EntityFrameworkCore",
        "Microsoft.EntityFrameworkCore.ChangeTracking"
    };
    var usingsfx = new List<string>()
    {
      "System.Data.Entity",
      "System.Data.Entity.Core.Objects",
      "System.Data.Entity.Infrastructure",
      "System.Data.Entity.Infrastructure.Annotations",
      "System.Data.Entity.Infrastructure.Interception",
      "System.Data.Entity.Spatial",
      "System.Data.Entity.Validation"
    };
    var aliasesTemplate = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "Aliases.cs");
    var aliases = File.ReadAllText(aliasesTemplate);
    aliases = Regex.Replace(aliases, "^", "    ", RegexOptions.Multiline);

    if (NamespaceHint != Options.ModelNamespace
        && !string.IsNullOrEmpty(Options.ModelNamespace))
    {
        usings.Add(Options.ModelNamespace);
    }

    if (!string.IsNullOrEmpty(NamespaceHint))
    {
#>
namespace <#= NamespaceHint.Replace(".Data.Configuration.Sources", ".Context") #>
{

<#
    }
#>
<#= aliases #>

    public partial class <#= Options.ContextName #> : DbContext, Data.IGenericDbContext
    {

#if NetCore
        public <#= Options.ContextName #>(Data.DbContext context): this(new Data.DbOptions<<#= Options.ContextName #>>(context)) { }
        public <#= Options.ContextName #>(DbContextOptions<<#= Options.ContextName #>> options): base(options) {
			if (options is Data.DbOptions<DbContextBase> opts) {
                DbType = opts.DbType;
                InitSeedData = opts.InitSeedData;
            }
        }
#elif NetFX
        public <#= Options.ContextName #>(Data.DbContext context): base(context.DbConnection, true) { 
            DbType = context.DbType;
            InitSeedData = context.InitSeedData;
			Database.Log += WriteToLog;
        }
#endif

		private void WriteToLog(string msg) => Log?.Invoke(msg);
		public Action<string> Log { get; set; }
        public Data.DbType DbType { get; set; } = Data.DbType.Unknown;
        public bool InitSeedData { get; set; } = false;

<#
    foreach (var entityType in Model.GetEntityTypes().Where(e => !e.IsSimpleManyToManyJoinEntityType()))
    {
#>
        public virtual DbSet<<#= entityType.Name #>> <#= entityType.GetDbSetName() #> { get; set; }

<#
    }
    
    if (!Options.SuppressOnConfiguring)
    {
#>

#if NetCore
        private void ApplyConfiguration<TEntity>(ModelBuilder model, Data.EntityTypeConfiguration<TEntity> configuration) where TEntity: class
#elif NetFX
        private void ApplyConfiguration<TEntity>(DbModelBuilder model, Data.EntityTypeConfiguration<TEntity> configuration) where TEntity: class
#else 
        private void ApplyConfiguration<TEntity>(DummyModel model, Data.EntityTypeConfiguration<TEntity> configuration) where TEntity: class
#endif
        {
            configuration.DbType = DbType;
            configuration.InitSeedData = InitSeedData;
#if NetFX
			configuration.Configure();
#endif
            model.ApplyConfiguration(configuration);
        }

#if NetCore
		static ConcurrentDictionary<string, ServerVersion> serverVersions = new ConcurrentDictionary<string, ServerVersion>();

   	    protected void UseSqlServer(DbContextOptionsBuilder builder, string connectionString) => builder.UseSqlServer(connectionString);
        protected void UseSqlite(DbContextOptionsBuilder builder, string connectionString) => builder.UseSqlite(connectionString);
        protected void UseMySqlOrMariaDb(DbContextOptionsBuilder builder, string connectionString)
        {
            ServerVersion serverVersion = serverVersions.GetOrAdd(connectionString, connectionString => ServerVersion.AutoDetect(connectionString));
            builder.UseMySql(connectionString, serverVersion);
        }
        protected void UsePostgreSql(DbContextOptionsBuilder builder, string connectionString) => builder.UseNpgsql(connectionString);

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!(builder.Options is Data.DbOptions<<#= Options.ContextName #>> options)) throw new NotSupportedException("This type of Options is not supported");
  
            InitSeedData = options.InitSeedData;

			switch (options.DbType)
			{
				case Data.DbType.SqlServer:
					UseSqlServer(builder, options.ConnectionString);
					break;
				case Data.DbType.Sqlite:
					UseSqlite(builder, options.ConnectionString);
					break;
				case Data.DbType.MySql:
				case Data.DbType.MariaDb:
					UseMySqlOrMariaDb(builder, options.ConnectionString);
					break;
				case Data.DbType.PostgreSql:
					UsePostgreSql(builder, options.ConnectionString);
					break;
				default: throw new NotSupportedException("This DB flavor is not supported");
			}
            
            builder.LogTo(WriteToLog);
        }
#endif

#if NetCore
        protected override void OnModelCreating(ModelBuilder model) {
#elif NetFX
        protected override void OnModelCreating(DbModelBuilder model) {
#else
        protected void OnModelCreating(DummyModel model) {
#endif
			base.OnModelCreating(model);

#if ScaffoldDbContextEntities
<#
    var anyConfiguration = false;

    foreach (var entityType in Model.GetEntityTypes().Where(e => !e.IsSimpleManyToManyJoinEntityType()))
    {
        anyConfiguration = true;
#>
            ApplyConfiguration(model, new <#= entityType.Name #>Configuration());
<#
    }

    foreach (var sequence in Model.GetSequences())
    {
        anyConfiguration = true;
        var needsType = sequence.Type != typeof(long);
        var needsSchema = !string.IsNullOrEmpty(sequence.Schema) && sequence.Schema != sequence.Model.GetDefaultSchema();
        var sequenceFluentApiCalls = sequence.GetFluentApiCalls(annotationCodeGenerator);
#>
            modelBuilder.HasSequence<#= needsType ? $"<{code.Reference(sequence.Type)}>" : "" #>(<#= code.Literal(sequence.Name) #><#= needsSchema ? $", {code.Literal(sequence.Schema)}" : "" #>)<#= code.Fragment(sequenceFluentApiCalls, indent: 3) #>;
<#
    }

    if (anyConfiguration)
    {
        WriteLine("");
    }
#>
#endif

            OnModelCreatingPartial(model);
        }
#if NetCore
		partial void OnModelCreatingPartial(ModelBuilder model);
#elif NetFX
        partial void OnModelCreatingPartial(DbModelBuilder model);
#else 
        partial void OnModelCreatingPartial(DummyModel model);
#endif

<#
    }

    StringBuilder mainEnvironment;

    #if ShowConfiguration
#>
#region Complete Model Configuration
#if NetCore
        protected void OnModelCreatingComplete(ModelBuilder modelBuilder)
        {
<#
    anyConfiguration = false;

    var modelFluentApiCalls = Model.GetFluentApiCalls(annotationCodeGenerator);
    if (modelFluentApiCalls != null)
    {
        usings.AddRange(modelFluentApiCalls.GetRequiredUsings());
#>
            modelBuilder<#= code.Fragment(modelFluentApiCalls, indent: 3) #>;
<#
        anyConfiguration = true;
    }

    foreach (var entityType in Model.GetEntityTypes().Where(e => !e.IsSimpleManyToManyJoinEntityType()))
    {
        // Save all previously generated code, and start generating into a new temporary environment
        mainEnvironment = GenerationEnvironment;
        GenerationEnvironment = new StringBuilder();

        if (anyConfiguration)
        {
            WriteLine("");
        }

        var anyEntityTypeConfiguration = false;
#>
            modelBuilder.Entity<<#= entityType.Name #>>(entity =>
            {
<#
        var key = entityType.FindPrimaryKey();
        if (key != null)
        {
            var keyFluentApiCalls = key.GetFluentApiCalls(annotationCodeGenerator);
            if (keyFluentApiCalls != null
                || (!key.IsHandledByConvention() && !Options.UseDataAnnotations))
            {
                if (keyFluentApiCalls != null)
                {
                    usings.AddRange(keyFluentApiCalls.GetRequiredUsings());
                }
#>
                entity.HasKey(<#= code.Lambda(key.Properties, "e") #>)<#= code.Fragment(keyFluentApiCalls, indent: 4) #>;
<#
                anyEntityTypeConfiguration = true;
            }
        }

        var entityTypeFluentApiCalls = entityType.GetFluentApiCalls(annotationCodeGenerator)
            ?.FilterChain(c => !(Options.UseDataAnnotations && c.IsHandledByDataAnnotations));
        if (entityTypeFluentApiCalls != null)
        {
            usings.AddRange(entityTypeFluentApiCalls.GetRequiredUsings());

            if (anyEntityTypeConfiguration)
            {
                WriteLine("");
            }
#>
                entity<#= code.Fragment(entityTypeFluentApiCalls, indent: 4) #>;
<#
            anyEntityTypeConfiguration = true;
        }

        foreach (var index in entityType.GetIndexes()
            .Where(i => !(Options.UseDataAnnotations && i.IsHandledByDataAnnotations(annotationCodeGenerator))))
        {
            if (anyEntityTypeConfiguration)
            {
                WriteLine("");
            }

            var indexFluentApiCalls = index.GetFluentApiCalls(annotationCodeGenerator);
            if (indexFluentApiCalls != null)
            {
                usings.AddRange(indexFluentApiCalls.GetRequiredUsings());
            }
#>
                entity.HasIndex(<#= code.Lambda(index.Properties, "e") #>, <#= code.Literal(index.GetDatabaseName()) #>)<#= code.Fragment(indexFluentApiCalls, indent: 4) #>;
<#
            anyEntityTypeConfiguration = true;
        }

        var firstProperty = true;
        foreach (var property in entityType.GetProperties())
        {
            var propertyFluentApiCalls = property.GetFluentApiCalls(annotationCodeGenerator)
                ?.FilterChain(c => !(Options.UseDataAnnotations && c.IsHandledByDataAnnotations)
                    && !(c.Method == "IsRequired" && Options.UseNullableReferenceTypes && !property.ClrType.IsValueType));
            if (propertyFluentApiCalls == null)
            {
                continue;
            }

            usings.AddRange(propertyFluentApiCalls.GetRequiredUsings());

            if (anyEntityTypeConfiguration && firstProperty)
            {
                WriteLine("");
            }
#>
                entity.Property(e => e.<#= property.Name #>)<#= code.Fragment(propertyFluentApiCalls, indent: 4) #>;
<#
            anyEntityTypeConfiguration = true;
            firstProperty = false;
        }

        foreach (var foreignKey in entityType.GetForeignKeys())
        {
            var foreignKeyFluentApiCalls = foreignKey.GetFluentApiCalls(annotationCodeGenerator)
                ?.FilterChain(c => !(Options.UseDataAnnotations && c.IsHandledByDataAnnotations));
            if (foreignKeyFluentApiCalls == null)
            {
                continue;
            }

            usings.AddRange(foreignKeyFluentApiCalls.GetRequiredUsings());

            if (anyEntityTypeConfiguration)
            {
                WriteLine("");
            }
#>
                entity.HasOne(d => d.<#= foreignKey.DependentToPrincipal.Name #>).<#= foreignKey.IsUnique ? "WithOne" : "WithMany" #>(<#= foreignKey.PrincipalToDependent != null ? $"p => p.{foreignKey.PrincipalToDependent.Name}" : "" #>)<#= code.Fragment(foreignKeyFluentApiCalls, indent: 4) #>;
<#
            anyEntityTypeConfiguration = true;
        }

        foreach (var skipNavigation in entityType.GetSkipNavigations().Where(n => n.IsLeftNavigation()))
        {
            if (anyEntityTypeConfiguration)
            {
                WriteLine("");
            }

            var left = skipNavigation.ForeignKey;
            var leftFluentApiCalls = left.GetFluentApiCalls(annotationCodeGenerator, useStrings: true);
            var right = skipNavigation.Inverse.ForeignKey;
            var rightFluentApiCalls = right.GetFluentApiCalls(annotationCodeGenerator, useStrings: true);
            var joinEntityType = skipNavigation.JoinEntityType;

            if (leftFluentApiCalls != null)
            {
                usings.AddRange(leftFluentApiCalls.GetRequiredUsings());
            }

            if (rightFluentApiCalls != null)
            {
                usings.AddRange(rightFluentApiCalls.GetRequiredUsings());
            }
#>
                entity.HasMany(d => d.<#= skipNavigation.Name #>).WithMany(p => p.<#= skipNavigation.Inverse.Name #>)
                    .UsingEntity<Dictionary<string, object>>(
                        <#= code.Literal(joinEntityType.Name) #>,
                        r => r.HasOne<<#= right.PrincipalEntityType.Name #>>().WithMany()<#= code.Fragment(rightFluentApiCalls, indent: 6) #>,
                        l => l.HasOne<<#= left.PrincipalEntityType.Name #>>().WithMany()<#= code.Fragment(leftFluentApiCalls, indent: 6) #>,
                        j =>
                        {
<#
            var joinKey = joinEntityType.FindPrimaryKey();
            var joinKeyFluentApiCalls = joinKey.GetFluentApiCalls(annotationCodeGenerator);

            if (joinKeyFluentApiCalls != null)
            {
                usings.AddRange(joinKeyFluentApiCalls.GetRequiredUsings());
            }
#>
                            j.HasKey(<#= code.Arguments(joinKey.Properties.Select(e => e.Name)) #>)<#= code.Fragment(joinKeyFluentApiCalls, indent: 7) #>;
<#
            var joinEntityTypeFluentApiCalls = joinEntityType.GetFluentApiCalls(annotationCodeGenerator);
            if (joinEntityTypeFluentApiCalls != null)
            {
                usings.AddRange(joinEntityTypeFluentApiCalls.GetRequiredUsings());
#>
                            j<#= code.Fragment(joinEntityTypeFluentApiCalls, indent: 7) #>;
<#
            }

            foreach (var index in joinEntityType.GetIndexes())
            {
                var indexFluentApiCalls = index.GetFluentApiCalls(annotationCodeGenerator);
                if (indexFluentApiCalls != null)
                {
                    usings.AddRange(indexFluentApiCalls.GetRequiredUsings());
                }
#>
                            j.HasIndex(<#= code.Literal(index.Properties.Select(e => e.Name).ToArray()) #>, <#= code.Literal(index.GetDatabaseName()) #>)<#= code.Fragment(indexFluentApiCalls, indent: 7) #>;
<#
            }

            foreach (var property in joinEntityType.GetProperties())
            {
                var propertyFluentApiCalls = property.GetFluentApiCalls(annotationCodeGenerator);
                if (propertyFluentApiCalls == null)
                {
                    continue;
                }

                usings.AddRange(propertyFluentApiCalls.GetRequiredUsings());
#>
                            j.IndexerProperty<<#= code.Reference(property.ClrType) #>>(<#= code.Literal(property.Name) #>)<#= code.Fragment(propertyFluentApiCalls, indent: 7) #>;
<#
            }
#>
                        });
<#
            anyEntityTypeConfiguration = true;
        }
#>
            });
<#
        // If any signicant code was generated, append it to the main environment
        if (anyEntityTypeConfiguration)
        {
            mainEnvironment.Append(GenerationEnvironment);
            anyConfiguration = true;
        }

        // Resume generating code into the main environment
        GenerationEnvironment = mainEnvironment;
    }

    foreach (var sequence in Model.GetSequences())
    {
        var needsType = sequence.Type != typeof(long);
        var needsSchema = !string.IsNullOrEmpty(sequence.Schema) && sequence.Schema != sequence.Model.GetDefaultSchema();
        var sequenceFluentApiCalls = sequence.GetFluentApiCalls(annotationCodeGenerator);
#>
            modelBuilder.HasSequence<#= needsType ? $"<{code.Reference(sequence.Type)}>" : "" #>(<#= code.Literal(sequence.Name) #><#= needsSchema ? $", {code.Literal(sequence.Schema)}" : "" #>)<#= code.Fragment(sequenceFluentApiCalls, indent: 3) #>;
<#
    }

    if (anyConfiguration)
    {
        WriteLine("");
    }
#>
            OnModelCreatingPartialComplete(modelBuilder);
        }

        partial void OnModelCreatingPartialComplete(ModelBuilder modelBuilder);
#endif
#endregion
<#
#endif
#>
    }
}

namespace SolidCP.EnterpriseServer.Data {

<#= aliases #>

#if ScaffoldDbContextEntities
    public partial class DbContext {
<#
    foreach (var entityType in Model.GetEntityTypes().Where(e => !e.IsSimpleManyToManyJoinEntityType()))
    {

    var tmpVarName = entityType.GetDbSetName();
    var ccTmpVarName = ToCamelCase(tmpVarName);
    if (ccTmpVarName != tmpVarName) tmpVarName = ccTmpVarName;
    else tmpVarName = $"_{ccTmpVarName}";
#>
        DbSet<<#= entityType.Name #>> <#= tmpVarName #> = null;
        public virtual DbSet<<#= entityType.Name #>> <#= entityType.GetDbSetName() #> => <#= tmpVarName #> ??= Set<<#= entityType.Name #>>();

<#
    }
#>
    }
}
<#
    mainEnvironment = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();
    var fxusings = usings.Where(u => u.StartsWith("System.Data.Entity"));
    var coreusings = usings.Where(u => u.StartsWith("Microsoft.EntityFrameworkCore") ||
        u.StartsWith("Microsoft.Extensions"));
    usings = usings.Except(fxusings.Concat(coreusings))
        .Distinct()
        .OrderBy(x => x, new NamespaceComparer())
        .ToList();
    usingsfx = usingsfx.Concat(fxusings)
        .Distinct()
        .OrderBy(x => x, new NamespaceComparer())
        .ToList();
    usingscore = usingscore.Concat(coreusings)
        .Distinct()
        .OrderBy(x => x, new NamespaceComparer())
        .ToList();

#>
// This file is auto generated, do not edit.
#if ScaffoldedDbContext
<#
    foreach (var ns in usings)
    {
#>
using <#= ns #>;
<#
    }

    if (usingscore.Any()) {
#>
#if NetCore
<#
      foreach (var ns in usingscore)
      {
#>
using <#= ns #>;
<#
      }
#>
#endif
<#
    }

    if (usingsfx.Any()) {
#>
#if NetFX
<#
      foreach (var ns in usingsfx)
      {
#>
using <#= ns #>;
<#
      }
#>
#endif
<#  
    }

    WriteLine("");

    GenerationEnvironment.Append(mainEnvironment);
#>
#endif
<#+
    public string ToCamelCase(string name)
    {
        if (name != null && name.Length > 0 && char.IsUpper(name[0])) return char.ToLower(name[0]) + name.Substring(1);
        return name;
    }
#>
