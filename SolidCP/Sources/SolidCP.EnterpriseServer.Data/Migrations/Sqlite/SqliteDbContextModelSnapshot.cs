// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolidCP.EnterpriseServer.Data;

#nullable disable

namespace SolidCP.EnterpriseServer.Data.Migrations.SqliteSql
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("PackageService", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PackageId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageService");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.AccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<Guid>("AccessTokenGuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmsResponse")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("TokenType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "AccessTokensIdx_AccountID");

                    b.ToTable("AccessTokens");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.AdditionalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("GroupName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("AdditionalGroups");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.AuditLog", b =>
                {
                    b.Property<string>("RecordId")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("RecordID");

                    b.Property<string>("ExecutionLog")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<int>("SeverityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SeverityID");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RecordId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.AuditLogSource", b =>
                {
                    b.Property<string>("SourceName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("SourceName");

                    b.ToTable("AuditLogSources");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.AuditLogTask", b =>
                {
                    b.Property<string>("SourceName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("TaskName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("TaskDescription")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("SourceName", "TaskName");

                    b.ToTable("AuditLogTasks");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<bool?>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EffectiveUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EffectiveUserID");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int>("IndicatorCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorMaximum")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaximumExecutionTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NotifyOnComplete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScheduleID");

                    b.Property<int>("Severity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("TaskID");

                    b.Property<string>("TaskName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("BackgroundTasks");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTaskLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("LogID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("ExceptionStackTrace")
                        .HasColumnType("ntext");

                    b.Property<int?>("InnerTaskStart")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Severity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TaskID");

                    b.Property<string>("Text")
                        .HasColumnType("ntext");

                    b.Property<int?>("TextIdent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("XmlParameters")
                        .HasColumnType("ntext");

                    b.HasKey("LogId");

                    b.HasIndex(new[] { "TaskId" }, "BackgroundTaskLogsIdx_TaskID");

                    b.ToTable("BackgroundTaskLogs");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTaskParameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParameterID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerializerValue")
                        .HasColumnType("ntext");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TaskID");

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ParameterId");

                    b.HasIndex(new[] { "TaskId" }, "BackgroundTaskParametersIdx_TaskID");

                    b.ToTable("BackgroundTaskParameters");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTaskStack", b =>
                {
                    b.Property<int>("TaskStackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TaskStackID");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TaskID");

                    b.HasKey("TaskStackId");

                    b.HasIndex(new[] { "TaskId" }, "BackgroundTaskStackIdx_TaskID");

                    b.ToTable("BackgroundTaskStack");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BlackBerryUser", b =>
                {
                    b.Property<int>("BlackBerryUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BlackBerryUserId");

                    b.HasIndex(new[] { "AccountId" }, "BlackBerryUsersIdx_AccountId");

                    b.ToTable("BlackBerryUsers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Cluster", b =>
                {
                    b.Property<int>("ClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ClusterID");

                    b.Property<string>("ClusterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ClusterId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CommentID");

                    b.Property<string>("CommentText")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<string>("ItemTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ItemTypeID");

                    b.Property<int?>("SeverityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SeverityID");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId");

                    b.HasIndex(new[] { "UserId" }, "CommentsIdx_UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Crmuser", b =>
                {
                    b.Property<int>("CrmuserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CRMUserID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<Guid?>("BusinessUnitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("BusinessUnitID");

                    b.Property<int?>("Caltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CALType");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CrmuserGuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("CRMUserGuid");

                    b.HasKey("CrmuserId");

                    b.HasIndex(new[] { "AccountId" }, "CRMUsersIdx_AccountID");

                    b.ToTable("CRMUsers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Domain", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DomainID");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DomainItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("HostingAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDomainPointer")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPreviewDomain")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSubDomain")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MailDomainId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MailDomainID");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<string>("RegistrarName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WebSiteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("WebSiteID");

                    b.Property<int?>("ZoneItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ZoneItemID");

                    b.HasKey("DomainId");

                    b.HasIndex(new[] { "MailDomainId" }, "DomainsIdx_MailDomainID");

                    b.HasIndex(new[] { "PackageId" }, "DomainsIdx_PackageID");

                    b.HasIndex(new[] { "WebSiteId" }, "DomainsIdx_WebSiteID");

                    b.HasIndex(new[] { "ZoneItemId" }, "DomainsIdx_ZoneItemID");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.DomainDnsRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DnsServer")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("DomainId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DomainId" }, "DomainDnsRecordsIdx_DomainId");

                    b.ToTable("DomainDnsRecords");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.EnterpriseFolder", b =>
                {
                    b.Property<int>("EnterpriseFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EnterpriseFolderID");

                    b.Property<string>("Domain")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("FolderQuota")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HomeFolder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<string>("LocationDrive")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StorageSpaceFolderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnterpriseFolderId");

                    b.HasIndex(new[] { "StorageSpaceFolderId" }, "EnterpriseFoldersIdx_StorageSpaceFolderId");

                    b.ToTable("EnterpriseFolders");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.EnterpriseFoldersOwaPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FolderID");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "EnterpriseFoldersOwaPermissionsIdx_AccountID");

                    b.HasIndex(new[] { "FolderId" }, "EnterpriseFoldersOwaPermissionsIdx_FolderID");

                    b.ToTable("EnterpriseFoldersOwaPermissions");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArchivingMailboxPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("EnableArchiving")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExchangeDisclaimerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVip")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsVIP");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<int?>("LevelId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LevelID");

                    b.Property<bool?>("MailEnabledPublicFolder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MailboxManagerActions")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MailboxPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrimaryEmailAddress")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("SamAccountName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberNumber")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPrincipalName")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.HasIndex(new[] { "ItemId" }, "ExchangeAccountsIdx_ItemID");

                    b.HasIndex(new[] { "MailboxPlanId" }, "ExchangeAccountsIdx_MailboxPlanId");

                    b.HasIndex(new[] { "AccountName" }, "IX_ExchangeAccounts_UniqueAccountName")
                        .IsUnique();

                    b.ToTable("ExchangeAccounts");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccountEmailAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AddressID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("AddressId");

                    b.HasIndex(new[] { "AccountId" }, "ExchangeAccountEmailAddressesIdx_AccountID");

                    b.HasIndex(new[] { "EmailAddress" }, "IX_ExchangeAccountEmailAddresses_UniqueEmail")
                        .IsUnique();

                    b.ToTable("ExchangeAccountEmailAddresses");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeDeletedAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("OriginAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OriginAT");

                    b.Property<string>("StoragePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExchangeDeletedAccounts");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeDisclaimer", b =>
                {
                    b.Property<int>("ExchangeDisclaimerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisclaimerName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisclaimerText")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.HasKey("ExchangeDisclaimerId");

                    b.ToTable("ExchangeDisclaimers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeMailboxPlan", b =>
                {
                    b.Property<int>("MailboxPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AllowLitigationHold")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArchiveSizeMb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ArchiveSizeMB");

                    b.Property<int?>("ArchiveWarningPct")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Archiving")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableActiveSync")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("EnableArchiving")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("EnableAutoReply")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("EnableForceArchiveDeletion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableImap")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EnableIMAP");

                    b.Property<bool>("EnableMapi")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EnableMAPI");

                    b.Property<bool>("EnableOwa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EnableOWA");

                    b.Property<bool>("EnablePop")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EnablePOP");

                    b.Property<bool>("HideFromAddressBook")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsForJournaling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IssueWarningPct")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<int>("KeepDeletedItemsDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LitigationHoldMsg")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("LitigationHoldUrl")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("MailboxPlan")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MailboxPlanType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MailboxSizeMb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MailboxSizeMB");

                    b.Property<int>("MaxReceiveMessageSizeKb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MaxReceiveMessageSizeKB");

                    b.Property<int>("MaxRecipients")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxSendMessageSizeKb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MaxSendMessageSizeKB");

                    b.Property<int>("ProhibitSendPct")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProhibitSendReceivePct")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecoverableItemsSpace")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecoverableItemsWarningPct")
                        .HasColumnType("INTEGER");

                    b.HasKey("MailboxPlanId");

                    b.HasIndex(new[] { "ItemId" }, "ExchangeMailboxPlansIdx_ItemID");

                    b.HasIndex(new[] { "MailboxPlanId" }, "IX_ExchangeMailboxPlans")
                        .IsUnique();

                    b.ToTable("ExchangeMailboxPlans");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeMailboxPlanRetentionPolicyTag", b =>
                {
                    b.Property<int>("PlanTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PlanTagID");

                    b.Property<int>("MailboxPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TagID");

                    b.HasKey("PlanTagId");

                    b.ToTable("ExchangeMailboxPlanRetentionPolicyTags");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ExchangeMailboxPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ExchangeMailboxPlanID");

                    b.Property<int?>("LyncUserPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LyncUserPlanID");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("SfBuserPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SfBUserPlanID");

                    b.HasKey("ItemId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_ExchangeOrganizations_UniqueOrg")
                        .IsUnique();

                    b.ToTable("ExchangeOrganizations");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganizationDomain", b =>
                {
                    b.Property<int>("OrganizationDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrganizationDomainID");

                    b.Property<int?>("DomainId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DomainID");

                    b.Property<int>("DomainTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DomainTypeID");

                    b.Property<bool?>("IsHost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.HasKey("OrganizationDomainId");

                    b.HasIndex(new[] { "ItemId" }, "ExchangeOrganizationDomainsIdx_ItemID");

                    b.HasIndex(new[] { "DomainId" }, "IX_ExchangeOrganizationDomains_UniqueDomain")
                        .IsUnique();

                    b.ToTable("ExchangeOrganizationDomains");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganizationSetting", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SettingsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex(new[] { "ItemId" }, "ExchangeOrganizationSettingsIdx_ItemId");

                    b.ToTable("ExchangeOrganizationSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganizationSsFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StorageSpaceFolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemId" }, "ExchangeOrganizationSsFoldersIdx_ItemId");

                    b.HasIndex(new[] { "StorageSpaceFolderId" }, "ExchangeOrganizationSsFoldersIdx_StorageSpaceFolderId");

                    b.ToTable("ExchangeOrganizationSsFolders");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeRetentionPolicyTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TagID");

                    b.Property<int>("AgeLimitForRetention")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<int>("RetentionAction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TagType")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId");

                    b.ToTable("ExchangeRetentionPolicyTags");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.GlobalDnsRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("RecordID");

                    b.Property<int?>("IpaddressId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IPAddressID");

                    b.Property<int>("Mxpriority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MXPriority");

                    b.Property<int?>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<string>("RecordData")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("SrvPort")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SrvPriority")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SrvWeight")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecordId");

                    b.HasIndex(new[] { "IpaddressId" }, "GlobalDnsRecordsIdx_IPAddressID");

                    b.HasIndex(new[] { "PackageId" }, "GlobalDnsRecordsIdx_PackageID");

                    b.HasIndex(new[] { "ServerId" }, "GlobalDnsRecordsIdx_ServerID");

                    b.HasIndex(new[] { "ServiceId" }, "GlobalDnsRecordsIdx_ServiceID");

                    b.ToTable("GlobalDnsRecords");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.HostingPlan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PlanID");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsAddon")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<string>("PlanDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceLength")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecurrenceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("RecurringPrice")
                        .HasColumnType("money");

                    b.Property<int?>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<decimal?>("SetupPrice")
                        .HasColumnType("money");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("PlanId");

                    b.HasIndex(new[] { "PackageId" }, "HostingPlansIdx_PackageID");

                    b.HasIndex(new[] { "ServerId" }, "HostingPlansIdx_ServerID");

                    b.HasIndex(new[] { "UserId" }, "HostingPlansIdx_UserID");

                    b.ToTable("HostingPlans");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.HostingPlanQuota", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PlanID")
                        .HasColumnOrder(1);

                    b.Property<int>("QuotaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QuotaID")
                        .HasColumnOrder(2);

                    b.Property<int>("QuotaValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanId", "QuotaId");

                    b.HasIndex("QuotaId");

                    b.ToTable("HostingPlanQuotas");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.HostingPlanResource", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PlanID")
                        .HasColumnOrder(1);

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID")
                        .HasColumnOrder(2);

                    b.Property<bool?>("CalculateBandwidth")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CalculateDiskSpace")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("HostingPlanResources");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Ipaddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AddressID");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<string>("DefaultGateway")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalIp")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ExternalIP");

                    b.Property<string>("InternalIp")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("InternalIP");

                    b.Property<int?>("PoolId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PoolID");

                    b.Property<int?>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Vlan")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VLAN");

                    b.HasKey("AddressId");

                    b.HasIndex(new[] { "ServerId" }, "IPAddressesIdx_ServerID");

                    b.ToTable("IPAddresses");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.LyncUser", b =>
                {
                    b.Property<int>("LyncUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("LyncUserID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LyncUserPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LyncUserPlanID");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SipAddress")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("LyncUserId");

                    b.HasIndex(new[] { "LyncUserPlanId" }, "LyncUsersIdx_LyncUserPlanID");

                    b.ToTable("LyncUsers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.LyncUserPlan", b =>
                {
                    b.Property<int>("LyncUserPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowOrganizeMeetingsWithExternalAnonymous")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArchivePolicy")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Conferencing")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnterpriseVoice")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Federation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Im")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IM");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<string>("LyncUserPlanName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LyncUserPlanType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Mobility")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MobilityEnableOutsideVoice")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PublicImconnectivity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PublicIMConnectivity");

                    b.Property<bool>("RemoteUserAccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerUri")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasColumnName("ServerURI");

                    b.Property<int?>("Telephony")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelephonyDialPlanPolicy")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelephonyVoicePolicy")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("VoicePolicy")
                        .HasColumnType("INTEGER");

                    b.HasKey("LyncUserPlanId");

                    b.HasIndex(new[] { "LyncUserPlanId" }, "IX_LyncUserPlans")
                        .IsUnique();

                    b.HasIndex(new[] { "ItemId" }, "LyncUserPlansIdx_ItemID");

                    b.ToTable("LyncUserPlans");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Ocsuser", b =>
                {
                    b.Property<int>("OcsuserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OCSUserID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("InstanceID");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OcsuserId");

                    b.ToTable("OCSUsers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<DateTime?>("BandwidthUpdated")
                        .HasColumnType("datetime");

                    b.Property<bool>("DefaultTopPackage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OverrideQuotas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PackageComments")
                        .HasColumnType("ntext");

                    b.Property<string>("PackageName")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentPackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParentPackageID");

                    b.Property<int?>("PlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PlanID");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StatusID");

                    b.Property<DateTime>("StatusIdchangeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("StatusIDchangeDate");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("PackageId");

                    b.HasIndex(new[] { "ParentPackageId" }, "PackageIndex_ParentPackageID");

                    b.HasIndex(new[] { "PlanId" }, "PackageIndex_PlanID");

                    b.HasIndex(new[] { "ServerId" }, "PackageIndex_ServerID");

                    b.HasIndex(new[] { "UserId" }, "PackageIndex_UserID");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageAddon", b =>
                {
                    b.Property<int>("PackageAddonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageAddonID");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<int?>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<int?>("PlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PlanID");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StatusID");

                    b.HasKey("PackageAddonId");

                    b.HasIndex(new[] { "PackageId" }, "PackageAddonsIdx_PackageID");

                    b.HasIndex(new[] { "PlanId" }, "PackageAddonsIdx_PlanID");

                    b.ToTable("PackageAddons");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageIpaddress", b =>
                {
                    b.Property<int>("PackageAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageAddressID");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AddressID");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<int?>("OrgId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrgID");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.HasKey("PackageAddressId");

                    b.HasIndex(new[] { "AddressId" }, "PackageIPAddressesIdx_AddressID");

                    b.HasIndex(new[] { "ItemId" }, "PackageIPAddressesIdx_ItemID");

                    b.HasIndex(new[] { "PackageId" }, "PackageIPAddressesIdx_PackageID");

                    b.ToTable("PackageIPAddresses");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageQuota", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID")
                        .HasColumnOrder(1);

                    b.Property<int>("QuotaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QuotaID")
                        .HasColumnOrder(2);

                    b.Property<int>("QuotaValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("PackageId", "QuotaId");

                    b.HasIndex("QuotaId");

                    b.ToTable("PackageQuotas");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageResource", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID")
                        .HasColumnOrder(1);

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID")
                        .HasColumnOrder(2);

                    b.Property<bool>("CalculateBandwidth")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CalculateDiskspace")
                        .HasColumnType("INTEGER");

                    b.HasKey("PackageId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("PackageResources");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageSetting", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID")
                        .HasColumnOrder(1);

                    b.Property<string>("SettingsName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("PropertyValue")
                        .HasColumnType("ntext");

                    b.HasKey("PackageId", "SettingsName", "PropertyName");

                    b.ToTable("PackageSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageVlan", b =>
                {
                    b.Property<int>("PackageVlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageVlanID");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<int>("VlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VlanID");

                    b.HasKey("PackageVlanId");

                    b.HasIndex(new[] { "PackageId" }, "PackageVLANsIdx_PackageID");

                    b.HasIndex(new[] { "VlanId" }, "PackageVLANsIdx_VlanID");

                    b.ToTable("PackageVLANs");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackagesBandwidth", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID")
                        .HasColumnOrder(1);

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime")
                        .HasColumnOrder(3);

                    b.Property<long>("BytesReceived")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BytesSent")
                        .HasColumnType("INTEGER");

                    b.HasKey("PackageId", "GroupId", "LogDate");

                    b.HasIndex("GroupId");

                    b.ToTable("PackagesBandwidth");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackagesDiskspace", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID")
                        .HasColumnOrder(1);

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID")
                        .HasColumnOrder(2);

                    b.Property<long>("DiskSpace")
                        .HasColumnType("INTEGER");

                    b.HasKey("PackageId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("PackagesDiskspace");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackagesTreeCache", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<int>("ParentPackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParentPackageID");

                    b.HasIndex("PackageId");

                    b.HasIndex("ParentPackageId");

                    b.ToTable("PackagesTreeCache");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PrivateIpaddress", b =>
                {
                    b.Property<int>("PrivateAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PrivateAddressID");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.HasKey("PrivateAddressId");

                    b.HasIndex(new[] { "ItemId" }, "PrivateIPAddressesIdx_ItemID");

                    b.ToTable("PrivateIPAddresses");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PrivateNetworkVlan", b =>
                {
                    b.Property<int>("VlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VlanID");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<int?>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<int>("Vlan")
                        .HasColumnType("INTEGER");

                    b.HasKey("VlanId");

                    b.HasIndex(new[] { "ServerId" }, "PrivateNetworkVLANsIdx_ServerID");

                    b.ToTable("PrivateNetworkVLANs");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProviderID");

                    b.Property<bool?>("DisableAutoDiscovery")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EditorControl")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.HasKey("ProviderId");

                    b.HasIndex(new[] { "GroupId" }, "ProvidersIdx_GroupID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Quota", b =>
                {
                    b.Property<int>("QuotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("QuotaID");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("HideQuota")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemTypeID");

                    b.Property<int?>("PerOrganization")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuotaDescription")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("QuotaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuotaOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuotaTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QuotaTypeID");

                    b.Property<bool?>("ServiceQuota")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuotaId");

                    b.HasIndex(new[] { "GroupId" }, "QuotasIdx_GroupID");

                    b.HasIndex(new[] { "ItemTypeId" }, "QuotasIdx_ItemTypeID");

                    b.ToTable("Quotas");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Rdscertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("RDSCertificates");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Rdscollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RDSCollections");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.RdscollectionSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<int?>("ActiveSessionLimitMin")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AuthenticateUsingNla")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AuthenticateUsingNLA");

                    b.Property<bool?>("AutomaticReconnectionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrokenConnectionAction")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientDeviceRedirectionOptions")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ClientPrinterAsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ClientPrinterRedirected")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DisconnectedSessionLimitMin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EncryptionLevel")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdleSessionLimitMin")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxRedirectedMonitors")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("RdeasyPrintDriverEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RDEasyPrintDriverEnabled");

                    b.Property<int>("RdscollectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RDSCollectionId");

                    b.Property<string>("SecurityLayer")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("TemporaryFoldersDeletedOnExit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("TemporaryFoldersPerSession")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RdscollectionId" }, "RDSCollectionSettingsIdx_RDSCollectionId");

                    b.ToTable("RDSCollectionSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.RdscollectionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<int>("RdscollectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RDSCollectionId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "RDSCollectionUsersIdx_AccountID");

                    b.HasIndex(new[] { "RdscollectionId" }, "RDSCollectionUsersIdx_RDSCollectionId");

                    b.ToTable("RDSCollectionUsers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Rdsmessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("RdscollectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RDSCollectionId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RdscollectionId" }, "RDSMessagesIdx_RDSCollectionId");

                    b.ToTable("RDSMessages");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Rdsserver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<bool>("ConnectionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Controller")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FqdName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RdscollectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RDSCollectionId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RdscollectionId" }, "RDSServersIdx_RDSCollectionId");

                    b.ToTable("RDSServers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.RdsserverSetting", b =>
                {
                    b.Property<int>("RdsServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("SettingsName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<bool>("ApplyAdministrators")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ApplyUsers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyValue")
                        .HasColumnType("ntext");

                    b.HasKey("RdsServerId", "SettingsName", "PropertyName");

                    b.ToTable("RDSServerSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupController")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ShowGroup")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId");

                    b.ToTable("ResourceGroups");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ResourceGroupDnsRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("RecordID");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID");

                    b.Property<int?>("Mxpriority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MXPriority");

                    b.Property<string>("RecordData")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("RecordId");

                    b.HasIndex(new[] { "GroupId" }, "ResourceGroupDnsRecordsIdx_GroupID");

                    b.ToTable("ResourceGroupDnsRecords");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScheduleID");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("HistoriesNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaxExecutionTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("datetime");

                    b.Property<int?>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<string>("PriorityId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("PriorityID");

                    b.Property<string>("ScheduleName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduleTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("ScheduleTypeID");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("TaskID");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("WeekMonthDay")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScheduleId");

                    b.HasIndex(new[] { "PackageId" }, "ScheduleIdx_PackageID");

                    b.HasIndex(new[] { "TaskId" }, "ScheduleIdx_TaskID");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleParameter", b =>
                {
                    b.Property<int>("ScheduleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScheduleID")
                        .HasColumnOrder(1);

                    b.Property<string>("ParameterId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ParameterID")
                        .HasColumnOrder(2);

                    b.Property<string>("ParameterValue")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("ScheduleId", "ParameterId");

                    b.ToTable("ScheduleParameters");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleTask", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("TaskID");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RoleID");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("TaskId");

                    b.ToTable("ScheduleTasks");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleTaskParameter", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("TaskID")
                        .HasColumnOrder(1);

                    b.Property<string>("ParameterId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ParameterID")
                        .HasColumnOrder(2);

                    b.Property<string>("DataTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("DataTypeID");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParameterOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "ParameterId");

                    b.ToTable("ScheduleTaskParameters");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleTaskViewConfiguration", b =>
                {
                    b.Property<string>("ConfigurationId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ConfigurationID")
                        .HasColumnOrder(2);

                    b.Property<string>("TaskId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("TaskID")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigurationId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ScheduleTaskViewConfiguration");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<string>("AdParentDomain")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdParentDomainController")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdauthenticationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ADAuthenticationType");

                    b.Property<bool?>("Adenabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ADEnabled");

                    b.Property<string>("Adpassword")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ADPassword");

                    b.Property<string>("AdrootDomain")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("ADRootDomain");

                    b.Property<string>("Adusername")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ADUsername");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<string>("InstantDomainAlias")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsCore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Osplatform")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OSPlatform");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PasswordIsSha256")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PasswordIsSHA256");

                    b.Property<int?>("PrimaryGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PrimaryGroupID");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("VirtualServer")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex(new[] { "PrimaryGroupId" }, "ServersIdx_PrimaryGroupID");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("ClusterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ClusterID");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<int>("ProviderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProviderID");

                    b.Property<int>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServiceQuotaValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceId");

                    b.HasIndex(new[] { "ClusterId" }, "ServicesIdx_ClusterID");

                    b.HasIndex(new[] { "ProviderId" }, "ServicesIdx_ProviderID");

                    b.HasIndex(new[] { "ServerId" }, "ServicesIdx_ServerID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceDefaultProperty", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProviderID")
                        .HasColumnOrder(1);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("PropertyValue")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("ProviderId", "PropertyName");

                    b.ToTable("ServiceDefaultProperties");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ItemName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemTypeID");

                    b.Property<int?>("PackageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PackageID");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServiceID");

                    b.HasKey("ItemId");

                    b.HasIndex(new[] { "ItemTypeId" }, "ServiceItemsIdx_ItemTypeID");

                    b.HasIndex(new[] { "PackageId" }, "ServiceItemsIdx_PackageID");

                    b.HasIndex(new[] { "ServiceId" }, "ServiceItemsIdx_ServiceID");

                    b.ToTable("ServiceItems");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItemProperty", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID")
                        .HasColumnOrder(1);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("PropertyValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId", "PropertyName");

                    b.ToTable("ServiceItemProperties");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemTypeID");

                    b.Property<bool>("Backupable")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CalculateBandwidth")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CalculateDiskspace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Disposable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID");

                    b.Property<bool>("Importable")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Searchable")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Suspendable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemTypeId");

                    b.HasIndex(new[] { "GroupId" }, "ServiceItemTypesIdx_GroupID");

                    b.ToTable("ServiceItemTypes");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceProperty", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServiceID")
                        .HasColumnOrder(1);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("PropertyValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceId", "PropertyName");

                    b.ToTable("ServiceProperties");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.SfBuser", b =>
                {
                    b.Property<int>("SfBuserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SfBUserID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SfBuserPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SfBUserPlanID");

                    b.Property<string>("SipAddress")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("SfBuserId");

                    b.ToTable("SfBUsers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.SfBuserPlan", b =>
                {
                    b.Property<int>("SfBuserPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SfBUserPlanId");

                    b.Property<bool>("AllowOrganizeMeetingsWithExternalAnonymous")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArchivePolicy")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Conferencing")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnterpriseVoice")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Federation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Im")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IM");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ItemID");

                    b.Property<bool>("Mobility")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MobilityEnableOutsideVoice")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PublicImconnectivity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PublicIMConnectivity");

                    b.Property<bool>("RemoteUserAccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerUri")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasColumnName("ServerURI");

                    b.Property<string>("SfBuserPlanName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasColumnName("SfBUserPlanName");

                    b.Property<int?>("SfBuserPlanType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SfBUserPlanType");

                    b.Property<int?>("Telephony")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelephonyDialPlanPolicy")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelephonyVoicePolicy")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("VoicePolicy")
                        .HasColumnType("INTEGER");

                    b.HasKey("SfBuserPlanId");

                    b.ToTable("SfBUserPlans");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Sslcertificate", b =>
                {
                    b.Property<string>("Certificate")
                        .HasColumnType("ntext");

                    b.Property<string>("Csr")
                        .HasColumnType("ntext")
                        .HasColumnName("CSR");

                    b.Property<int?>("Csrlength")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CSRLength");

                    b.Property<string>("DistinguishedName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .HasColumnType("ntext");

                    b.Property<string>("Hostname")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<bool?>("Installed")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsRenewal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pfx")
                        .HasColumnType("ntext");

                    b.Property<int?>("PreviousId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SiteID");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.ToTable("SSLCertificates");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("FsrmQuotaSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FsrmQuotaType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UncPath")
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServerId" }, "StorageSpacesIdx_ServerId");

                    b.HasIndex(new[] { "ServiceId" }, "StorageSpacesIdx_ServiceId");

                    b.ToTable("StorageSpaces");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("FsrmQuotaSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FsrmQuotaType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("StorageSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UncPath")
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StorageSpaceId" }, "StorageSpaceFoldersIdx_StorageSpaceId");

                    b.ToTable("StorageSpaceFolders");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StorageSpaceLevels");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceLevelResourceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "StorageSpaceLevelResourceGroupsIdx_GroupId");

                    b.HasIndex(new[] { "LevelId" }, "StorageSpaceLevelResourceGroupsIdx_LevelId");

                    b.ToTable("StorageSpaceLevelResourceGroups");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.SupportServiceLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("LevelID");

                    b.Property<string>("LevelDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("LevelId");

                    b.ToTable("SupportServiceLevels");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.SystemSetting", b =>
                {
                    b.Property<string>("SettingsName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("PropertyValue")
                        .HasColumnType("ntext");

                    b.HasKey("SettingsName", "PropertyName");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Theme", b =>
                {
                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ltrname")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("LTRName");

                    b.Property<string>("Rtlname")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("RTLName");

                    b.Property<int>("ThemeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ThemeID");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ThemeSetting", b =>
                {
                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingsName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ThemeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ThemeID");

                    b.ToTable("ThemeSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<string>("AdditionalParams")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EcommerceEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FailedLogins")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HtmlMail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstantMessenger")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPeer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LoginStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MfaMode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OneTimePasswordState")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OwnerID");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PinSecret")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RoleID");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StatusID");

                    b.Property<string>("SubscriberNumber")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Username" }, "IX_Users_Username")
                        .IsUnique();

                    b.HasIndex(new[] { "OwnerId" }, "UsersIdx_OwnerID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID")
                        .HasColumnOrder(1);

                    b.Property<string>("SettingsName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("PropertyValue")
                        .HasColumnType("ntext");

                    b.HasKey("UserId", "SettingsName", "PropertyName");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.UsersDetailed", b =>
                {
                    b.Property<DateTime?>("Changed")
                        .HasColumnType("datetime");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EcommerceEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Expr1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FailedLogins")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPeer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LoginStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerEmail")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerFullName")
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OwnerID");

                    b.Property<string>("OwnerLastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OwnerRoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OwnerRoleID");

                    b.Property<string>("OwnerUsername")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PackagesNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RoleID");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StatusID");

                    b.Property<string>("SubscriberNumber")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.ToTable("UsersDetaileds");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Version", b =>
                {
                    b.Property<string>("DatabaseVersion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BuildDate")
                        .HasColumnType("datetime");

                    b.HasKey("DatabaseVersion");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.VirtualGroup", b =>
                {
                    b.Property<int>("VirtualGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VirtualGroupID");

                    b.Property<bool?>("BindDistributionToPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DistributionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GroupID");

                    b.Property<int>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.HasKey("VirtualGroupId");

                    b.HasIndex(new[] { "GroupId" }, "VirtualGroupsIdx_GroupID");

                    b.HasIndex(new[] { "ServerId" }, "VirtualGroupsIdx_ServerID");

                    b.ToTable("VirtualGroups");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.VirtualService", b =>
                {
                    b.Property<int>("VirtualServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VirtualServiceID");

                    b.Property<int>("ServerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServerID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServiceID");

                    b.HasKey("VirtualServiceId");

                    b.HasIndex(new[] { "ServerId" }, "VirtualServicesIdx_ServerID");

                    b.HasIndex(new[] { "ServiceId" }, "VirtualServicesIdx_ServiceID");

                    b.ToTable("VirtualServices");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.WebDavAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<Guid>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccountID");

                    b.Property<string>("AuthData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "WebDavAccessTokensIdx_AccountID");

                    b.ToTable("WebDavAccessTokens");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.WebDavPortalUsersSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Settings")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccountId" }, "WebDavPortalUsersSettingsIdx_AccountId");

                    b.ToTable("WebDavPortalUsersSettings");
                });

            modelBuilder.Entity("PackageService", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.AccessToken", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("AccessTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTaskLog", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.BackgroundTask", "Task")
                        .WithMany("BackgroundTaskLogs")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTaskParameter", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.BackgroundTask", "Task")
                        .WithMany("BackgroundTaskParameters")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTaskStack", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.BackgroundTask", "Task")
                        .WithMany("BackgroundTaskStacks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BlackBerryUser", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("BlackBerryUsers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Comment", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.User", "User")
                        .WithMany("CommentsNavigation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Crmuser", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("Crmusers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Domain", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "MailDomain")
                        .WithMany("DomainMailDomains")
                        .HasForeignKey("MailDomainId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("Domains")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "WebSite")
                        .WithMany("DomainWebSites")
                        .HasForeignKey("WebSiteId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "ZoneItem")
                        .WithMany("DomainZoneItems")
                        .HasForeignKey("ZoneItemId");

                    b.Navigation("MailDomain");

                    b.Navigation("Package");

                    b.Navigation("WebSite");

                    b.Navigation("ZoneItem");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.DomainDnsRecord", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Domain", "Domain")
                        .WithMany("DomainDnsRecords")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.EnterpriseFolder", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceFolder", "StorageSpaceFolder")
                        .WithMany("EnterpriseFolders")
                        .HasForeignKey("StorageSpaceFolderId");

                    b.Navigation("StorageSpaceFolder");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.EnterpriseFoldersOwaPermission", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("EnterpriseFoldersOwaPermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.EnterpriseFolder", "Folder")
                        .WithMany("EnterpriseFoldersOwaPermissions")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "Item")
                        .WithMany("ExchangeAccounts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeMailboxPlan", "MailboxPlan")
                        .WithMany("ExchangeAccounts")
                        .HasForeignKey("MailboxPlanId");

                    b.Navigation("Item");

                    b.Navigation("MailboxPlan");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccountEmailAddress", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("ExchangeAccountEmailAddresses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeMailboxPlan", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", "Item")
                        .WithMany("ExchangeMailboxPlans")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "Item")
                        .WithOne("ExchangeOrganization")
                        .HasForeignKey("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganizationDomain", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "Item")
                        .WithMany("ExchangeOrganizationDomains")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganizationSetting", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganizationSsFolder", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", "Item")
                        .WithMany("ExchangeOrganizationSsFolders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceFolder", "StorageSpaceFolder")
                        .WithMany("ExchangeOrganizationSsFolders")
                        .HasForeignKey("StorageSpaceFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("StorageSpaceFolder");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.GlobalDnsRecord", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Ipaddress", "Ipaddress")
                        .WithMany("GlobalDnsRecords")
                        .HasForeignKey("IpaddressId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("GlobalDnsRecords")
                        .HasForeignKey("PackageId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("GlobalDnsRecords")
                        .HasForeignKey("ServerId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Service", "Service")
                        .WithMany("GlobalDnsRecords")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Ipaddress");

                    b.Navigation("Package");

                    b.Navigation("Server");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.HostingPlan", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("HostingPlans")
                        .HasForeignKey("PackageId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("HostingPlans")
                        .HasForeignKey("ServerId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.User", "User")
                        .WithMany("HostingPlans")
                        .HasForeignKey("UserId");

                    b.Navigation("Package");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.HostingPlanQuota", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.HostingPlan", "Plan")
                        .WithMany("HostingPlanQuota")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Quota", "Quota")
                        .WithMany("HostingPlanQuota")
                        .HasForeignKey("QuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Quota");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.HostingPlanResource", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("HostingPlanResources")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.HostingPlan", "Plan")
                        .WithMany("HostingPlanResources")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Ipaddress", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("Ipaddresses")
                        .HasForeignKey("ServerId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.LyncUser", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.LyncUserPlan", "LyncUserPlan")
                        .WithMany("LyncUsers")
                        .HasForeignKey("LyncUserPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LyncUserPlan");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.LyncUserPlan", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", "Item")
                        .WithMany("LyncUserPlans")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Package", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "ParentPackage")
                        .WithMany("InverseParentPackage")
                        .HasForeignKey("ParentPackageId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.HostingPlan", "Plan")
                        .WithMany("Packages")
                        .HasForeignKey("PlanId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("Packages")
                        .HasForeignKey("ServerId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.User", "User")
                        .WithMany("Packages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPackage");

                    b.Navigation("Plan");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageAddon", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("PackageAddons")
                        .HasForeignKey("PackageId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.HostingPlan", "Plan")
                        .WithMany("PackageAddons")
                        .HasForeignKey("PlanId");

                    b.Navigation("Package");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageIpaddress", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Ipaddress", "Address")
                        .WithMany("PackageIpaddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "Item")
                        .WithMany("PackageIpaddresses")
                        .HasForeignKey("ItemId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("PackageIpaddresses")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Item");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageQuota", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("PackageQuota")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Quota", "Quota")
                        .WithMany("PackageQuota")
                        .HasForeignKey("QuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Quota");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageResource", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("PackageResources")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("PackageResources")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackageVlan", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("PackageVlans")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.PrivateNetworkVlan", "Vlan")
                        .WithMany("PackageVlans")
                        .HasForeignKey("VlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Vlan");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackagesBandwidth", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("PackagesBandwidths")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("PackagesBandwidths")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackagesDiskspace", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("PackagesDiskspaces")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("PackagesDiskspaces")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PackagesTreeCache", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "ParentPackage")
                        .WithMany()
                        .HasForeignKey("ParentPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("ParentPackage");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PrivateIpaddress", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "Item")
                        .WithMany("PrivateIpaddresses")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PrivateNetworkVlan", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("PrivateNetworkVlans")
                        .HasForeignKey("ServerId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Provider", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("Providers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Quota", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("Quota")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItemType", "ItemType")
                        .WithMany("Quota")
                        .HasForeignKey("ItemTypeId");

                    b.Navigation("Group");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.RdscollectionSetting", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Rdscollection", "Rdscollection")
                        .WithMany("RdscollectionSettings")
                        .HasForeignKey("RdscollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rdscollection");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.RdscollectionUser", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("RdscollectionUsers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Rdscollection", "Rdscollection")
                        .WithMany("RdscollectionUsers")
                        .HasForeignKey("RdscollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Rdscollection");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Rdsmessage", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Rdscollection", "Rdscollection")
                        .WithMany("Rdsmessages")
                        .HasForeignKey("RdscollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rdscollection");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Rdsserver", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Rdscollection", "Rdscollection")
                        .WithMany("Rdsservers")
                        .HasForeignKey("RdscollectionId");

                    b.Navigation("Rdscollection");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ResourceGroupDnsRecord", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("ResourceGroupDnsRecords")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Schedule", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("Schedules")
                        .HasForeignKey("PackageId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ScheduleTask", "Task")
                        .WithMany("Schedules")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleParameter", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleParameters")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleTaskParameter", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ScheduleTask", "Task")
                        .WithMany("ScheduleTaskParameters")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleTaskViewConfiguration", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ScheduleTask", "Task")
                        .WithMany("ScheduleTaskViewConfigurations")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Server", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "PrimaryGroup")
                        .WithMany("Servers")
                        .HasForeignKey("PrimaryGroupId");

                    b.Navigation("PrimaryGroup");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Service", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Cluster", "Cluster")
                        .WithMany("Services")
                        .HasForeignKey("ClusterId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Provider", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("Services")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");

                    b.Navigation("Provider");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceDefaultProperty", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Provider", "Provider")
                        .WithMany("ServiceDefaultProperties")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItemType", "ItemType")
                        .WithMany("ServiceItems")
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Package", "Package")
                        .WithMany("ServiceItems")
                        .HasForeignKey("PackageId");

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Service", "Service")
                        .WithMany("ServiceItems")
                        .HasForeignKey("ServiceId");

                    b.Navigation("ItemType");

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItemProperty", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", "Item")
                        .WithMany("ServiceItemProperties")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItemType", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("ServiceItemTypes")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceProperty", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Service", "Service")
                        .WithMany("ServiceProperties")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpace", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("StorageSpaces")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Service", "Service")
                        .WithMany("StorageSpaces")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceFolder", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.StorageSpace", "StorageSpace")
                        .WithMany("StorageSpaceFolders")
                        .HasForeignKey("StorageSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageSpace");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceLevelResourceGroup", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("StorageSpaceLevelResourceGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceLevel", "Level")
                        .WithMany("StorageSpaceLevelResourceGroups")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.User", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.User", "Owner")
                        .WithMany("InverseOwner")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.UserSetting", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.VirtualGroup", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", "Group")
                        .WithMany("VirtualGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("VirtualGroups")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.VirtualService", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Server", "Server")
                        .WithMany("VirtualServices")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.Service", "Service")
                        .WithMany("VirtualServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.WebDavAccessToken", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("WebDavAccessTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.WebDavPortalUsersSetting", b =>
                {
                    b.HasOne("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", "Account")
                        .WithMany("WebDavPortalUsersSettings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.BackgroundTask", b =>
                {
                    b.Navigation("BackgroundTaskLogs");

                    b.Navigation("BackgroundTaskParameters");

                    b.Navigation("BackgroundTaskStacks");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Cluster", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Domain", b =>
                {
                    b.Navigation("DomainDnsRecords");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.EnterpriseFolder", b =>
                {
                    b.Navigation("EnterpriseFoldersOwaPermissions");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeAccount", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("BlackBerryUsers");

                    b.Navigation("Crmusers");

                    b.Navigation("EnterpriseFoldersOwaPermissions");

                    b.Navigation("ExchangeAccountEmailAddresses");

                    b.Navigation("RdscollectionUsers");

                    b.Navigation("WebDavAccessTokens");

                    b.Navigation("WebDavPortalUsersSettings");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeMailboxPlan", b =>
                {
                    b.Navigation("ExchangeAccounts");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ExchangeOrganization", b =>
                {
                    b.Navigation("ExchangeMailboxPlans");

                    b.Navigation("ExchangeOrganizationSsFolders");

                    b.Navigation("LyncUserPlans");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.HostingPlan", b =>
                {
                    b.Navigation("HostingPlanQuota");

                    b.Navigation("HostingPlanResources");

                    b.Navigation("PackageAddons");

                    b.Navigation("Packages");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Ipaddress", b =>
                {
                    b.Navigation("GlobalDnsRecords");

                    b.Navigation("PackageIpaddresses");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.LyncUserPlan", b =>
                {
                    b.Navigation("LyncUsers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Package", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("GlobalDnsRecords");

                    b.Navigation("HostingPlans");

                    b.Navigation("InverseParentPackage");

                    b.Navigation("PackageAddons");

                    b.Navigation("PackageIpaddresses");

                    b.Navigation("PackageQuota");

                    b.Navigation("PackageResources");

                    b.Navigation("PackageVlans");

                    b.Navigation("PackagesBandwidths");

                    b.Navigation("PackagesDiskspaces");

                    b.Navigation("Schedules");

                    b.Navigation("ServiceItems");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.PrivateNetworkVlan", b =>
                {
                    b.Navigation("PackageVlans");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Provider", b =>
                {
                    b.Navigation("ServiceDefaultProperties");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Quota", b =>
                {
                    b.Navigation("HostingPlanQuota");

                    b.Navigation("PackageQuota");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Rdscollection", b =>
                {
                    b.Navigation("RdscollectionSettings");

                    b.Navigation("RdscollectionUsers");

                    b.Navigation("Rdsmessages");

                    b.Navigation("Rdsservers");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ResourceGroup", b =>
                {
                    b.Navigation("HostingPlanResources");

                    b.Navigation("PackageResources");

                    b.Navigation("PackagesBandwidths");

                    b.Navigation("PackagesDiskspaces");

                    b.Navigation("Providers");

                    b.Navigation("Quota");

                    b.Navigation("ResourceGroupDnsRecords");

                    b.Navigation("Servers");

                    b.Navigation("ServiceItemTypes");

                    b.Navigation("StorageSpaceLevelResourceGroups");

                    b.Navigation("VirtualGroups");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Schedule", b =>
                {
                    b.Navigation("ScheduleParameters");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ScheduleTask", b =>
                {
                    b.Navigation("ScheduleTaskParameters");

                    b.Navigation("ScheduleTaskViewConfigurations");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Server", b =>
                {
                    b.Navigation("GlobalDnsRecords");

                    b.Navigation("HostingPlans");

                    b.Navigation("Ipaddresses");

                    b.Navigation("Packages");

                    b.Navigation("PrivateNetworkVlans");

                    b.Navigation("Services");

                    b.Navigation("StorageSpaces");

                    b.Navigation("VirtualGroups");

                    b.Navigation("VirtualServices");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.Service", b =>
                {
                    b.Navigation("GlobalDnsRecords");

                    b.Navigation("ServiceItems");

                    b.Navigation("ServiceProperties");

                    b.Navigation("StorageSpaces");

                    b.Navigation("VirtualServices");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItem", b =>
                {
                    b.Navigation("DomainMailDomains");

                    b.Navigation("DomainWebSites");

                    b.Navigation("DomainZoneItems");

                    b.Navigation("ExchangeAccounts");

                    b.Navigation("ExchangeOrganization");

                    b.Navigation("ExchangeOrganizationDomains");

                    b.Navigation("PackageIpaddresses");

                    b.Navigation("PrivateIpaddresses");

                    b.Navigation("ServiceItemProperties");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.ServiceItemType", b =>
                {
                    b.Navigation("Quota");

                    b.Navigation("ServiceItems");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpace", b =>
                {
                    b.Navigation("StorageSpaceFolders");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceFolder", b =>
                {
                    b.Navigation("EnterpriseFolders");

                    b.Navigation("ExchangeOrganizationSsFolders");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.StorageSpaceLevel", b =>
                {
                    b.Navigation("StorageSpaceLevelResourceGroups");
                });

            modelBuilder.Entity("SolidCP.EnterpriseServer.Data.Entities.User", b =>
                {
                    b.Navigation("CommentsNavigation");

                    b.Navigation("HostingPlans");

                    b.Navigation("InverseOwner");

                    b.Navigation("Packages");

                    b.Navigation("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
