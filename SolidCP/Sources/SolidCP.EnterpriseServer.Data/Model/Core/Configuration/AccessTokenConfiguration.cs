// <auto-generated>
// ReSharper disable All
#if !NETFRAMEWORK && !NETSTANDARD

using AccessToken = SolidCP.EnterpriseServer.Base.HostedSolution.AccessToken;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using SolidCP.EnterpriseServer;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;

namespace SolidCP.EnterpriseServer.Core
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AccessTokens
    public class AccessTokenConfiguration : IEntityTypeConfiguration<AccessToken>
    {
        public void Configure(EntityTypeBuilder<AccessToken> builder)
        {
            builder.ToTable("AccessTokens", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__AccessTo__3214EC27A32557FE").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AccessTokenGuid).HasColumnName(@"AccessTokenGuid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.ExpirationDate).HasColumnName(@"ExpirationDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ItemId).HasColumnName(@"ItemId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TokenType).HasColumnName(@"TokenType").HasColumnType("int").IsRequired();
            builder.Property(x => x.SmsResponse).HasColumnName(@"SmsResponse").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);

            builder.HasIndex(x => x.AccountId).HasDatabaseName("AccessTokensIdx_AccountID");
        }
    }

}
#endif
// </auto-generated>
