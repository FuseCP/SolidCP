// <auto-generated>
// ReSharper disable All
#if !NETFRAMEWORK && !NETSTANDARD

using AccessToken = SolidCP.EnterpriseServer.Base.HostedSolution.AccessToken;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Infrastructure;
using SolidCP.EnterpriseServer;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace SolidCP.EnterpriseServer.Core
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface ICoreDbContext : Data.IGenericDbContext, IDisposable
    {
        DbSet<AccessToken> AccessTokens { get; set; } // AccessTokens

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        int AddAccessToken(out int? tokenId, Guid? accessToken, DateTime? expirationDate, int? accountId, int? itemId, int? tokenType);
        // AddAccessTokenAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddAdditionalGroup(out int? groupId, int? userId, string groupName);
        // AddAdditionalGroupAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddAuditLogRecord(string recordId, int? severityId, int? userId, int? packageId, string username, int? itemId, DateTime? startDate, DateTime? finishDate, string sourceName, string taskName, string itemName, string executionLog);
        // AddAuditLogRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddBackgroundTask(out int? backgroundTaskId, Guid? guid, string taskId, int? scheduleId, int? packageId, int? userId, int? effectiveUserId, string taskName, int? itemId, string itemName, DateTime? startDate, int? indicatorCurrent, int? indicatorMaximum, int? maximumExecutionTime, string source, int? severity, bool? completed, bool? notifyOnComplete, int? status);
        // AddBackgroundTaskAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddBackgroundTaskLog(int? taskId, DateTime? date, string exceptionStackTrace, int? innerTaskStart, int? severity, string text, int? textIdent, string xmlParameters);
        // AddBackgroundTaskLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddBackgroundTaskParam(int? taskId, string name, string value, string typeName);
        // AddBackgroundTaskParamAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddBackgroundTaskStack(int? taskId);
        // AddBackgroundTaskStackAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddBlackBerryUser(int? accountId);
        // AddBlackBerryUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddCluster(out int? clusterId, string clusterName);
        // AddClusterAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AddComment(int? actorId, string itemTypeId, int? itemId, string commentText, int? severityId);
        // AddCommentAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }
}
#endif
// </auto-generated>
