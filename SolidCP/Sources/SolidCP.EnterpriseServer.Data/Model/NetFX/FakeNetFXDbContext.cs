// <auto-generated>
// ReSharper disable All
#if NETFRAMEWORK

using AccessToken = SolidCP.EnterpriseServer.Base.HostedSolution.AccessToken;
using SolidCP.EnterpriseServer;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace SolidCP.EnterpriseServer.NetFX
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeNetFXDbContext : INetFXDbContext
    {
        public DbSet<AccessToken> AccessTokens { get; set; } // AccessTokens

        public FakeNetFXDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AccessTokens = new FakeDbSet<AccessToken>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public int AddAccessToken(out int? tokenId, Guid? accessToken = null, DateTime? expirationDate = null, int? accountId = null, int? itemId = null, int? tokenType = null)
        {
            tokenId = default(int);
            return 0;
        }

        // AddAccessTokenAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddAdditionalGroup(out int? groupId, int? userId, string groupName)
        {
            groupId = default(int);
            return 0;
        }

        // AddAdditionalGroupAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddAuditLogRecord(string recordId, int? severityId, int? userId, int? packageId, string username, int? itemId, DateTime? startDate, DateTime? finishDate, string sourceName, string taskName, string itemName, string executionLog)
        {
            return 0;
        }

        // AddAuditLogRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTask(out int? backgroundTaskId, Guid? guid, string taskId, int? scheduleId, int? packageId, int? userId, int? effectiveUserId, string taskName, int? itemId, string itemName, DateTime? startDate, int? indicatorCurrent, int? indicatorMaximum, int? maximumExecutionTime, string source, int? severity = null, bool? completed = null, bool? notifyOnComplete = null, int? status = null)
        {
            backgroundTaskId = default(int);
            return 0;
        }

        // AddBackgroundTaskAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskLog(int? taskId, DateTime? date, string exceptionStackTrace, int? innerTaskStart, int? severity, string text, int? textIdent, string xmlParameters)
        {
            return 0;
        }

        // AddBackgroundTaskLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskParam(int? taskId, string name, string value, string typeName)
        {
            return 0;
        }

        // AddBackgroundTaskParamAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskStack(int? taskId = null)
        {
            return 0;
        }

        // AddBackgroundTaskStackAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBlackBerryUser(int? accountId = null)
        {
            return 0;
        }

        // AddBlackBerryUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddCluster(out int? clusterId, string clusterName)
        {
            clusterId = default(int);
            return 0;
        }

        // AddClusterAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddComment(int? actorId, string itemTypeId, int? itemId, string commentText, int? severityId = null)
        {
            return 0;
        }

        // AddCommentAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }
}
#endif
// </auto-generated>
