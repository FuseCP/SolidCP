// <auto-generated>
// ReSharper disable All
#if NETFRAMEWORK

using AccessToken = SolidCP.EnterpriseServer.Base.HostedSolution.AccessToken;
using SolidCP.EnterpriseServer;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace SolidCP.EnterpriseServer.NetFX
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class NetFXDbContext : DbContext, Data.IGenericDbContext, INetFXDbContext
    {
        public DbSet<AccessToken> AccessTokens { get; set; } // AccessTokens

        static NetFXDbContext()
        {
            System.Data.Entity.Database.SetInitializer<NetFXDbContext>(null);
        }

        /// <inheritdoc />
        public NetFXDbContext()
            : base("Name=EnterpriseServer")
        {
        }

        /// <inheritdoc />
        public NetFXDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public NetFXDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public NetFXDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public NetFXDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public NetFXDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccessTokenConfiguration());

            // Indexes
            modelBuilder.Entity<AccessToken>()
                .Property(e => e.AccountId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("AccessTokensIdx_AccountID", 1))
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccessTokenConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public int AddAccessToken(out int? tokenId, Guid? accessToken = null, DateTime? expirationDate = null, int? accountId = null, int? itemId = null, int? tokenType = null)
        {
            var tokenIdParam = new SqlParameter { ParameterName = "@TokenID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var accessTokenParam = new SqlParameter { ParameterName = "@AccessToken", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Input, Value = accessToken.GetValueOrDefault() };
            if (!accessToken.HasValue)
                accessTokenParam.Value = DBNull.Value;

            var expirationDateParam = new SqlParameter { ParameterName = "@ExpirationDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = expirationDate.GetValueOrDefault() };
            if (!expirationDate.HasValue)
                expirationDateParam.Value = DBNull.Value;

            var accountIdParam = new SqlParameter { ParameterName = "@AccountID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = accountId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!accountId.HasValue)
                accountIdParam.Value = DBNull.Value;

            var itemIdParam = new SqlParameter { ParameterName = "@ItemId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = itemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!itemId.HasValue)
                itemIdParam.Value = DBNull.Value;

            var tokenTypeParam = new SqlParameter { ParameterName = "@TokenType", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = tokenType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tokenType.HasValue)
                tokenTypeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddAccessToken] @TokenID OUTPUT, @AccessToken, @ExpirationDate, @AccountID, @ItemId, @TokenType", tokenIdParam, accessTokenParam, expirationDateParam, accountIdParam, itemIdParam, tokenTypeParam, procResultParam);

            if (IsSqlParameterNull(tokenIdParam))
                tokenId = null;
            else
                tokenId = (int) tokenIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AddAccessTokenAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddAdditionalGroup(out int? groupId, int? userId, string groupName)
        {
            var groupIdParam = new SqlParameter { ParameterName = "@GroupID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var userIdParam = new SqlParameter { ParameterName = "@UserID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var groupNameParam = new SqlParameter { ParameterName = "@GroupName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = groupName, Size = 255 };
            if (groupNameParam.Value == null)
                groupNameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddAdditionalGroup] @GroupID OUTPUT, @UserID, @GroupName", groupIdParam, userIdParam, groupNameParam, procResultParam);

            if (IsSqlParameterNull(groupIdParam))
                groupId = null;
            else
                groupId = (int) groupIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AddAdditionalGroupAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddAuditLogRecord(string recordId, int? severityId, int? userId, int? packageId, string username, int? itemId, DateTime? startDate, DateTime? finishDate, string sourceName, string taskName, string itemName, string executionLog)
        {
            var recordIdParam = new SqlParameter { ParameterName = "@RecordID", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = recordId, Size = 32 };
            if (recordIdParam.Value == null)
                recordIdParam.Value = DBNull.Value;

            var severityIdParam = new SqlParameter { ParameterName = "@SeverityID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = severityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!severityId.HasValue)
                severityIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@UserID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var packageIdParam = new SqlParameter { ParameterName = "@PackageID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = packageId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!packageId.HasValue)
                packageIdParam.Value = DBNull.Value;

            var usernameParam = new SqlParameter { ParameterName = "@Username", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = username, Size = 50 };
            if (usernameParam.Value == null)
                usernameParam.Value = DBNull.Value;

            var itemIdParam = new SqlParameter { ParameterName = "@ItemID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = itemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!itemId.HasValue)
                itemIdParam.Value = DBNull.Value;

            var startDateParam = new SqlParameter { ParameterName = "@StartDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = DBNull.Value;

            var finishDateParam = new SqlParameter { ParameterName = "@FinishDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = finishDate.GetValueOrDefault() };
            if (!finishDate.HasValue)
                finishDateParam.Value = DBNull.Value;

            var sourceNameParam = new SqlParameter { ParameterName = "@SourceName", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = sourceName, Size = 50 };
            if (sourceNameParam.Value == null)
                sourceNameParam.Value = DBNull.Value;

            var taskNameParam = new SqlParameter { ParameterName = "@TaskName", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = taskName, Size = 50 };
            if (taskNameParam.Value == null)
                taskNameParam.Value = DBNull.Value;

            var itemNameParam = new SqlParameter { ParameterName = "@ItemName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = itemName, Size = 50 };
            if (itemNameParam.Value == null)
                itemNameParam.Value = DBNull.Value;

            var executionLogParam = new SqlParameter { ParameterName = "@ExecutionLog", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Input, Value = executionLog, Size = 1073741823 };
            if (executionLogParam.Value == null)
                executionLogParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddAuditLogRecord] @RecordID, @SeverityID, @UserID, @PackageID, @Username, @ItemID, @StartDate, @FinishDate, @SourceName, @TaskName, @ItemName, @ExecutionLog", recordIdParam, severityIdParam, userIdParam, packageIdParam, usernameParam, itemIdParam, startDateParam, finishDateParam, sourceNameParam, taskNameParam, itemNameParam, executionLogParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddAuditLogRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTask(out int? backgroundTaskId, Guid? guid, string taskId, int? scheduleId, int? packageId, int? userId, int? effectiveUserId, string taskName, int? itemId, string itemName, DateTime? startDate, int? indicatorCurrent, int? indicatorMaximum, int? maximumExecutionTime, string source, int? severity = null, bool? completed = null, bool? notifyOnComplete = null, int? status = null)
        {
            var backgroundTaskIdParam = new SqlParameter { ParameterName = "@BackgroundTaskID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var guidParam = new SqlParameter { ParameterName = "@Guid", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Input, Value = guid.GetValueOrDefault() };
            if (!guid.HasValue)
                guidParam.Value = DBNull.Value;

            var taskIdParam = new SqlParameter { ParameterName = "@TaskID", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = taskId, Size = 255 };
            if (taskIdParam.Value == null)
                taskIdParam.Value = DBNull.Value;

            var scheduleIdParam = new SqlParameter { ParameterName = "@ScheduleID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = scheduleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!scheduleId.HasValue)
                scheduleIdParam.Value = DBNull.Value;

            var packageIdParam = new SqlParameter { ParameterName = "@PackageID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = packageId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!packageId.HasValue)
                packageIdParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@UserID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var effectiveUserIdParam = new SqlParameter { ParameterName = "@EffectiveUserID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = effectiveUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!effectiveUserId.HasValue)
                effectiveUserIdParam.Value = DBNull.Value;

            var taskNameParam = new SqlParameter { ParameterName = "@TaskName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = taskName, Size = 255 };
            if (taskNameParam.Value == null)
                taskNameParam.Value = DBNull.Value;

            var itemIdParam = new SqlParameter { ParameterName = "@ItemID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = itemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!itemId.HasValue)
                itemIdParam.Value = DBNull.Value;

            var itemNameParam = new SqlParameter { ParameterName = "@ItemName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = itemName, Size = 255 };
            if (itemNameParam.Value == null)
                itemNameParam.Value = DBNull.Value;

            var startDateParam = new SqlParameter { ParameterName = "@StartDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = DBNull.Value;

            var indicatorCurrentParam = new SqlParameter { ParameterName = "@IndicatorCurrent", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = indicatorCurrent.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!indicatorCurrent.HasValue)
                indicatorCurrentParam.Value = DBNull.Value;

            var indicatorMaximumParam = new SqlParameter { ParameterName = "@IndicatorMaximum", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = indicatorMaximum.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!indicatorMaximum.HasValue)
                indicatorMaximumParam.Value = DBNull.Value;

            var maximumExecutionTimeParam = new SqlParameter { ParameterName = "@MaximumExecutionTime", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maximumExecutionTime.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maximumExecutionTime.HasValue)
                maximumExecutionTimeParam.Value = DBNull.Value;

            var sourceParam = new SqlParameter { ParameterName = "@Source", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = source, Size = -1 };
            if (sourceParam.Value == null)
                sourceParam.Value = DBNull.Value;

            var severityParam = new SqlParameter { ParameterName = "@Severity", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = severity.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!severity.HasValue)
                severityParam.Value = DBNull.Value;

            var completedParam = new SqlParameter { ParameterName = "@Completed", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = completed.GetValueOrDefault() };
            if (!completed.HasValue)
                completedParam.Value = DBNull.Value;

            var notifyOnCompleteParam = new SqlParameter { ParameterName = "@NotifyOnComplete", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = notifyOnComplete.GetValueOrDefault() };
            if (!notifyOnComplete.HasValue)
                notifyOnCompleteParam.Value = DBNull.Value;

            var statusParam = new SqlParameter { ParameterName = "@Status", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddBackgroundTask] @BackgroundTaskID OUTPUT, @Guid, @TaskID, @ScheduleID, @PackageID, @UserID, @EffectiveUserID, @TaskName, @ItemID, @ItemName, @StartDate, @IndicatorCurrent, @IndicatorMaximum, @MaximumExecutionTime, @Source, @Severity, @Completed, @NotifyOnComplete, @Status", backgroundTaskIdParam, guidParam, taskIdParam, scheduleIdParam, packageIdParam, userIdParam, effectiveUserIdParam, taskNameParam, itemIdParam, itemNameParam, startDateParam, indicatorCurrentParam, indicatorMaximumParam, maximumExecutionTimeParam, sourceParam, severityParam, completedParam, notifyOnCompleteParam, statusParam, procResultParam);

            if (IsSqlParameterNull(backgroundTaskIdParam))
                backgroundTaskId = null;
            else
                backgroundTaskId = (int) backgroundTaskIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AddBackgroundTaskAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskLog(int? taskId, DateTime? date, string exceptionStackTrace, int? innerTaskStart, int? severity, string text, int? textIdent, string xmlParameters)
        {
            var taskIdParam = new SqlParameter { ParameterName = "@TaskID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = taskId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskId.HasValue)
                taskIdParam.Value = DBNull.Value;

            var dateParam = new SqlParameter { ParameterName = "@Date", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = date.GetValueOrDefault() };
            if (!date.HasValue)
                dateParam.Value = DBNull.Value;

            var exceptionStackTraceParam = new SqlParameter { ParameterName = "@ExceptionStackTrace", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Input, Value = exceptionStackTrace, Size = 1073741823 };
            if (exceptionStackTraceParam.Value == null)
                exceptionStackTraceParam.Value = DBNull.Value;

            var innerTaskStartParam = new SqlParameter { ParameterName = "@InnerTaskStart", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = innerTaskStart.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!innerTaskStart.HasValue)
                innerTaskStartParam.Value = DBNull.Value;

            var severityParam = new SqlParameter { ParameterName = "@Severity", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = severity.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!severity.HasValue)
                severityParam.Value = DBNull.Value;

            var textParam = new SqlParameter { ParameterName = "@Text", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Input, Value = text, Size = 1073741823 };
            if (textParam.Value == null)
                textParam.Value = DBNull.Value;

            var textIdentParam = new SqlParameter { ParameterName = "@TextIdent", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = textIdent.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!textIdent.HasValue)
                textIdentParam.Value = DBNull.Value;

            var xmlParametersParam = new SqlParameter { ParameterName = "@XmlParameters", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Input, Value = xmlParameters, Size = 1073741823 };
            if (xmlParametersParam.Value == null)
                xmlParametersParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddBackgroundTaskLog] @TaskID, @Date, @ExceptionStackTrace, @InnerTaskStart, @Severity, @Text, @TextIdent, @XmlParameters", taskIdParam, dateParam, exceptionStackTraceParam, innerTaskStartParam, severityParam, textParam, textIdentParam, xmlParametersParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddBackgroundTaskLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskParam(int? taskId, string name, string value, string typeName)
        {
            var taskIdParam = new SqlParameter { ParameterName = "@TaskID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = taskId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskId.HasValue)
                taskIdParam.Value = DBNull.Value;

            var nameParam = new SqlParameter { ParameterName = "@Name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = name, Size = 255 };
            if (nameParam.Value == null)
                nameParam.Value = DBNull.Value;

            var valueParam = new SqlParameter { ParameterName = "@Value", SqlDbType = SqlDbType.NText, Direction = ParameterDirection.Input, Value = value, Size = 1073741823 };
            if (valueParam.Value == null)
                valueParam.Value = DBNull.Value;

            var typeNameParam = new SqlParameter { ParameterName = "@TypeName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = typeName, Size = 255 };
            if (typeNameParam.Value == null)
                typeNameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddBackgroundTaskParam] @TaskID, @Name, @Value, @TypeName", taskIdParam, nameParam, valueParam, typeNameParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddBackgroundTaskParamAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskStack(int? taskId = null)
        {
            var taskIdParam = new SqlParameter { ParameterName = "@TaskID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = taskId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!taskId.HasValue)
                taskIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddBackgroundTaskStack] @TaskID", taskIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddBackgroundTaskStackAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBlackBerryUser(int? accountId = null)
        {
            var accountIdParam = new SqlParameter { ParameterName = "@AccountID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = accountId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!accountId.HasValue)
                accountIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddBlackBerryUser] @AccountID", accountIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddBlackBerryUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddCluster(out int? clusterId, string clusterName)
        {
            var clusterIdParam = new SqlParameter { ParameterName = "@ClusterID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var clusterNameParam = new SqlParameter { ParameterName = "@ClusterName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = clusterName, Size = 100 };
            if (clusterNameParam.Value == null)
                clusterNameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddCluster] @ClusterID OUTPUT, @ClusterName", clusterIdParam, clusterNameParam, procResultParam);

            if (IsSqlParameterNull(clusterIdParam))
                clusterId = null;
            else
                clusterId = (int) clusterIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AddClusterAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddComment(int? actorId, string itemTypeId, int? itemId, string commentText, int? severityId = null)
        {
            var actorIdParam = new SqlParameter { ParameterName = "@ActorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = actorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!actorId.HasValue)
                actorIdParam.Value = DBNull.Value;

            var itemTypeIdParam = new SqlParameter { ParameterName = "@ItemTypeID", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = itemTypeId, Size = 50 };
            if (itemTypeIdParam.Value == null)
                itemTypeIdParam.Value = DBNull.Value;

            var itemIdParam = new SqlParameter { ParameterName = "@ItemID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = itemId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!itemId.HasValue)
                itemIdParam.Value = DBNull.Value;

            var commentTextParam = new SqlParameter { ParameterName = "@CommentText", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = commentText, Size = 1000 };
            if (commentTextParam.Value == null)
                commentTextParam.Value = DBNull.Value;

            var severityIdParam = new SqlParameter { ParameterName = "@SeverityID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = severityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!severityId.HasValue)
                severityIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddComment] @ActorID, @ItemTypeID, @ItemID, @CommentText, @SeverityID", actorIdParam, itemTypeIdParam, itemIdParam, commentTextParam, severityIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddCommentAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }
}
#endif
// </auto-generated>
