// <auto-generated>
// ReSharper disable All
#if !NETFRAMEWORK && !NETSTANDARD

using AccessToken = SolidCP.EnterpriseServer.Base.HostedSolution.AccessToken;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Infrastructure;
using SolidCP.EnterpriseServer;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace SolidCP.EnterpriseServer.Core
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeCoreDbContext : ICoreDbContext
    {
        public DbSet<AccessToken> AccessTokens { get; set; } // AccessTokens

        public FakeCoreDbContext()
        {
            _database = new FakeDatabaseFacade(new CoreDbContext());

            AccessTokens = new FakeDbSet<AccessToken>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }


        // Stored Procedures

        public int AddAccessToken(out int? tokenId, Guid? accessToken = null, DateTime? expirationDate = null, int? accountId = null, int? itemId = null, int? tokenType = null)
        {
            tokenId = default(int);
            return 0;
        }

        // AddAccessTokenAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddAdditionalGroup(out int? groupId, int? userId, string groupName)
        {
            groupId = default(int);
            return 0;
        }

        // AddAdditionalGroupAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddAuditLogRecord(string recordId, int? severityId, int? userId, int? packageId, string username, int? itemId, DateTime? startDate, DateTime? finishDate, string sourceName, string taskName, string itemName, string executionLog)
        {
            return 0;
        }

        // AddAuditLogRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTask(out int? backgroundTaskId, Guid? guid, string taskId, int? scheduleId, int? packageId, int? userId, int? effectiveUserId, string taskName, int? itemId, string itemName, DateTime? startDate, int? indicatorCurrent, int? indicatorMaximum, int? maximumExecutionTime, string source, int? severity = null, bool? completed = null, bool? notifyOnComplete = null, int? status = null)
        {
            backgroundTaskId = default(int);
            return 0;
        }

        // AddBackgroundTaskAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskLog(int? taskId, DateTime? date, string exceptionStackTrace, int? innerTaskStart, int? severity, string text, int? textIdent, string xmlParameters)
        {
            return 0;
        }

        // AddBackgroundTaskLogAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskParam(int? taskId, string name, string value, string typeName)
        {
            return 0;
        }

        // AddBackgroundTaskParamAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBackgroundTaskStack(int? taskId = null)
        {
            return 0;
        }

        // AddBackgroundTaskStackAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddBlackBerryUser(int? accountId = null)
        {
            return 0;
        }

        // AddBlackBerryUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddCluster(out int? clusterId, string clusterName)
        {
            clusterId = default(int);
            return 0;
        }

        // AddClusterAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddComment(int? actorId, string itemTypeId, int? itemId, string commentText, int? severityId = null)
        {
            return 0;
        }

        // AddCommentAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }
}
#endif
// </auto-generated>
