//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.9168
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolidCP.EnterpriseServer.Servers {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using System.Data;
    using SolidCP.Providers;
    using SolidCP.Providers.Common;
    using SolidCP.Providers.ResultObjects;
    using SolidCP.Providers.DNS;
    using SolidCP.Providers.DomainLookup;
    using SolidCP.Providers.OS;
    using SolidCP.Server;
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esServersSoap", Namespace="http://smbsaas/solidcp/enterpriseserver")]
    public partial class esServers : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback ChangeOSServiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogEntriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogEntriesPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback RebootSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMemoryPackageIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMemoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawAllServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerShortDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckServerAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerConnectionPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerADPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutoUpdateServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVirtualServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableVirtualServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVirtualServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddVirtualServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteVirtualServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVirtualGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawServicesByServerIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesByServerIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesByServerIdGroupNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawServicesByGroupIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawServicesByGroupNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceSettingsRDSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProviderServiceQuotaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailServiceSettingsByPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstalledProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResourceGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResourceGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProvidersByGroupIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageServiceProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailFilterUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailFilterUrlByHostingPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsInstalledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerFilePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivateNetworVLANsPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPrivateNetworkVLANOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePrivateNetworkVLANsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPrivateNetworkVLANsRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivateNetworVLANOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePrivateNetworVLANOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagePrivateNetworkVLANsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeallocatePackageVLANsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnallottedVLANsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllocatePackageVLANsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIPAddressesPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIPAddressesRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteIPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnallottedIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageIPAddressesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageUnassignedIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllocatePackageIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllocateMaximumPackageIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeallocatePackageIPAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClustersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClusterOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClusterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawDnsRecordsByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawDnsRecordsByServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawDnsRecordsByPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawDnsRecordsByGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDnsRecordsByServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDnsRecordsByServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDnsRecordsByPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDnsRecordsByGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDnsRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDnsRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDnsRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDnsRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainDnsRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainsByDomainIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResellerDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainsPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDomainWithProvisioningOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback DetachDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableDomainDnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableDomainDnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDomainPreviewDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDomainPreviewDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDnsZoneRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawDnsZoneRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDnsZoneRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDnsZoneRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDnsZoneRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminalServicesSessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseTerminalServicesSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOSProcessesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminateOSProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckLoadUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableLoadUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitWPIFeedsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWPITabsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWPIKeywordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWPIProductsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWPIProductsFilteredOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWPIProductByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWPIProductsWithDependenciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallWPIProductsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInstallWPIProductsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWPIStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback WpiGetLogFileDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback WpiGetLogsInDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOSServicesOperationCompleted;
        
        /// <remarks/>
        public esServers() {
            this.Url = "http://localhost:9002/esServers.asmx";
        }
        
        /// <remarks/>
        public event ChangeOSServiceStatusCompletedEventHandler ChangeOSServiceStatusCompleted;
        
        /// <remarks/>
        public event GetLogNamesCompletedEventHandler GetLogNamesCompleted;
        
        /// <remarks/>
        public event GetLogEntriesCompletedEventHandler GetLogEntriesCompleted;
        
        /// <remarks/>
        public event GetLogEntriesPagedCompletedEventHandler GetLogEntriesPagedCompleted;
        
        /// <remarks/>
        public event ClearLogCompletedEventHandler ClearLogCompleted;
        
        /// <remarks/>
        public event RebootSystemCompletedEventHandler RebootSystemCompleted;
        
        /// <remarks/>
        public event GetMemoryPackageIdCompletedEventHandler GetMemoryPackageIdCompleted;
        
        /// <remarks/>
        public event GetMemoryCompletedEventHandler GetMemoryCompleted;
        
        /// <remarks/>
        public event GetAllServersCompletedEventHandler GetAllServersCompleted;
        
        /// <remarks/>
        public event GetRawAllServersCompletedEventHandler GetRawAllServersCompleted;
        
        /// <remarks/>
        public event GetServersCompletedEventHandler GetServersCompleted;
        
        /// <remarks/>
        public event GetRawServersCompletedEventHandler GetRawServersCompleted;
        
        /// <remarks/>
        public event GetServerShortDetailsCompletedEventHandler GetServerShortDetailsCompleted;
        
        /// <remarks/>
        public event GetServerByIdCompletedEventHandler GetServerByIdCompleted;
        
        /// <remarks/>
        public event GetServerByNameCompletedEventHandler GetServerByNameCompleted;
        
        /// <remarks/>
        public event CheckServerAvailableCompletedEventHandler CheckServerAvailableCompleted;
        
        /// <remarks/>
        public event AddServerCompletedEventHandler AddServerCompleted;
        
        /// <remarks/>
        public event UpdateServerCompletedEventHandler UpdateServerCompleted;
        
        /// <remarks/>
        public event UpdateServerConnectionPasswordCompletedEventHandler UpdateServerConnectionPasswordCompleted;
        
        /// <remarks/>
        public event UpdateServerADPasswordCompletedEventHandler UpdateServerADPasswordCompleted;
        
        /// <remarks/>
        public event DeleteServerCompletedEventHandler DeleteServerCompleted;
        
        /// <remarks/>
        public event AutoUpdateServerCompletedEventHandler AutoUpdateServerCompleted;
        
        /// <remarks/>
        public event GetVirtualServersCompletedEventHandler GetVirtualServersCompleted;
        
        /// <remarks/>
        public event GetAvailableVirtualServicesCompletedEventHandler GetAvailableVirtualServicesCompleted;
        
        /// <remarks/>
        public event GetVirtualServicesCompletedEventHandler GetVirtualServicesCompleted;
        
        /// <remarks/>
        public event AddVirtualServicesCompletedEventHandler AddVirtualServicesCompleted;
        
        /// <remarks/>
        public event DeleteVirtualServicesCompletedEventHandler DeleteVirtualServicesCompleted;
        
        /// <remarks/>
        public event UpdateVirtualGroupsCompletedEventHandler UpdateVirtualGroupsCompleted;
        
        /// <remarks/>
        public event GetRawServicesByServerIdCompletedEventHandler GetRawServicesByServerIdCompleted;
        
        /// <remarks/>
        public event GetServicesByServerIdCompletedEventHandler GetServicesByServerIdCompleted;
        
        /// <remarks/>
        public event GetServicesByServerIdGroupNameCompletedEventHandler GetServicesByServerIdGroupNameCompleted;
        
        /// <remarks/>
        public event GetRawServicesByGroupIdCompletedEventHandler GetRawServicesByGroupIdCompleted;
        
        /// <remarks/>
        public event GetRawServicesByGroupNameCompletedEventHandler GetRawServicesByGroupNameCompleted;
        
        /// <remarks/>
        public event GetServiceInfoCompletedEventHandler GetServiceInfoCompleted;
        
        /// <remarks/>
        public event AddServiceCompletedEventHandler AddServiceCompleted;
        
        /// <remarks/>
        public event UpdateServiceCompletedEventHandler UpdateServiceCompleted;
        
        /// <remarks/>
        public event DeleteServiceCompletedEventHandler DeleteServiceCompleted;
        
        /// <remarks/>
        public event GetServiceSettingsCompletedEventHandler GetServiceSettingsCompleted;
        
        /// <remarks/>
        public event GetServiceSettingsRDSCompletedEventHandler GetServiceSettingsRDSCompleted;
        
        /// <remarks/>
        public event UpdateServiceSettingsCompletedEventHandler UpdateServiceSettingsCompleted;
        
        /// <remarks/>
        public event InstallServiceCompletedEventHandler InstallServiceCompleted;
        
        /// <remarks/>
        public event GetProviderServiceQuotaCompletedEventHandler GetProviderServiceQuotaCompleted;
        
        /// <remarks/>
        public event GetMailServiceSettingsByPackageCompletedEventHandler GetMailServiceSettingsByPackageCompleted;
        
        /// <remarks/>
        public event GetInstalledProvidersCompletedEventHandler GetInstalledProvidersCompleted;
        
        /// <remarks/>
        public event GetResourceGroupsCompletedEventHandler GetResourceGroupsCompleted;
        
        /// <remarks/>
        public event GetResourceGroupCompletedEventHandler GetResourceGroupCompleted;
        
        /// <remarks/>
        public event GetProviderCompletedEventHandler GetProviderCompleted;
        
        /// <remarks/>
        public event GetProvidersCompletedEventHandler GetProvidersCompleted;
        
        /// <remarks/>
        public event GetProvidersByGroupIdCompletedEventHandler GetProvidersByGroupIdCompleted;
        
        /// <remarks/>
        public event GetPackageServiceProviderCompletedEventHandler GetPackageServiceProviderCompleted;
        
        /// <remarks/>
        public event GetMailFilterUrlCompletedEventHandler GetMailFilterUrlCompleted;
        
        /// <remarks/>
        public event GetMailFilterUrlByHostingPlanCompletedEventHandler GetMailFilterUrlByHostingPlanCompleted;
        
        /// <remarks/>
        public event IsInstalledCompletedEventHandler IsInstalledCompleted;
        
        /// <remarks/>
        public event GetServerVersionCompletedEventHandler GetServerVersionCompleted;
        
        /// <remarks/>
        public event GetServerFilePathCompletedEventHandler GetServerFilePathCompleted;
        
        /// <remarks/>
        public event GetPrivateNetworVLANsPagedCompletedEventHandler GetPrivateNetworVLANsPagedCompleted;
        
        /// <remarks/>
        public event AddPrivateNetworkVLANCompletedEventHandler AddPrivateNetworkVLANCompleted;
        
        /// <remarks/>
        public event DeletePrivateNetworkVLANsCompletedEventHandler DeletePrivateNetworkVLANsCompleted;
        
        /// <remarks/>
        public event AddPrivateNetworkVLANsRangeCompletedEventHandler AddPrivateNetworkVLANsRangeCompleted;
        
        /// <remarks/>
        public event GetPrivateNetworVLANCompletedEventHandler GetPrivateNetworVLANCompleted;
        
        /// <remarks/>
        public event UpdatePrivateNetworVLANCompletedEventHandler UpdatePrivateNetworVLANCompleted;
        
        /// <remarks/>
        public event GetPackagePrivateNetworkVLANsCompletedEventHandler GetPackagePrivateNetworkVLANsCompleted;
        
        /// <remarks/>
        public event DeallocatePackageVLANsCompletedEventHandler DeallocatePackageVLANsCompleted;
        
        /// <remarks/>
        public event GetUnallottedVLANsCompletedEventHandler GetUnallottedVLANsCompleted;
        
        /// <remarks/>
        public event AllocatePackageVLANsCompletedEventHandler AllocatePackageVLANsCompleted;
        
        /// <remarks/>
        public event GetIPAddressesCompletedEventHandler GetIPAddressesCompleted;
        
        /// <remarks/>
        public event GetIPAddressesPagedCompletedEventHandler GetIPAddressesPagedCompleted;
        
        /// <remarks/>
        public event GetIPAddressCompletedEventHandler GetIPAddressCompleted;
        
        /// <remarks/>
        public event AddIPAddressCompletedEventHandler AddIPAddressCompleted;
        
        /// <remarks/>
        public event AddIPAddressesRangeCompletedEventHandler AddIPAddressesRangeCompleted;
        
        /// <remarks/>
        public event UpdateIPAddressCompletedEventHandler UpdateIPAddressCompleted;
        
        /// <remarks/>
        public event UpdateIPAddressesCompletedEventHandler UpdateIPAddressesCompleted;
        
        /// <remarks/>
        public event DeleteIPAddressCompletedEventHandler DeleteIPAddressCompleted;
        
        /// <remarks/>
        public event DeleteIPAddressesCompletedEventHandler DeleteIPAddressesCompleted;
        
        /// <remarks/>
        public event GetUnallottedIPAddressesCompletedEventHandler GetUnallottedIPAddressesCompleted;
        
        /// <remarks/>
        public event GetPackageIPAddressesCompletedEventHandler GetPackageIPAddressesCompleted;
        
        /// <remarks/>
        public event GetPackageIPAddressesCountCompletedEventHandler GetPackageIPAddressesCountCompleted;
        
        /// <remarks/>
        public event GetPackageUnassignedIPAddressesCompletedEventHandler GetPackageUnassignedIPAddressesCompleted;
        
        /// <remarks/>
        public event AllocatePackageIPAddressesCompletedEventHandler AllocatePackageIPAddressesCompleted;
        
        /// <remarks/>
        public event AllocateMaximumPackageIPAddressesCompletedEventHandler AllocateMaximumPackageIPAddressesCompleted;
        
        /// <remarks/>
        public event DeallocatePackageIPAddressesCompletedEventHandler DeallocatePackageIPAddressesCompleted;
        
        /// <remarks/>
        public event GetClustersCompletedEventHandler GetClustersCompleted;
        
        /// <remarks/>
        public event AddClusterCompletedEventHandler AddClusterCompleted;
        
        /// <remarks/>
        public event DeleteClusterCompletedEventHandler DeleteClusterCompleted;
        
        /// <remarks/>
        public event GetRawDnsRecordsByServiceCompletedEventHandler GetRawDnsRecordsByServiceCompleted;
        
        /// <remarks/>
        public event GetRawDnsRecordsByServerCompletedEventHandler GetRawDnsRecordsByServerCompleted;
        
        /// <remarks/>
        public event GetRawDnsRecordsByPackageCompletedEventHandler GetRawDnsRecordsByPackageCompleted;
        
        /// <remarks/>
        public event GetRawDnsRecordsByGroupCompletedEventHandler GetRawDnsRecordsByGroupCompleted;
        
        /// <remarks/>
        public event GetDnsRecordsByServiceCompletedEventHandler GetDnsRecordsByServiceCompleted;
        
        /// <remarks/>
        public event GetDnsRecordsByServerCompletedEventHandler GetDnsRecordsByServerCompleted;
        
        /// <remarks/>
        public event GetDnsRecordsByPackageCompletedEventHandler GetDnsRecordsByPackageCompleted;
        
        /// <remarks/>
        public event GetDnsRecordsByGroupCompletedEventHandler GetDnsRecordsByGroupCompleted;
        
        /// <remarks/>
        public event GetDnsRecordCompletedEventHandler GetDnsRecordCompleted;
        
        /// <remarks/>
        public event AddDnsRecordCompletedEventHandler AddDnsRecordCompleted;
        
        /// <remarks/>
        public event UpdateDnsRecordCompletedEventHandler UpdateDnsRecordCompleted;
        
        /// <remarks/>
        public event DeleteDnsRecordCompletedEventHandler DeleteDnsRecordCompleted;
        
        /// <remarks/>
        public event GetDomainDnsRecordsCompletedEventHandler GetDomainDnsRecordsCompleted;
        
        /// <remarks/>
        public event GetDomainsCompletedEventHandler GetDomainsCompleted;
        
        /// <remarks/>
        public event GetDomainsByDomainIdCompletedEventHandler GetDomainsByDomainIdCompleted;
        
        /// <remarks/>
        public event GetMyDomainsCompletedEventHandler GetMyDomainsCompleted;
        
        /// <remarks/>
        public event GetResellerDomainsCompletedEventHandler GetResellerDomainsCompleted;
        
        /// <remarks/>
        public event GetDomainsPagedCompletedEventHandler GetDomainsPagedCompleted;
        
        /// <remarks/>
        public event GetDomainCompletedEventHandler GetDomainCompleted;
        
        /// <remarks/>
        public event AddDomainCompletedEventHandler AddDomainCompleted;
        
        /// <remarks/>
        public event AddDomainWithProvisioningCompletedEventHandler AddDomainWithProvisioningCompleted;
        
        /// <remarks/>
        public event UpdateDomainCompletedEventHandler UpdateDomainCompleted;
        
        /// <remarks/>
        public event DeleteDomainCompletedEventHandler DeleteDomainCompleted;
        
        /// <remarks/>
        public event DetachDomainCompletedEventHandler DetachDomainCompleted;
        
        /// <remarks/>
        public event EnableDomainDnsCompletedEventHandler EnableDomainDnsCompleted;
        
        /// <remarks/>
        public event DisableDomainDnsCompletedEventHandler DisableDomainDnsCompleted;
        
        /// <remarks/>
        public event CreateDomainPreviewDomainCompletedEventHandler CreateDomainPreviewDomainCompleted;
        
        /// <remarks/>
        public event DeleteDomainPreviewDomainCompletedEventHandler DeleteDomainPreviewDomainCompleted;
        
        /// <remarks/>
        public event GetDnsZoneRecordsCompletedEventHandler GetDnsZoneRecordsCompleted;
        
        /// <remarks/>
        public event GetRawDnsZoneRecordsCompletedEventHandler GetRawDnsZoneRecordsCompleted;
        
        /// <remarks/>
        public event AddDnsZoneRecordCompletedEventHandler AddDnsZoneRecordCompleted;
        
        /// <remarks/>
        public event UpdateDnsZoneRecordCompletedEventHandler UpdateDnsZoneRecordCompleted;
        
        /// <remarks/>
        public event DeleteDnsZoneRecordCompletedEventHandler DeleteDnsZoneRecordCompleted;
        
        /// <remarks/>
        public event GetTerminalServicesSessionsCompletedEventHandler GetTerminalServicesSessionsCompleted;
        
        /// <remarks/>
        public event CloseTerminalServicesSessionCompletedEventHandler CloseTerminalServicesSessionCompleted;
        
        /// <remarks/>
        public event GetOSProcessesCompletedEventHandler GetOSProcessesCompleted;
        
        /// <remarks/>
        public event TerminateOSProcessCompletedEventHandler TerminateOSProcessCompleted;
        
        /// <remarks/>
        public event CheckLoadUserProfileCompletedEventHandler CheckLoadUserProfileCompleted;
        
        /// <remarks/>
        public event EnableLoadUserProfileCompletedEventHandler EnableLoadUserProfileCompleted;
        
        /// <remarks/>
        public event InitWPIFeedsCompletedEventHandler InitWPIFeedsCompleted;
        
        /// <remarks/>
        public event GetWPITabsCompletedEventHandler GetWPITabsCompleted;
        
        /// <remarks/>
        public event GetWPIKeywordsCompletedEventHandler GetWPIKeywordsCompleted;
        
        /// <remarks/>
        public event GetWPIProductsCompletedEventHandler GetWPIProductsCompleted;
        
        /// <remarks/>
        public event GetWPIProductsFilteredCompletedEventHandler GetWPIProductsFilteredCompleted;
        
        /// <remarks/>
        public event GetWPIProductByIdCompletedEventHandler GetWPIProductByIdCompleted;
        
        /// <remarks/>
        public event GetWPIProductsWithDependenciesCompletedEventHandler GetWPIProductsWithDependenciesCompleted;
        
        /// <remarks/>
        public event InstallWPIProductsCompletedEventHandler InstallWPIProductsCompleted;
        
        /// <remarks/>
        public event CancelInstallWPIProductsCompletedEventHandler CancelInstallWPIProductsCompleted;
        
        /// <remarks/>
        public event GetWPIStatusCompletedEventHandler GetWPIStatusCompleted;
        
        /// <remarks/>
        public event WpiGetLogFileDirectoryCompletedEventHandler WpiGetLogFileDirectoryCompleted;
        
        /// <remarks/>
        public event WpiGetLogsInDirectoryCompletedEventHandler WpiGetLogsInDirectoryCompleted;
        
        /// <remarks/>
        public event GetOSServicesCompletedEventHandler GetOSServicesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangeOSServiceStatus", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeOSServiceStatus(int serverId, string id, OSServiceStatus status) {
            object[] results = this.Invoke("ChangeOSServiceStatus", new object[] {
                        serverId,
                        id,
                        status});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeOSServiceStatus(int serverId, string id, OSServiceStatus status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeOSServiceStatus", new object[] {
                        serverId,
                        id,
                        status}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndChangeOSServiceStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeOSServiceStatusAsync(int serverId, string id, OSServiceStatus status) {
            this.ChangeOSServiceStatusAsync(serverId, id, status, null);
        }
        
        /// <remarks/>
        public void ChangeOSServiceStatusAsync(int serverId, string id, OSServiceStatus status, object userState) {
            if ((this.ChangeOSServiceStatusOperationCompleted == null)) {
                this.ChangeOSServiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeOSServiceStatusOperationCompleted);
            }
            this.InvokeAsync("ChangeOSServiceStatus", new object[] {
                        serverId,
                        id,
                        status}, this.ChangeOSServiceStatusOperationCompleted, userState);
        }
        
        private void OnChangeOSServiceStatusOperationCompleted(object arg) {
            if ((this.ChangeOSServiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeOSServiceStatusCompleted(this, new ChangeOSServiceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetLogNames", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetLogNames(int serverId) {
            object[] results = this.Invoke("GetLogNames", new object[] {
                        serverId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLogNames(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLogNames", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetLogNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLogNamesAsync(int serverId) {
            this.GetLogNamesAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetLogNamesAsync(int serverId, object userState) {
            if ((this.GetLogNamesOperationCompleted == null)) {
                this.GetLogNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogNamesOperationCompleted);
            }
            this.InvokeAsync("GetLogNames", new object[] {
                        serverId}, this.GetLogNamesOperationCompleted, userState);
        }
        
        private void OnGetLogNamesOperationCompleted(object arg) {
            if ((this.GetLogNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogNamesCompleted(this, new GetLogNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetLogEntries", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemLogEntry[] GetLogEntries(int serverId, string logName) {
            object[] results = this.Invoke("GetLogEntries", new object[] {
                        serverId,
                        logName});
            return ((SystemLogEntry[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLogEntries(int serverId, string logName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLogEntries", new object[] {
                        serverId,
                        logName}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemLogEntry[] EndGetLogEntries(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemLogEntry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLogEntriesAsync(int serverId, string logName) {
            this.GetLogEntriesAsync(serverId, logName, null);
        }
        
        /// <remarks/>
        public void GetLogEntriesAsync(int serverId, string logName, object userState) {
            if ((this.GetLogEntriesOperationCompleted == null)) {
                this.GetLogEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogEntriesOperationCompleted);
            }
            this.InvokeAsync("GetLogEntries", new object[] {
                        serverId,
                        logName}, this.GetLogEntriesOperationCompleted, userState);
        }
        
        private void OnGetLogEntriesOperationCompleted(object arg) {
            if ((this.GetLogEntriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogEntriesCompleted(this, new GetLogEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetLogEntriesPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemLogEntriesPaged GetLogEntriesPaged(int serverId, string logName, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetLogEntriesPaged", new object[] {
                        serverId,
                        logName,
                        startRow,
                        maximumRows});
            return ((SystemLogEntriesPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLogEntriesPaged(int serverId, string logName, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLogEntriesPaged", new object[] {
                        serverId,
                        logName,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemLogEntriesPaged EndGetLogEntriesPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemLogEntriesPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetLogEntriesPagedAsync(int serverId, string logName, int startRow, int maximumRows) {
            this.GetLogEntriesPagedAsync(serverId, logName, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetLogEntriesPagedAsync(int serverId, string logName, int startRow, int maximumRows, object userState) {
            if ((this.GetLogEntriesPagedOperationCompleted == null)) {
                this.GetLogEntriesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogEntriesPagedOperationCompleted);
            }
            this.InvokeAsync("GetLogEntriesPaged", new object[] {
                        serverId,
                        logName,
                        startRow,
                        maximumRows}, this.GetLogEntriesPagedOperationCompleted, userState);
        }
        
        private void OnGetLogEntriesPagedOperationCompleted(object arg) {
            if ((this.GetLogEntriesPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogEntriesPagedCompleted(this, new GetLogEntriesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ClearLog", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ClearLog(int serverId, string logName) {
            object[] results = this.Invoke("ClearLog", new object[] {
                        serverId,
                        logName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearLog(int serverId, string logName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearLog", new object[] {
                        serverId,
                        logName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndClearLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ClearLogAsync(int serverId, string logName) {
            this.ClearLogAsync(serverId, logName, null);
        }
        
        /// <remarks/>
        public void ClearLogAsync(int serverId, string logName, object userState) {
            if ((this.ClearLogOperationCompleted == null)) {
                this.ClearLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearLogOperationCompleted);
            }
            this.InvokeAsync("ClearLog", new object[] {
                        serverId,
                        logName}, this.ClearLogOperationCompleted, userState);
        }
        
        private void OnClearLogOperationCompleted(object arg) {
            if ((this.ClearLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearLogCompleted(this, new ClearLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RebootSystem", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RebootSystem(int serverId) {
            object[] results = this.Invoke("RebootSystem", new object[] {
                        serverId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRebootSystem(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RebootSystem", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRebootSystem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RebootSystemAsync(int serverId) {
            this.RebootSystemAsync(serverId, null);
        }
        
        /// <remarks/>
        public void RebootSystemAsync(int serverId, object userState) {
            if ((this.RebootSystemOperationCompleted == null)) {
                this.RebootSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRebootSystemOperationCompleted);
            }
            this.InvokeAsync("RebootSystem", new object[] {
                        serverId}, this.RebootSystemOperationCompleted, userState);
        }
        
        private void OnRebootSystemOperationCompleted(object arg) {
            if ((this.RebootSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RebootSystemCompleted(this, new RebootSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMemoryPackageId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Memory GetMemoryPackageId(int packageId) {
            object[] results = this.Invoke("GetMemoryPackageId", new object[] {
                        packageId});
            return ((Memory)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMemoryPackageId(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMemoryPackageId", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Memory EndGetMemoryPackageId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Memory)(results[0]));
        }
        
        /// <remarks/>
        public void GetMemoryPackageIdAsync(int packageId) {
            this.GetMemoryPackageIdAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetMemoryPackageIdAsync(int packageId, object userState) {
            if ((this.GetMemoryPackageIdOperationCompleted == null)) {
                this.GetMemoryPackageIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMemoryPackageIdOperationCompleted);
            }
            this.InvokeAsync("GetMemoryPackageId", new object[] {
                        packageId}, this.GetMemoryPackageIdOperationCompleted, userState);
        }
        
        private void OnGetMemoryPackageIdOperationCompleted(object arg) {
            if ((this.GetMemoryPackageIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMemoryPackageIdCompleted(this, new GetMemoryPackageIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMemory", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Memory GetMemory(int serverId) {
            object[] results = this.Invoke("GetMemory", new object[] {
                        serverId});
            return ((Memory)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMemory(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMemory", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Memory EndGetMemory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Memory)(results[0]));
        }
        
        /// <remarks/>
        public void GetMemoryAsync(int serverId) {
            this.GetMemoryAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetMemoryAsync(int serverId, object userState) {
            if ((this.GetMemoryOperationCompleted == null)) {
                this.GetMemoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMemoryOperationCompleted);
            }
            this.InvokeAsync("GetMemory", new object[] {
                        serverId}, this.GetMemoryOperationCompleted, userState);
        }
        
        private void OnGetMemoryOperationCompleted(object arg) {
            if ((this.GetMemoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMemoryCompleted(this, new GetMemoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetAllServers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo[] GetAllServers() {
            object[] results = this.Invoke("GetAllServers", new object[0]);
            return ((ServerInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllServers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllServers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ServerInfo[] EndGetAllServers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllServersAsync() {
            this.GetAllServersAsync(null);
        }
        
        /// <remarks/>
        public void GetAllServersAsync(object userState) {
            if ((this.GetAllServersOperationCompleted == null)) {
                this.GetAllServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllServersOperationCompleted);
            }
            this.InvokeAsync("GetAllServers", new object[0], this.GetAllServersOperationCompleted, userState);
        }
        
        private void OnGetAllServersOperationCompleted(object arg) {
            if ((this.GetAllServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllServersCompleted(this, new GetAllServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawAllServers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawAllServers() {
            object[] results = this.Invoke("GetRawAllServers", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawAllServers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawAllServers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawAllServers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawAllServersAsync() {
            this.GetRawAllServersAsync(null);
        }
        
        /// <remarks/>
        public void GetRawAllServersAsync(object userState) {
            if ((this.GetRawAllServersOperationCompleted == null)) {
                this.GetRawAllServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawAllServersOperationCompleted);
            }
            this.InvokeAsync("GetRawAllServers", new object[0], this.GetRawAllServersOperationCompleted, userState);
        }
        
        private void OnGetRawAllServersOperationCompleted(object arg) {
            if ((this.GetRawAllServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawAllServersCompleted(this, new GetRawAllServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo[] GetServers() {
            object[] results = this.Invoke("GetServers", new object[0]);
            return ((ServerInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ServerInfo[] EndGetServers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServersAsync() {
            this.GetServersAsync(null);
        }
        
        /// <remarks/>
        public void GetServersAsync(object userState) {
            if ((this.GetServersOperationCompleted == null)) {
                this.GetServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServersOperationCompleted);
            }
            this.InvokeAsync("GetServers", new object[0], this.GetServersOperationCompleted, userState);
        }
        
        private void OnGetServersOperationCompleted(object arg) {
            if ((this.GetServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServersCompleted(this, new GetServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawServers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawServers() {
            object[] results = this.Invoke("GetRawServers", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawServers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawServers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawServers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawServersAsync() {
            this.GetRawServersAsync(null);
        }
        
        /// <remarks/>
        public void GetRawServersAsync(object userState) {
            if ((this.GetRawServersOperationCompleted == null)) {
                this.GetRawServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawServersOperationCompleted);
            }
            this.InvokeAsync("GetRawServers", new object[0], this.GetRawServersOperationCompleted, userState);
        }
        
        private void OnGetRawServersOperationCompleted(object arg) {
            if ((this.GetRawServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawServersCompleted(this, new GetRawServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServerShortDetails", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo GetServerShortDetails(int serverId) {
            object[] results = this.Invoke("GetServerShortDetails", new object[] {
                        serverId});
            return ((ServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerShortDetails(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerShortDetails", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServerInfo EndGetServerShortDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerShortDetailsAsync(int serverId) {
            this.GetServerShortDetailsAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetServerShortDetailsAsync(int serverId, object userState) {
            if ((this.GetServerShortDetailsOperationCompleted == null)) {
                this.GetServerShortDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerShortDetailsOperationCompleted);
            }
            this.InvokeAsync("GetServerShortDetails", new object[] {
                        serverId}, this.GetServerShortDetailsOperationCompleted, userState);
        }
        
        private void OnGetServerShortDetailsOperationCompleted(object arg) {
            if ((this.GetServerShortDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerShortDetailsCompleted(this, new GetServerShortDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServerById", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo GetServerById(int serverId) {
            object[] results = this.Invoke("GetServerById", new object[] {
                        serverId});
            return ((ServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerById(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerById", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServerInfo EndGetServerById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerByIdAsync(int serverId) {
            this.GetServerByIdAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetServerByIdAsync(int serverId, object userState) {
            if ((this.GetServerByIdOperationCompleted == null)) {
                this.GetServerByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerByIdOperationCompleted);
            }
            this.InvokeAsync("GetServerById", new object[] {
                        serverId}, this.GetServerByIdOperationCompleted, userState);
        }
        
        private void OnGetServerByIdOperationCompleted(object arg) {
            if ((this.GetServerByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerByIdCompleted(this, new GetServerByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServerByName", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerInfo GetServerByName(string serverName) {
            object[] results = this.Invoke("GetServerByName", new object[] {
                        serverName});
            return ((ServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerByName(string serverName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerByName", new object[] {
                        serverName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServerInfo EndGetServerByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerByNameAsync(string serverName) {
            this.GetServerByNameAsync(serverName, null);
        }
        
        /// <remarks/>
        public void GetServerByNameAsync(string serverName, object userState) {
            if ((this.GetServerByNameOperationCompleted == null)) {
                this.GetServerByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerByNameOperationCompleted);
            }
            this.InvokeAsync("GetServerByName", new object[] {
                        serverName}, this.GetServerByNameOperationCompleted, userState);
        }
        
        private void OnGetServerByNameOperationCompleted(object arg) {
            if ((this.GetServerByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerByNameCompleted(this, new GetServerByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckServerAvailable", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckServerAvailable(string serverUrl, string password) {
            object[] results = this.Invoke("CheckServerAvailable", new object[] {
                        serverUrl,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckServerAvailable(string serverUrl, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckServerAvailable", new object[] {
                        serverUrl,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCheckServerAvailable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckServerAvailableAsync(string serverUrl, string password) {
            this.CheckServerAvailableAsync(serverUrl, password, null);
        }
        
        /// <remarks/>
        public void CheckServerAvailableAsync(string serverUrl, string password, object userState) {
            if ((this.CheckServerAvailableOperationCompleted == null)) {
                this.CheckServerAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckServerAvailableOperationCompleted);
            }
            this.InvokeAsync("CheckServerAvailable", new object[] {
                        serverUrl,
                        password}, this.CheckServerAvailableOperationCompleted, userState);
        }
        
        private void OnCheckServerAvailableOperationCompleted(object arg) {
            if ((this.CheckServerAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckServerAvailableCompleted(this, new CheckServerAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddServer(ServerInfo server, bool autoDiscovery) {
            object[] results = this.Invoke("AddServer", new object[] {
                        server,
                        autoDiscovery});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddServer(ServerInfo server, bool autoDiscovery, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddServer", new object[] {
                        server,
                        autoDiscovery}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddServerAsync(ServerInfo server, bool autoDiscovery) {
            this.AddServerAsync(server, autoDiscovery, null);
        }
        
        /// <remarks/>
        public void AddServerAsync(ServerInfo server, bool autoDiscovery, object userState) {
            if ((this.AddServerOperationCompleted == null)) {
                this.AddServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServerOperationCompleted);
            }
            this.InvokeAsync("AddServer", new object[] {
                        server,
                        autoDiscovery}, this.AddServerOperationCompleted, userState);
        }
        
        private void OnAddServerOperationCompleted(object arg) {
            if ((this.AddServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServerCompleted(this, new AddServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateServer(ServerInfo server) {
            object[] results = this.Invoke("UpdateServer", new object[] {
                        server});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateServer(ServerInfo server, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateServer", new object[] {
                        server}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServerAsync(ServerInfo server) {
            this.UpdateServerAsync(server, null);
        }
        
        /// <remarks/>
        public void UpdateServerAsync(ServerInfo server, object userState) {
            if ((this.UpdateServerOperationCompleted == null)) {
                this.UpdateServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerOperationCompleted);
            }
            this.InvokeAsync("UpdateServer", new object[] {
                        server}, this.UpdateServerOperationCompleted, userState);
        }
        
        private void OnUpdateServerOperationCompleted(object arg) {
            if ((this.UpdateServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerCompleted(this, new UpdateServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateServerConnectionPassword", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateServerConnectionPassword(int serverId, string password) {
            object[] results = this.Invoke("UpdateServerConnectionPassword", new object[] {
                        serverId,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateServerConnectionPassword(int serverId, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateServerConnectionPassword", new object[] {
                        serverId,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateServerConnectionPassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServerConnectionPasswordAsync(int serverId, string password) {
            this.UpdateServerConnectionPasswordAsync(serverId, password, null);
        }
        
        /// <remarks/>
        public void UpdateServerConnectionPasswordAsync(int serverId, string password, object userState) {
            if ((this.UpdateServerConnectionPasswordOperationCompleted == null)) {
                this.UpdateServerConnectionPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerConnectionPasswordOperationCompleted);
            }
            this.InvokeAsync("UpdateServerConnectionPassword", new object[] {
                        serverId,
                        password}, this.UpdateServerConnectionPasswordOperationCompleted, userState);
        }
        
        private void OnUpdateServerConnectionPasswordOperationCompleted(object arg) {
            if ((this.UpdateServerConnectionPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerConnectionPasswordCompleted(this, new UpdateServerConnectionPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateServerADPassword", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateServerADPassword(int serverId, string adPassword) {
            object[] results = this.Invoke("UpdateServerADPassword", new object[] {
                        serverId,
                        adPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateServerADPassword(int serverId, string adPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateServerADPassword", new object[] {
                        serverId,
                        adPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateServerADPassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServerADPasswordAsync(int serverId, string adPassword) {
            this.UpdateServerADPasswordAsync(serverId, adPassword, null);
        }
        
        /// <remarks/>
        public void UpdateServerADPasswordAsync(int serverId, string adPassword, object userState) {
            if ((this.UpdateServerADPasswordOperationCompleted == null)) {
                this.UpdateServerADPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerADPasswordOperationCompleted);
            }
            this.InvokeAsync("UpdateServerADPassword", new object[] {
                        serverId,
                        adPassword}, this.UpdateServerADPasswordOperationCompleted, userState);
        }
        
        private void OnUpdateServerADPasswordOperationCompleted(object arg) {
            if ((this.UpdateServerADPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerADPasswordCompleted(this, new UpdateServerADPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteServer(int serverId) {
            object[] results = this.Invoke("DeleteServer", new object[] {
                        serverId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteServer(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteServer", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteServerAsync(int serverId) {
            this.DeleteServerAsync(serverId, null);
        }
        
        /// <remarks/>
        public void DeleteServerAsync(int serverId, object userState) {
            if ((this.DeleteServerOperationCompleted == null)) {
                this.DeleteServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServerOperationCompleted);
            }
            this.InvokeAsync("DeleteServer", new object[] {
                        serverId}, this.DeleteServerOperationCompleted, userState);
        }
        
        private void OnDeleteServerOperationCompleted(object arg) {
            if ((this.DeleteServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServerCompleted(this, new DeleteServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AutoUpdateServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] AutoUpdateServer([System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfInt")] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)] int[][] servers, string downloadLink, string fileName) {
            object[] results = this.Invoke("AutoUpdateServer", new object[] {
                        servers,
                        downloadLink,
                        fileName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAutoUpdateServer(int[][] servers, string downloadLink, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AutoUpdateServer", new object[] {
                        servers,
                        downloadLink,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndAutoUpdateServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void AutoUpdateServerAsync(int[][] servers, string downloadLink, string fileName) {
            this.AutoUpdateServerAsync(servers, downloadLink, fileName, null);
        }
        
        /// <remarks/>
        public void AutoUpdateServerAsync(int[][] servers, string downloadLink, string fileName, object userState) {
            if ((this.AutoUpdateServerOperationCompleted == null)) {
                this.AutoUpdateServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutoUpdateServerOperationCompleted);
            }
            this.InvokeAsync("AutoUpdateServer", new object[] {
                        servers,
                        downloadLink,
                        fileName}, this.AutoUpdateServerOperationCompleted, userState);
        }
        
        private void OnAutoUpdateServerOperationCompleted(object arg) {
            if ((this.AutoUpdateServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutoUpdateServerCompleted(this, new AutoUpdateServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetVirtualServers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetVirtualServers() {
            object[] results = this.Invoke("GetVirtualServers", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualServers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVirtualServers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetVirtualServers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetVirtualServersAsync() {
            this.GetVirtualServersAsync(null);
        }
        
        /// <remarks/>
        public void GetVirtualServersAsync(object userState) {
            if ((this.GetVirtualServersOperationCompleted == null)) {
                this.GetVirtualServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualServersOperationCompleted);
            }
            this.InvokeAsync("GetVirtualServers", new object[0], this.GetVirtualServersOperationCompleted, userState);
        }
        
        private void OnGetVirtualServersOperationCompleted(object arg) {
            if ((this.GetVirtualServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualServersCompleted(this, new GetVirtualServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetAvailableVirtualServices", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAvailableVirtualServices(int serverId) {
            object[] results = this.Invoke("GetAvailableVirtualServices", new object[] {
                        serverId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableVirtualServices(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableVirtualServices", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetAvailableVirtualServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableVirtualServicesAsync(int serverId) {
            this.GetAvailableVirtualServicesAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetAvailableVirtualServicesAsync(int serverId, object userState) {
            if ((this.GetAvailableVirtualServicesOperationCompleted == null)) {
                this.GetAvailableVirtualServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableVirtualServicesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableVirtualServices", new object[] {
                        serverId}, this.GetAvailableVirtualServicesOperationCompleted, userState);
        }
        
        private void OnGetAvailableVirtualServicesOperationCompleted(object arg) {
            if ((this.GetAvailableVirtualServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableVirtualServicesCompleted(this, new GetAvailableVirtualServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetVirtualServices", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetVirtualServices(int serverId) {
            object[] results = this.Invoke("GetVirtualServices", new object[] {
                        serverId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualServices(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVirtualServices", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetVirtualServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetVirtualServicesAsync(int serverId) {
            this.GetVirtualServicesAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetVirtualServicesAsync(int serverId, object userState) {
            if ((this.GetVirtualServicesOperationCompleted == null)) {
                this.GetVirtualServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualServicesOperationCompleted);
            }
            this.InvokeAsync("GetVirtualServices", new object[] {
                        serverId}, this.GetVirtualServicesOperationCompleted, userState);
        }
        
        private void OnGetVirtualServicesOperationCompleted(object arg) {
            if ((this.GetVirtualServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualServicesCompleted(this, new GetVirtualServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddVirtualServices", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddVirtualServices(int serverId, int[] ids) {
            object[] results = this.Invoke("AddVirtualServices", new object[] {
                        serverId,
                        ids});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddVirtualServices(int serverId, int[] ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddVirtualServices", new object[] {
                        serverId,
                        ids}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddVirtualServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddVirtualServicesAsync(int serverId, int[] ids) {
            this.AddVirtualServicesAsync(serverId, ids, null);
        }
        
        /// <remarks/>
        public void AddVirtualServicesAsync(int serverId, int[] ids, object userState) {
            if ((this.AddVirtualServicesOperationCompleted == null)) {
                this.AddVirtualServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVirtualServicesOperationCompleted);
            }
            this.InvokeAsync("AddVirtualServices", new object[] {
                        serverId,
                        ids}, this.AddVirtualServicesOperationCompleted, userState);
        }
        
        private void OnAddVirtualServicesOperationCompleted(object arg) {
            if ((this.AddVirtualServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddVirtualServicesCompleted(this, new AddVirtualServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteVirtualServices", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteVirtualServices(int serverId, int[] ids) {
            object[] results = this.Invoke("DeleteVirtualServices", new object[] {
                        serverId,
                        ids});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteVirtualServices(int serverId, int[] ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteVirtualServices", new object[] {
                        serverId,
                        ids}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteVirtualServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteVirtualServicesAsync(int serverId, int[] ids) {
            this.DeleteVirtualServicesAsync(serverId, ids, null);
        }
        
        /// <remarks/>
        public void DeleteVirtualServicesAsync(int serverId, int[] ids, object userState) {
            if ((this.DeleteVirtualServicesOperationCompleted == null)) {
                this.DeleteVirtualServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVirtualServicesOperationCompleted);
            }
            this.InvokeAsync("DeleteVirtualServices", new object[] {
                        serverId,
                        ids}, this.DeleteVirtualServicesOperationCompleted, userState);
        }
        
        private void OnDeleteVirtualServicesOperationCompleted(object arg) {
            if ((this.DeleteVirtualServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVirtualServicesCompleted(this, new DeleteVirtualServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateVirtualGroups", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateVirtualGroups(int serverId, VirtualGroupInfo[] groups) {
            object[] results = this.Invoke("UpdateVirtualGroups", new object[] {
                        serverId,
                        groups});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateVirtualGroups(int serverId, VirtualGroupInfo[] groups, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateVirtualGroups", new object[] {
                        serverId,
                        groups}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateVirtualGroups(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVirtualGroupsAsync(int serverId, VirtualGroupInfo[] groups) {
            this.UpdateVirtualGroupsAsync(serverId, groups, null);
        }
        
        /// <remarks/>
        public void UpdateVirtualGroupsAsync(int serverId, VirtualGroupInfo[] groups, object userState) {
            if ((this.UpdateVirtualGroupsOperationCompleted == null)) {
                this.UpdateVirtualGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVirtualGroupsOperationCompleted);
            }
            this.InvokeAsync("UpdateVirtualGroups", new object[] {
                        serverId,
                        groups}, this.UpdateVirtualGroupsOperationCompleted, userState);
        }
        
        private void OnUpdateVirtualGroupsOperationCompleted(object arg) {
            if ((this.UpdateVirtualGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVirtualGroupsCompleted(this, new UpdateVirtualGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawServicesByServerId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawServicesByServerId(int serverId) {
            object[] results = this.Invoke("GetRawServicesByServerId", new object[] {
                        serverId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawServicesByServerId(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawServicesByServerId", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawServicesByServerId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawServicesByServerIdAsync(int serverId) {
            this.GetRawServicesByServerIdAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetRawServicesByServerIdAsync(int serverId, object userState) {
            if ((this.GetRawServicesByServerIdOperationCompleted == null)) {
                this.GetRawServicesByServerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawServicesByServerIdOperationCompleted);
            }
            this.InvokeAsync("GetRawServicesByServerId", new object[] {
                        serverId}, this.GetRawServicesByServerIdOperationCompleted, userState);
        }
        
        private void OnGetRawServicesByServerIdOperationCompleted(object arg) {
            if ((this.GetRawServicesByServerIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawServicesByServerIdCompleted(this, new GetRawServicesByServerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServicesByServerId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServiceInfo[] GetServicesByServerId(int serverId) {
            object[] results = this.Invoke("GetServicesByServerId", new object[] {
                        serverId});
            return ((ServiceInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServicesByServerId(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServicesByServerId", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceInfo[] EndGetServicesByServerId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesByServerIdAsync(int serverId) {
            this.GetServicesByServerIdAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetServicesByServerIdAsync(int serverId, object userState) {
            if ((this.GetServicesByServerIdOperationCompleted == null)) {
                this.GetServicesByServerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesByServerIdOperationCompleted);
            }
            this.InvokeAsync("GetServicesByServerId", new object[] {
                        serverId}, this.GetServicesByServerIdOperationCompleted, userState);
        }
        
        private void OnGetServicesByServerIdOperationCompleted(object arg) {
            if ((this.GetServicesByServerIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesByServerIdCompleted(this, new GetServicesByServerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServicesByServerIdGroupName", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServiceInfo[] GetServicesByServerIdGroupName(int serverId, string groupName) {
            object[] results = this.Invoke("GetServicesByServerIdGroupName", new object[] {
                        serverId,
                        groupName});
            return ((ServiceInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServicesByServerIdGroupName(int serverId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServicesByServerIdGroupName", new object[] {
                        serverId,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceInfo[] EndGetServicesByServerIdGroupName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesByServerIdGroupNameAsync(int serverId, string groupName) {
            this.GetServicesByServerIdGroupNameAsync(serverId, groupName, null);
        }
        
        /// <remarks/>
        public void GetServicesByServerIdGroupNameAsync(int serverId, string groupName, object userState) {
            if ((this.GetServicesByServerIdGroupNameOperationCompleted == null)) {
                this.GetServicesByServerIdGroupNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesByServerIdGroupNameOperationCompleted);
            }
            this.InvokeAsync("GetServicesByServerIdGroupName", new object[] {
                        serverId,
                        groupName}, this.GetServicesByServerIdGroupNameOperationCompleted, userState);
        }
        
        private void OnGetServicesByServerIdGroupNameOperationCompleted(object arg) {
            if ((this.GetServicesByServerIdGroupNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesByServerIdGroupNameCompleted(this, new GetServicesByServerIdGroupNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawServicesByGroupId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawServicesByGroupId(int groupId) {
            object[] results = this.Invoke("GetRawServicesByGroupId", new object[] {
                        groupId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawServicesByGroupId(int groupId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawServicesByGroupId", new object[] {
                        groupId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawServicesByGroupId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawServicesByGroupIdAsync(int groupId) {
            this.GetRawServicesByGroupIdAsync(groupId, null);
        }
        
        /// <remarks/>
        public void GetRawServicesByGroupIdAsync(int groupId, object userState) {
            if ((this.GetRawServicesByGroupIdOperationCompleted == null)) {
                this.GetRawServicesByGroupIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawServicesByGroupIdOperationCompleted);
            }
            this.InvokeAsync("GetRawServicesByGroupId", new object[] {
                        groupId}, this.GetRawServicesByGroupIdOperationCompleted, userState);
        }
        
        private void OnGetRawServicesByGroupIdOperationCompleted(object arg) {
            if ((this.GetRawServicesByGroupIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawServicesByGroupIdCompleted(this, new GetRawServicesByGroupIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawServicesByGroupName", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawServicesByGroupName(string groupName) {
            object[] results = this.Invoke("GetRawServicesByGroupName", new object[] {
                        groupName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawServicesByGroupName(string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawServicesByGroupName", new object[] {
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawServicesByGroupName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawServicesByGroupNameAsync(string groupName) {
            this.GetRawServicesByGroupNameAsync(groupName, null);
        }
        
        /// <remarks/>
        public void GetRawServicesByGroupNameAsync(string groupName, object userState) {
            if ((this.GetRawServicesByGroupNameOperationCompleted == null)) {
                this.GetRawServicesByGroupNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawServicesByGroupNameOperationCompleted);
            }
            this.InvokeAsync("GetRawServicesByGroupName", new object[] {
                        groupName}, this.GetRawServicesByGroupNameOperationCompleted, userState);
        }
        
        private void OnGetRawServicesByGroupNameOperationCompleted(object arg) {
            if ((this.GetRawServicesByGroupNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawServicesByGroupNameCompleted(this, new GetRawServicesByGroupNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServiceInfo", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServiceInfo GetServiceInfo(int serviceId) {
            object[] results = this.Invoke("GetServiceInfo", new object[] {
                        serviceId});
            return ((ServiceInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServiceInfo(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServiceInfo", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceInfo EndGetServiceInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceInfoAsync(int serviceId) {
            this.GetServiceInfoAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetServiceInfoAsync(int serviceId, object userState) {
            if ((this.GetServiceInfoOperationCompleted == null)) {
                this.GetServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceInfoOperationCompleted);
            }
            this.InvokeAsync("GetServiceInfo", new object[] {
                        serviceId}, this.GetServiceInfoOperationCompleted, userState);
        }
        
        private void OnGetServiceInfoOperationCompleted(object arg) {
            if ((this.GetServiceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceInfoCompleted(this, new GetServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddService", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddService(ServiceInfo service) {
            object[] results = this.Invoke("AddService", new object[] {
                        service});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddService(ServiceInfo service, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddService", new object[] {
                        service}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddServiceAsync(ServiceInfo service) {
            this.AddServiceAsync(service, null);
        }
        
        /// <remarks/>
        public void AddServiceAsync(ServiceInfo service, object userState) {
            if ((this.AddServiceOperationCompleted == null)) {
                this.AddServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServiceOperationCompleted);
            }
            this.InvokeAsync("AddService", new object[] {
                        service}, this.AddServiceOperationCompleted, userState);
        }
        
        private void OnAddServiceOperationCompleted(object arg) {
            if ((this.AddServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServiceCompleted(this, new AddServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateService", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateService(ServiceInfo service) {
            object[] results = this.Invoke("UpdateService", new object[] {
                        service});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateService(ServiceInfo service, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateService", new object[] {
                        service}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServiceAsync(ServiceInfo service) {
            this.UpdateServiceAsync(service, null);
        }
        
        /// <remarks/>
        public void UpdateServiceAsync(ServiceInfo service, object userState) {
            if ((this.UpdateServiceOperationCompleted == null)) {
                this.UpdateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceOperationCompleted);
            }
            this.InvokeAsync("UpdateService", new object[] {
                        service}, this.UpdateServiceOperationCompleted, userState);
        }
        
        private void OnUpdateServiceOperationCompleted(object arg) {
            if ((this.UpdateServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceCompleted(this, new UpdateServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteService", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteService(int serviceId) {
            object[] results = this.Invoke("DeleteService", new object[] {
                        serviceId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteService(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteService", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteServiceAsync(int serviceId) {
            this.DeleteServiceAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void DeleteServiceAsync(int serviceId, object userState) {
            if ((this.DeleteServiceOperationCompleted == null)) {
                this.DeleteServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServiceOperationCompleted);
            }
            this.InvokeAsync("DeleteService", new object[] {
                        serviceId}, this.DeleteServiceOperationCompleted, userState);
        }
        
        private void OnDeleteServiceOperationCompleted(object arg) {
            if ((this.DeleteServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServiceCompleted(this, new DeleteServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServiceSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetServiceSettings(int serviceId) {
            object[] results = this.Invoke("GetServiceSettings", new object[] {
                        serviceId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServiceSettings(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServiceSettings", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetServiceSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceSettingsAsync(int serviceId) {
            this.GetServiceSettingsAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetServiceSettingsAsync(int serviceId, object userState) {
            if ((this.GetServiceSettingsOperationCompleted == null)) {
                this.GetServiceSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceSettingsOperationCompleted);
            }
            this.InvokeAsync("GetServiceSettings", new object[] {
                        serviceId}, this.GetServiceSettingsOperationCompleted, userState);
        }
        
        private void OnGetServiceSettingsOperationCompleted(object arg) {
            if ((this.GetServiceSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceSettingsCompleted(this, new GetServiceSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServiceSettingsRDS", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetServiceSettingsRDS(int serviceId) {
            object[] results = this.Invoke("GetServiceSettingsRDS", new object[] {
                        serviceId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServiceSettingsRDS(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServiceSettingsRDS", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetServiceSettingsRDS(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceSettingsRDSAsync(int serviceId) {
            this.GetServiceSettingsRDSAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetServiceSettingsRDSAsync(int serviceId, object userState) {
            if ((this.GetServiceSettingsRDSOperationCompleted == null)) {
                this.GetServiceSettingsRDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceSettingsRDSOperationCompleted);
            }
            this.InvokeAsync("GetServiceSettingsRDS", new object[] {
                        serviceId}, this.GetServiceSettingsRDSOperationCompleted, userState);
        }
        
        private void OnGetServiceSettingsRDSOperationCompleted(object arg) {
            if ((this.GetServiceSettingsRDSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceSettingsRDSCompleted(this, new GetServiceSettingsRDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateServiceSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateServiceSettings(int serviceId, string[] settings) {
            object[] results = this.Invoke("UpdateServiceSettings", new object[] {
                        serviceId,
                        settings});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateServiceSettings(int serviceId, string[] settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateServiceSettings", new object[] {
                        serviceId,
                        settings}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateServiceSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServiceSettingsAsync(int serviceId, string[] settings) {
            this.UpdateServiceSettingsAsync(serviceId, settings, null);
        }
        
        /// <remarks/>
        public void UpdateServiceSettingsAsync(int serviceId, string[] settings, object userState) {
            if ((this.UpdateServiceSettingsOperationCompleted == null)) {
                this.UpdateServiceSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateServiceSettings", new object[] {
                        serviceId,
                        settings}, this.UpdateServiceSettingsOperationCompleted, userState);
        }
        
        private void OnUpdateServiceSettingsOperationCompleted(object arg) {
            if ((this.UpdateServiceSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceSettingsCompleted(this, new UpdateServiceSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallService", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] InstallService(int serviceId) {
            object[] results = this.Invoke("InstallService", new object[] {
                        serviceId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInstallService(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InstallService", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndInstallService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void InstallServiceAsync(int serviceId) {
            this.InstallServiceAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void InstallServiceAsync(int serviceId, object userState) {
            if ((this.InstallServiceOperationCompleted == null)) {
                this.InstallServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallServiceOperationCompleted);
            }
            this.InvokeAsync("InstallService", new object[] {
                        serviceId}, this.InstallServiceOperationCompleted, userState);
        }
        
        private void OnInstallServiceOperationCompleted(object arg) {
            if ((this.InstallServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallServiceCompleted(this, new InstallServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetProviderServiceQuota", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QuotaInfo GetProviderServiceQuota(int providerId) {
            object[] results = this.Invoke("GetProviderServiceQuota", new object[] {
                        providerId});
            return ((QuotaInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProviderServiceQuota(int providerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProviderServiceQuota", new object[] {
                        providerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public QuotaInfo EndGetProviderServiceQuota(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QuotaInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetProviderServiceQuotaAsync(int providerId) {
            this.GetProviderServiceQuotaAsync(providerId, null);
        }
        
        /// <remarks/>
        public void GetProviderServiceQuotaAsync(int providerId, object userState) {
            if ((this.GetProviderServiceQuotaOperationCompleted == null)) {
                this.GetProviderServiceQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProviderServiceQuotaOperationCompleted);
            }
            this.InvokeAsync("GetProviderServiceQuota", new object[] {
                        providerId}, this.GetProviderServiceQuotaOperationCompleted, userState);
        }
        
        private void OnGetProviderServiceQuotaOperationCompleted(object arg) {
            if ((this.GetProviderServiceQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProviderServiceQuotaCompleted(this, new GetProviderServiceQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMailServiceSettingsByPackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMailServiceSettingsByPackage(int packageID) {
            object[] results = this.Invoke("GetMailServiceSettingsByPackage", new object[] {
                        packageID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMailServiceSettingsByPackage(int packageID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMailServiceSettingsByPackage", new object[] {
                        packageID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetMailServiceSettingsByPackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMailServiceSettingsByPackageAsync(int packageID) {
            this.GetMailServiceSettingsByPackageAsync(packageID, null);
        }
        
        /// <remarks/>
        public void GetMailServiceSettingsByPackageAsync(int packageID, object userState) {
            if ((this.GetMailServiceSettingsByPackageOperationCompleted == null)) {
                this.GetMailServiceSettingsByPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailServiceSettingsByPackageOperationCompleted);
            }
            this.InvokeAsync("GetMailServiceSettingsByPackage", new object[] {
                        packageID}, this.GetMailServiceSettingsByPackageOperationCompleted, userState);
        }
        
        private void OnGetMailServiceSettingsByPackageOperationCompleted(object arg) {
            if ((this.GetMailServiceSettingsByPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailServiceSettingsByPackageCompleted(this, new GetMailServiceSettingsByPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetInstalledProviders", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderInfo[] GetInstalledProviders(int groupId) {
            object[] results = this.Invoke("GetInstalledProviders", new object[] {
                        groupId});
            return ((ProviderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInstalledProviders(int groupId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInstalledProviders", new object[] {
                        groupId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ProviderInfo[] EndGetInstalledProviders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProviderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInstalledProvidersAsync(int groupId) {
            this.GetInstalledProvidersAsync(groupId, null);
        }
        
        /// <remarks/>
        public void GetInstalledProvidersAsync(int groupId, object userState) {
            if ((this.GetInstalledProvidersOperationCompleted == null)) {
                this.GetInstalledProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstalledProvidersOperationCompleted);
            }
            this.InvokeAsync("GetInstalledProviders", new object[] {
                        groupId}, this.GetInstalledProvidersOperationCompleted, userState);
        }
        
        private void OnGetInstalledProvidersOperationCompleted(object arg) {
            if ((this.GetInstalledProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstalledProvidersCompleted(this, new GetInstalledProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetResourceGroups", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResourceGroupInfo[] GetResourceGroups() {
            object[] results = this.Invoke("GetResourceGroups", new object[0]);
            return ((ResourceGroupInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetResourceGroups(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetResourceGroups", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ResourceGroupInfo[] EndGetResourceGroups(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResourceGroupInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResourceGroupsAsync() {
            this.GetResourceGroupsAsync(null);
        }
        
        /// <remarks/>
        public void GetResourceGroupsAsync(object userState) {
            if ((this.GetResourceGroupsOperationCompleted == null)) {
                this.GetResourceGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceGroupsOperationCompleted);
            }
            this.InvokeAsync("GetResourceGroups", new object[0], this.GetResourceGroupsOperationCompleted, userState);
        }
        
        private void OnGetResourceGroupsOperationCompleted(object arg) {
            if ((this.GetResourceGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceGroupsCompleted(this, new GetResourceGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetResourceGroup", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResourceGroupInfo GetResourceGroup(int groupId) {
            object[] results = this.Invoke("GetResourceGroup", new object[] {
                        groupId});
            return ((ResourceGroupInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetResourceGroup(int groupId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetResourceGroup", new object[] {
                        groupId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResourceGroupInfo EndGetResourceGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResourceGroupInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetResourceGroupAsync(int groupId) {
            this.GetResourceGroupAsync(groupId, null);
        }
        
        /// <remarks/>
        public void GetResourceGroupAsync(int groupId, object userState) {
            if ((this.GetResourceGroupOperationCompleted == null)) {
                this.GetResourceGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceGroupOperationCompleted);
            }
            this.InvokeAsync("GetResourceGroup", new object[] {
                        groupId}, this.GetResourceGroupOperationCompleted, userState);
        }
        
        private void OnGetResourceGroupOperationCompleted(object arg) {
            if ((this.GetResourceGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceGroupCompleted(this, new GetResourceGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetProvider", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderInfo GetProvider(int providerId) {
            object[] results = this.Invoke("GetProvider", new object[] {
                        providerId});
            return ((ProviderInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProvider(int providerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProvider", new object[] {
                        providerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ProviderInfo EndGetProvider(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProviderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetProviderAsync(int providerId) {
            this.GetProviderAsync(providerId, null);
        }
        
        /// <remarks/>
        public void GetProviderAsync(int providerId, object userState) {
            if ((this.GetProviderOperationCompleted == null)) {
                this.GetProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProviderOperationCompleted);
            }
            this.InvokeAsync("GetProvider", new object[] {
                        providerId}, this.GetProviderOperationCompleted, userState);
        }
        
        private void OnGetProviderOperationCompleted(object arg) {
            if ((this.GetProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProviderCompleted(this, new GetProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetProviders", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderInfo[] GetProviders() {
            object[] results = this.Invoke("GetProviders", new object[0]);
            return ((ProviderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProviders(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProviders", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ProviderInfo[] EndGetProviders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProviderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProvidersAsync() {
            this.GetProvidersAsync(null);
        }
        
        /// <remarks/>
        public void GetProvidersAsync(object userState) {
            if ((this.GetProvidersOperationCompleted == null)) {
                this.GetProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProvidersOperationCompleted);
            }
            this.InvokeAsync("GetProviders", new object[0], this.GetProvidersOperationCompleted, userState);
        }
        
        private void OnGetProvidersOperationCompleted(object arg) {
            if ((this.GetProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProvidersCompleted(this, new GetProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetProvidersByGroupId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderInfo[] GetProvidersByGroupId(int groupId) {
            object[] results = this.Invoke("GetProvidersByGroupId", new object[] {
                        groupId});
            return ((ProviderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProvidersByGroupId(int groupId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProvidersByGroupId", new object[] {
                        groupId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ProviderInfo[] EndGetProvidersByGroupId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProviderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProvidersByGroupIdAsync(int groupId) {
            this.GetProvidersByGroupIdAsync(groupId, null);
        }
        
        /// <remarks/>
        public void GetProvidersByGroupIdAsync(int groupId, object userState) {
            if ((this.GetProvidersByGroupIdOperationCompleted == null)) {
                this.GetProvidersByGroupIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProvidersByGroupIdOperationCompleted);
            }
            this.InvokeAsync("GetProvidersByGroupId", new object[] {
                        groupId}, this.GetProvidersByGroupIdOperationCompleted, userState);
        }
        
        private void OnGetProvidersByGroupIdOperationCompleted(object arg) {
            if ((this.GetProvidersByGroupIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProvidersByGroupIdCompleted(this, new GetProvidersByGroupIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageServiceProvider", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderInfo GetPackageServiceProvider(int packageId, string groupName) {
            object[] results = this.Invoke("GetPackageServiceProvider", new object[] {
                        packageId,
                        groupName});
            return ((ProviderInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageServiceProvider(int packageId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageServiceProvider", new object[] {
                        packageId,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ProviderInfo EndGetPackageServiceProvider(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProviderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageServiceProviderAsync(int packageId, string groupName) {
            this.GetPackageServiceProviderAsync(packageId, groupName, null);
        }
        
        /// <remarks/>
        public void GetPackageServiceProviderAsync(int packageId, string groupName, object userState) {
            if ((this.GetPackageServiceProviderOperationCompleted == null)) {
                this.GetPackageServiceProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageServiceProviderOperationCompleted);
            }
            this.InvokeAsync("GetPackageServiceProvider", new object[] {
                        packageId,
                        groupName}, this.GetPackageServiceProviderOperationCompleted, userState);
        }
        
        private void OnGetPackageServiceProviderOperationCompleted(object arg) {
            if ((this.GetPackageServiceProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageServiceProviderCompleted(this, new GetPackageServiceProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMailFilterUrl", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMailFilterUrl(int packageId, string groupName) {
            object[] results = this.Invoke("GetMailFilterUrl", new object[] {
                        packageId,
                        groupName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMailFilterUrl(int packageId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMailFilterUrl", new object[] {
                        packageId,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetMailFilterUrl(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMailFilterUrlAsync(int packageId, string groupName) {
            this.GetMailFilterUrlAsync(packageId, groupName, null);
        }
        
        /// <remarks/>
        public void GetMailFilterUrlAsync(int packageId, string groupName, object userState) {
            if ((this.GetMailFilterUrlOperationCompleted == null)) {
                this.GetMailFilterUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailFilterUrlOperationCompleted);
            }
            this.InvokeAsync("GetMailFilterUrl", new object[] {
                        packageId,
                        groupName}, this.GetMailFilterUrlOperationCompleted, userState);
        }
        
        private void OnGetMailFilterUrlOperationCompleted(object arg) {
            if ((this.GetMailFilterUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailFilterUrlCompleted(this, new GetMailFilterUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMailFilterUrlByHostingPlan", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMailFilterUrlByHostingPlan(int PlanID, string groupName) {
            object[] results = this.Invoke("GetMailFilterUrlByHostingPlan", new object[] {
                        PlanID,
                        groupName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMailFilterUrlByHostingPlan(int PlanID, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMailFilterUrlByHostingPlan", new object[] {
                        PlanID,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetMailFilterUrlByHostingPlan(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMailFilterUrlByHostingPlanAsync(int PlanID, string groupName) {
            this.GetMailFilterUrlByHostingPlanAsync(PlanID, groupName, null);
        }
        
        /// <remarks/>
        public void GetMailFilterUrlByHostingPlanAsync(int PlanID, string groupName, object userState) {
            if ((this.GetMailFilterUrlByHostingPlanOperationCompleted == null)) {
                this.GetMailFilterUrlByHostingPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailFilterUrlByHostingPlanOperationCompleted);
            }
            this.InvokeAsync("GetMailFilterUrlByHostingPlan", new object[] {
                        PlanID,
                        groupName}, this.GetMailFilterUrlByHostingPlanOperationCompleted, userState);
        }
        
        private void OnGetMailFilterUrlByHostingPlanOperationCompleted(object arg) {
            if ((this.GetMailFilterUrlByHostingPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailFilterUrlByHostingPlanCompleted(this, new GetMailFilterUrlByHostingPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/IsInstalled", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BoolResult IsInstalled(int serverId, int providerId) {
            object[] results = this.Invoke("IsInstalled", new object[] {
                        serverId,
                        providerId});
            return ((BoolResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsInstalled(int serverId, int providerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsInstalled", new object[] {
                        serverId,
                        providerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public BoolResult EndIsInstalled(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BoolResult)(results[0]));
        }
        
        /// <remarks/>
        public void IsInstalledAsync(int serverId, int providerId) {
            this.IsInstalledAsync(serverId, providerId, null);
        }
        
        /// <remarks/>
        public void IsInstalledAsync(int serverId, int providerId, object userState) {
            if ((this.IsInstalledOperationCompleted == null)) {
                this.IsInstalledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsInstalledOperationCompleted);
            }
            this.InvokeAsync("IsInstalled", new object[] {
                        serverId,
                        providerId}, this.IsInstalledOperationCompleted, userState);
        }
        
        private void OnIsInstalledOperationCompleted(object arg) {
            if ((this.IsInstalledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsInstalledCompleted(this, new IsInstalledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServerVersion", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerVersion(int serverId) {
            object[] results = this.Invoke("GetServerVersion", new object[] {
                        serverId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerVersion(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerVersion", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetServerVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerVersionAsync(int serverId) {
            this.GetServerVersionAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetServerVersionAsync(int serverId, object userState) {
            if ((this.GetServerVersionOperationCompleted == null)) {
                this.GetServerVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerVersionOperationCompleted);
            }
            this.InvokeAsync("GetServerVersion", new object[] {
                        serverId}, this.GetServerVersionOperationCompleted, userState);
        }
        
        private void OnGetServerVersionOperationCompleted(object arg) {
            if ((this.GetServerVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerVersionCompleted(this, new GetServerVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetServerFilePath", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerFilePath(int serverId) {
            object[] results = this.Invoke("GetServerFilePath", new object[] {
                        serverId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerFilePath(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerFilePath", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetServerFilePath(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerFilePathAsync(int serverId) {
            this.GetServerFilePathAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetServerFilePathAsync(int serverId, object userState) {
            if ((this.GetServerFilePathOperationCompleted == null)) {
                this.GetServerFilePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerFilePathOperationCompleted);
            }
            this.InvokeAsync("GetServerFilePath", new object[] {
                        serverId}, this.GetServerFilePathOperationCompleted, userState);
        }
        
        private void OnGetServerFilePathOperationCompleted(object arg) {
            if ((this.GetServerFilePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerFilePathCompleted(this, new GetServerFilePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPrivateNetworVLANsPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VLANsPaged GetPrivateNetworVLANsPaged(int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetPrivateNetworVLANsPaged", new object[] {
                        serverId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((VLANsPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPrivateNetworVLANsPaged(int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPrivateNetworVLANsPaged", new object[] {
                        serverId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public VLANsPaged EndGetPrivateNetworVLANsPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VLANsPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivateNetworVLANsPagedAsync(int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetPrivateNetworVLANsPagedAsync(serverId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetPrivateNetworVLANsPagedAsync(int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetPrivateNetworVLANsPagedOperationCompleted == null)) {
                this.GetPrivateNetworVLANsPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivateNetworVLANsPagedOperationCompleted);
            }
            this.InvokeAsync("GetPrivateNetworVLANsPaged", new object[] {
                        serverId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetPrivateNetworVLANsPagedOperationCompleted, userState);
        }
        
        private void OnGetPrivateNetworVLANsPagedOperationCompleted(object arg) {
            if ((this.GetPrivateNetworVLANsPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivateNetworVLANsPagedCompleted(this, new GetPrivateNetworVLANsPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddPrivateNetworkVLAN", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IntResult AddPrivateNetworkVLAN(int serverId, int vlan, string comments) {
            object[] results = this.Invoke("AddPrivateNetworkVLAN", new object[] {
                        serverId,
                        vlan,
                        comments});
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPrivateNetworkVLAN(int serverId, int vlan, string comments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPrivateNetworkVLAN", new object[] {
                        serverId,
                        vlan,
                        comments}, callback, asyncState);
        }
        
        /// <remarks/>
        public IntResult EndAddPrivateNetworkVLAN(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddPrivateNetworkVLANAsync(int serverId, int vlan, string comments) {
            this.AddPrivateNetworkVLANAsync(serverId, vlan, comments, null);
        }
        
        /// <remarks/>
        public void AddPrivateNetworkVLANAsync(int serverId, int vlan, string comments, object userState) {
            if ((this.AddPrivateNetworkVLANOperationCompleted == null)) {
                this.AddPrivateNetworkVLANOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPrivateNetworkVLANOperationCompleted);
            }
            this.InvokeAsync("AddPrivateNetworkVLAN", new object[] {
                        serverId,
                        vlan,
                        comments}, this.AddPrivateNetworkVLANOperationCompleted, userState);
        }
        
        private void OnAddPrivateNetworkVLANOperationCompleted(object arg) {
            if ((this.AddPrivateNetworkVLANCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPrivateNetworkVLANCompleted(this, new AddPrivateNetworkVLANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeletePrivateNetworkVLANs", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeletePrivateNetworkVLANs(int[] vlans) {
            object[] results = this.Invoke("DeletePrivateNetworkVLANs", new object[] {
                        vlans});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePrivateNetworkVLANs(int[] vlans, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePrivateNetworkVLANs", new object[] {
                        vlans}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeletePrivateNetworkVLANs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePrivateNetworkVLANsAsync(int[] vlans) {
            this.DeletePrivateNetworkVLANsAsync(vlans, null);
        }
        
        /// <remarks/>
        public void DeletePrivateNetworkVLANsAsync(int[] vlans, object userState) {
            if ((this.DeletePrivateNetworkVLANsOperationCompleted == null)) {
                this.DeletePrivateNetworkVLANsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePrivateNetworkVLANsOperationCompleted);
            }
            this.InvokeAsync("DeletePrivateNetworkVLANs", new object[] {
                        vlans}, this.DeletePrivateNetworkVLANsOperationCompleted, userState);
        }
        
        private void OnDeletePrivateNetworkVLANsOperationCompleted(object arg) {
            if ((this.DeletePrivateNetworkVLANsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePrivateNetworkVLANsCompleted(this, new DeletePrivateNetworkVLANsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddPrivateNetworkVLANsRange", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddPrivateNetworkVLANsRange(int serverId, int startVLAN, int endVLAN, string comments) {
            object[] results = this.Invoke("AddPrivateNetworkVLANsRange", new object[] {
                        serverId,
                        startVLAN,
                        endVLAN,
                        comments});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPrivateNetworkVLANsRange(int serverId, int startVLAN, int endVLAN, string comments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPrivateNetworkVLANsRange", new object[] {
                        serverId,
                        startVLAN,
                        endVLAN,
                        comments}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddPrivateNetworkVLANsRange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddPrivateNetworkVLANsRangeAsync(int serverId, int startVLAN, int endVLAN, string comments) {
            this.AddPrivateNetworkVLANsRangeAsync(serverId, startVLAN, endVLAN, comments, null);
        }
        
        /// <remarks/>
        public void AddPrivateNetworkVLANsRangeAsync(int serverId, int startVLAN, int endVLAN, string comments, object userState) {
            if ((this.AddPrivateNetworkVLANsRangeOperationCompleted == null)) {
                this.AddPrivateNetworkVLANsRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPrivateNetworkVLANsRangeOperationCompleted);
            }
            this.InvokeAsync("AddPrivateNetworkVLANsRange", new object[] {
                        serverId,
                        startVLAN,
                        endVLAN,
                        comments}, this.AddPrivateNetworkVLANsRangeOperationCompleted, userState);
        }
        
        private void OnAddPrivateNetworkVLANsRangeOperationCompleted(object arg) {
            if ((this.AddPrivateNetworkVLANsRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPrivateNetworkVLANsRangeCompleted(this, new AddPrivateNetworkVLANsRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPrivateNetworVLAN", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VLANInfo GetPrivateNetworVLAN(int vlanId) {
            object[] results = this.Invoke("GetPrivateNetworVLAN", new object[] {
                        vlanId});
            return ((VLANInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPrivateNetworVLAN(int vlanId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPrivateNetworVLAN", new object[] {
                        vlanId}, callback, asyncState);
        }
        
        /// <remarks/>
        public VLANInfo EndGetPrivateNetworVLAN(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VLANInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivateNetworVLANAsync(int vlanId) {
            this.GetPrivateNetworVLANAsync(vlanId, null);
        }
        
        /// <remarks/>
        public void GetPrivateNetworVLANAsync(int vlanId, object userState) {
            if ((this.GetPrivateNetworVLANOperationCompleted == null)) {
                this.GetPrivateNetworVLANOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivateNetworVLANOperationCompleted);
            }
            this.InvokeAsync("GetPrivateNetworVLAN", new object[] {
                        vlanId}, this.GetPrivateNetworVLANOperationCompleted, userState);
        }
        
        private void OnGetPrivateNetworVLANOperationCompleted(object arg) {
            if ((this.GetPrivateNetworVLANCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivateNetworVLANCompleted(this, new GetPrivateNetworVLANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdatePrivateNetworVLAN", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject UpdatePrivateNetworVLAN(int vlanId, int serverId, int vlan, string comments) {
            object[] results = this.Invoke("UpdatePrivateNetworVLAN", new object[] {
                        vlanId,
                        serverId,
                        vlan,
                        comments});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePrivateNetworVLAN(int vlanId, int serverId, int vlan, string comments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePrivateNetworVLAN", new object[] {
                        vlanId,
                        serverId,
                        vlan,
                        comments}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndUpdatePrivateNetworVLAN(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePrivateNetworVLANAsync(int vlanId, int serverId, int vlan, string comments) {
            this.UpdatePrivateNetworVLANAsync(vlanId, serverId, vlan, comments, null);
        }
        
        /// <remarks/>
        public void UpdatePrivateNetworVLANAsync(int vlanId, int serverId, int vlan, string comments, object userState) {
            if ((this.UpdatePrivateNetworVLANOperationCompleted == null)) {
                this.UpdatePrivateNetworVLANOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePrivateNetworVLANOperationCompleted);
            }
            this.InvokeAsync("UpdatePrivateNetworVLAN", new object[] {
                        vlanId,
                        serverId,
                        vlan,
                        comments}, this.UpdatePrivateNetworVLANOperationCompleted, userState);
        }
        
        private void OnUpdatePrivateNetworVLANOperationCompleted(object arg) {
            if ((this.UpdatePrivateNetworVLANCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePrivateNetworVLANCompleted(this, new UpdatePrivateNetworVLANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackagePrivateNetworkVLANs", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageVLANsPaged GetPackagePrivateNetworkVLANs(int packageId, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetPackagePrivateNetworkVLANs", new object[] {
                        packageId,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((PackageVLANsPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackagePrivateNetworkVLANs(int packageId, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackagePrivateNetworkVLANs", new object[] {
                        packageId,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageVLANsPaged EndGetPackagePrivateNetworkVLANs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageVLANsPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagePrivateNetworkVLANsAsync(int packageId, string sortColumn, int startRow, int maximumRows) {
            this.GetPackagePrivateNetworkVLANsAsync(packageId, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetPackagePrivateNetworkVLANsAsync(int packageId, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetPackagePrivateNetworkVLANsOperationCompleted == null)) {
                this.GetPackagePrivateNetworkVLANsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagePrivateNetworkVLANsOperationCompleted);
            }
            this.InvokeAsync("GetPackagePrivateNetworkVLANs", new object[] {
                        packageId,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetPackagePrivateNetworkVLANsOperationCompleted, userState);
        }
        
        private void OnGetPackagePrivateNetworkVLANsOperationCompleted(object arg) {
            if ((this.GetPackagePrivateNetworkVLANsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagePrivateNetworkVLANsCompleted(this, new GetPackagePrivateNetworkVLANsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeallocatePackageVLANs", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeallocatePackageVLANs(int packageId, int[] vlanId) {
            object[] results = this.Invoke("DeallocatePackageVLANs", new object[] {
                        packageId,
                        vlanId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeallocatePackageVLANs(int packageId, int[] vlanId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeallocatePackageVLANs", new object[] {
                        packageId,
                        vlanId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeallocatePackageVLANs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeallocatePackageVLANsAsync(int packageId, int[] vlanId) {
            this.DeallocatePackageVLANsAsync(packageId, vlanId, null);
        }
        
        /// <remarks/>
        public void DeallocatePackageVLANsAsync(int packageId, int[] vlanId, object userState) {
            if ((this.DeallocatePackageVLANsOperationCompleted == null)) {
                this.DeallocatePackageVLANsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeallocatePackageVLANsOperationCompleted);
            }
            this.InvokeAsync("DeallocatePackageVLANs", new object[] {
                        packageId,
                        vlanId}, this.DeallocatePackageVLANsOperationCompleted, userState);
        }
        
        private void OnDeallocatePackageVLANsOperationCompleted(object arg) {
            if ((this.DeallocatePackageVLANsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeallocatePackageVLANsCompleted(this, new DeallocatePackageVLANsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetUnallottedVLANs", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VLANInfo[] GetUnallottedVLANs(int packageId, string groupName) {
            object[] results = this.Invoke("GetUnallottedVLANs", new object[] {
                        packageId,
                        groupName});
            return ((VLANInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUnallottedVLANs(int packageId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUnallottedVLANs", new object[] {
                        packageId,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public VLANInfo[] EndGetUnallottedVLANs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VLANInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUnallottedVLANsAsync(int packageId, string groupName) {
            this.GetUnallottedVLANsAsync(packageId, groupName, null);
        }
        
        /// <remarks/>
        public void GetUnallottedVLANsAsync(int packageId, string groupName, object userState) {
            if ((this.GetUnallottedVLANsOperationCompleted == null)) {
                this.GetUnallottedVLANsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnallottedVLANsOperationCompleted);
            }
            this.InvokeAsync("GetUnallottedVLANs", new object[] {
                        packageId,
                        groupName}, this.GetUnallottedVLANsOperationCompleted, userState);
        }
        
        private void OnGetUnallottedVLANsOperationCompleted(object arg) {
            if ((this.GetUnallottedVLANsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnallottedVLANsCompleted(this, new GetUnallottedVLANsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AllocatePackageVLANs", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AllocatePackageVLANs(int packageId, string groupName, bool allocateRandom, int vlansNumber, int[] vlanId) {
            object[] results = this.Invoke("AllocatePackageVLANs", new object[] {
                        packageId,
                        groupName,
                        allocateRandom,
                        vlansNumber,
                        vlanId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAllocatePackageVLANs(int packageId, string groupName, bool allocateRandom, int vlansNumber, int[] vlanId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AllocatePackageVLANs", new object[] {
                        packageId,
                        groupName,
                        allocateRandom,
                        vlansNumber,
                        vlanId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAllocatePackageVLANs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AllocatePackageVLANsAsync(int packageId, string groupName, bool allocateRandom, int vlansNumber, int[] vlanId) {
            this.AllocatePackageVLANsAsync(packageId, groupName, allocateRandom, vlansNumber, vlanId, null);
        }
        
        /// <remarks/>
        public void AllocatePackageVLANsAsync(int packageId, string groupName, bool allocateRandom, int vlansNumber, int[] vlanId, object userState) {
            if ((this.AllocatePackageVLANsOperationCompleted == null)) {
                this.AllocatePackageVLANsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllocatePackageVLANsOperationCompleted);
            }
            this.InvokeAsync("AllocatePackageVLANs", new object[] {
                        packageId,
                        groupName,
                        allocateRandom,
                        vlansNumber,
                        vlanId}, this.AllocatePackageVLANsOperationCompleted, userState);
        }
        
        private void OnAllocatePackageVLANsOperationCompleted(object arg) {
            if ((this.AllocatePackageVLANsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllocatePackageVLANsCompleted(this, new AllocatePackageVLANsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IPAddressInfo[] GetIPAddresses(IPAddressPool pool, int serverId) {
            object[] results = this.Invoke("GetIPAddresses", new object[] {
                        pool,
                        serverId});
            return ((IPAddressInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIPAddresses(IPAddressPool pool, int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIPAddresses", new object[] {
                        pool,
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public IPAddressInfo[] EndGetIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IPAddressInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetIPAddressesAsync(IPAddressPool pool, int serverId) {
            this.GetIPAddressesAsync(pool, serverId, null);
        }
        
        /// <remarks/>
        public void GetIPAddressesAsync(IPAddressPool pool, int serverId, object userState) {
            if ((this.GetIPAddressesOperationCompleted == null)) {
                this.GetIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIPAddressesOperationCompleted);
            }
            this.InvokeAsync("GetIPAddresses", new object[] {
                        pool,
                        serverId}, this.GetIPAddressesOperationCompleted, userState);
        }
        
        private void OnGetIPAddressesOperationCompleted(object arg) {
            if ((this.GetIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIPAddressesCompleted(this, new GetIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetIPAddressesPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IPAddressesPaged GetIPAddressesPaged(IPAddressPool pool, int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetIPAddressesPaged", new object[] {
                        pool,
                        serverId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((IPAddressesPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIPAddressesPaged(IPAddressPool pool, int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIPAddressesPaged", new object[] {
                        pool,
                        serverId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public IPAddressesPaged EndGetIPAddressesPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IPAddressesPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetIPAddressesPagedAsync(IPAddressPool pool, int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetIPAddressesPagedAsync(pool, serverId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetIPAddressesPagedAsync(IPAddressPool pool, int serverId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetIPAddressesPagedOperationCompleted == null)) {
                this.GetIPAddressesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIPAddressesPagedOperationCompleted);
            }
            this.InvokeAsync("GetIPAddressesPaged", new object[] {
                        pool,
                        serverId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetIPAddressesPagedOperationCompleted, userState);
        }
        
        private void OnGetIPAddressesPagedOperationCompleted(object arg) {
            if ((this.GetIPAddressesPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIPAddressesPagedCompleted(this, new GetIPAddressesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetIPAddress", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IPAddressInfo GetIPAddress(int addressId) {
            object[] results = this.Invoke("GetIPAddress", new object[] {
                        addressId});
            return ((IPAddressInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIPAddress(int addressId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIPAddress", new object[] {
                        addressId}, callback, asyncState);
        }
        
        /// <remarks/>
        public IPAddressInfo EndGetIPAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IPAddressInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetIPAddressAsync(int addressId) {
            this.GetIPAddressAsync(addressId, null);
        }
        
        /// <remarks/>
        public void GetIPAddressAsync(int addressId, object userState) {
            if ((this.GetIPAddressOperationCompleted == null)) {
                this.GetIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIPAddressOperationCompleted);
            }
            this.InvokeAsync("GetIPAddress", new object[] {
                        addressId}, this.GetIPAddressOperationCompleted, userState);
        }
        
        private void OnGetIPAddressOperationCompleted(object arg) {
            if ((this.GetIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIPAddressCompleted(this, new GetIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddIPAddress", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IntResult AddIPAddress(IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN) {
            object[] results = this.Invoke("AddIPAddress", new object[] {
                        pool,
                        serverId,
                        externalIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN});
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddIPAddress(IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddIPAddress", new object[] {
                        pool,
                        serverId,
                        externalIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, callback, asyncState);
        }
        
        /// <remarks/>
        public IntResult EndAddIPAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddIPAddressAsync(IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN) {
            this.AddIPAddressAsync(pool, serverId, externalIP, internalIP, subnetMask, defaultGateway, comments, VLAN, null);
        }
        
        /// <remarks/>
        public void AddIPAddressAsync(IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN, object userState) {
            if ((this.AddIPAddressOperationCompleted == null)) {
                this.AddIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIPAddressOperationCompleted);
            }
            this.InvokeAsync("AddIPAddress", new object[] {
                        pool,
                        serverId,
                        externalIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, this.AddIPAddressOperationCompleted, userState);
        }
        
        private void OnAddIPAddressOperationCompleted(object arg) {
            if ((this.AddIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIPAddressCompleted(this, new AddIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddIPAddressesRange", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddIPAddressesRange(IPAddressPool pool, int serverId, string externalIP, string endIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN) {
            object[] results = this.Invoke("AddIPAddressesRange", new object[] {
                        pool,
                        serverId,
                        externalIP,
                        endIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddIPAddressesRange(IPAddressPool pool, int serverId, string externalIP, string endIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddIPAddressesRange", new object[] {
                        pool,
                        serverId,
                        externalIP,
                        endIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddIPAddressesRange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddIPAddressesRangeAsync(IPAddressPool pool, int serverId, string externalIP, string endIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN) {
            this.AddIPAddressesRangeAsync(pool, serverId, externalIP, endIP, internalIP, subnetMask, defaultGateway, comments, VLAN, null);
        }
        
        /// <remarks/>
        public void AddIPAddressesRangeAsync(IPAddressPool pool, int serverId, string externalIP, string endIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN, object userState) {
            if ((this.AddIPAddressesRangeOperationCompleted == null)) {
                this.AddIPAddressesRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIPAddressesRangeOperationCompleted);
            }
            this.InvokeAsync("AddIPAddressesRange", new object[] {
                        pool,
                        serverId,
                        externalIP,
                        endIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, this.AddIPAddressesRangeOperationCompleted, userState);
        }
        
        private void OnAddIPAddressesRangeOperationCompleted(object arg) {
            if ((this.AddIPAddressesRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIPAddressesRangeCompleted(this, new AddIPAddressesRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateIPAddress", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject UpdateIPAddress(int addressId, IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN) {
            object[] results = this.Invoke("UpdateIPAddress", new object[] {
                        addressId,
                        pool,
                        serverId,
                        externalIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateIPAddress(int addressId, IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateIPAddress", new object[] {
                        addressId,
                        pool,
                        serverId,
                        externalIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndUpdateIPAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateIPAddressAsync(int addressId, IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN) {
            this.UpdateIPAddressAsync(addressId, pool, serverId, externalIP, internalIP, subnetMask, defaultGateway, comments, VLAN, null);
        }
        
        /// <remarks/>
        public void UpdateIPAddressAsync(int addressId, IPAddressPool pool, int serverId, string externalIP, string internalIP, string subnetMask, string defaultGateway, string comments, int VLAN, object userState) {
            if ((this.UpdateIPAddressOperationCompleted == null)) {
                this.UpdateIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIPAddressOperationCompleted);
            }
            this.InvokeAsync("UpdateIPAddress", new object[] {
                        addressId,
                        pool,
                        serverId,
                        externalIP,
                        internalIP,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, this.UpdateIPAddressOperationCompleted, userState);
        }
        
        private void OnUpdateIPAddressOperationCompleted(object arg) {
            if ((this.UpdateIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIPAddressCompleted(this, new UpdateIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject UpdateIPAddresses(int[] addresses, IPAddressPool pool, int serverId, string subnetMask, string defaultGateway, string comments, int VLAN) {
            object[] results = this.Invoke("UpdateIPAddresses", new object[] {
                        addresses,
                        pool,
                        serverId,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateIPAddresses(int[] addresses, IPAddressPool pool, int serverId, string subnetMask, string defaultGateway, string comments, int VLAN, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateIPAddresses", new object[] {
                        addresses,
                        pool,
                        serverId,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndUpdateIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateIPAddressesAsync(int[] addresses, IPAddressPool pool, int serverId, string subnetMask, string defaultGateway, string comments, int VLAN) {
            this.UpdateIPAddressesAsync(addresses, pool, serverId, subnetMask, defaultGateway, comments, VLAN, null);
        }
        
        /// <remarks/>
        public void UpdateIPAddressesAsync(int[] addresses, IPAddressPool pool, int serverId, string subnetMask, string defaultGateway, string comments, int VLAN, object userState) {
            if ((this.UpdateIPAddressesOperationCompleted == null)) {
                this.UpdateIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIPAddressesOperationCompleted);
            }
            this.InvokeAsync("UpdateIPAddresses", new object[] {
                        addresses,
                        pool,
                        serverId,
                        subnetMask,
                        defaultGateway,
                        comments,
                        VLAN}, this.UpdateIPAddressesOperationCompleted, userState);
        }
        
        private void OnUpdateIPAddressesOperationCompleted(object arg) {
            if ((this.UpdateIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIPAddressesCompleted(this, new UpdateIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteIPAddress", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteIPAddress(int addressId) {
            object[] results = this.Invoke("DeleteIPAddress", new object[] {
                        addressId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteIPAddress(int addressId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteIPAddress", new object[] {
                        addressId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteIPAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteIPAddressAsync(int addressId) {
            this.DeleteIPAddressAsync(addressId, null);
        }
        
        /// <remarks/>
        public void DeleteIPAddressAsync(int addressId, object userState) {
            if ((this.DeleteIPAddressOperationCompleted == null)) {
                this.DeleteIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteIPAddressOperationCompleted);
            }
            this.InvokeAsync("DeleteIPAddress", new object[] {
                        addressId}, this.DeleteIPAddressOperationCompleted, userState);
        }
        
        private void OnDeleteIPAddressOperationCompleted(object arg) {
            if ((this.DeleteIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteIPAddressCompleted(this, new DeleteIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteIPAddresses(int[] addresses) {
            object[] results = this.Invoke("DeleteIPAddresses", new object[] {
                        addresses});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteIPAddresses(int[] addresses, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteIPAddresses", new object[] {
                        addresses}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteIPAddressesAsync(int[] addresses) {
            this.DeleteIPAddressesAsync(addresses, null);
        }
        
        /// <remarks/>
        public void DeleteIPAddressesAsync(int[] addresses, object userState) {
            if ((this.DeleteIPAddressesOperationCompleted == null)) {
                this.DeleteIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteIPAddressesOperationCompleted);
            }
            this.InvokeAsync("DeleteIPAddresses", new object[] {
                        addresses}, this.DeleteIPAddressesOperationCompleted, userState);
        }
        
        private void OnDeleteIPAddressesOperationCompleted(object arg) {
            if ((this.DeleteIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteIPAddressesCompleted(this, new DeleteIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetUnallottedIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IPAddressInfo[] GetUnallottedIPAddresses(int packageId, string groupName, IPAddressPool pool) {
            object[] results = this.Invoke("GetUnallottedIPAddresses", new object[] {
                        packageId,
                        groupName,
                        pool});
            return ((IPAddressInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUnallottedIPAddresses(int packageId, string groupName, IPAddressPool pool, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUnallottedIPAddresses", new object[] {
                        packageId,
                        groupName,
                        pool}, callback, asyncState);
        }
        
        /// <remarks/>
        public IPAddressInfo[] EndGetUnallottedIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IPAddressInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUnallottedIPAddressesAsync(int packageId, string groupName, IPAddressPool pool) {
            this.GetUnallottedIPAddressesAsync(packageId, groupName, pool, null);
        }
        
        /// <remarks/>
        public void GetUnallottedIPAddressesAsync(int packageId, string groupName, IPAddressPool pool, object userState) {
            if ((this.GetUnallottedIPAddressesOperationCompleted == null)) {
                this.GetUnallottedIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnallottedIPAddressesOperationCompleted);
            }
            this.InvokeAsync("GetUnallottedIPAddresses", new object[] {
                        packageId,
                        groupName,
                        pool}, this.GetUnallottedIPAddressesOperationCompleted, userState);
        }
        
        private void OnGetUnallottedIPAddressesOperationCompleted(object arg) {
            if ((this.GetUnallottedIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnallottedIPAddressesCompleted(this, new GetUnallottedIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageIPAddressesPaged GetPackageIPAddresses(int packageId, int orgId, IPAddressPool pool, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, bool recursive) {
            object[] results = this.Invoke("GetPackageIPAddresses", new object[] {
                        packageId,
                        orgId,
                        pool,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows,
                        recursive});
            return ((PackageIPAddressesPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageIPAddresses(int packageId, int orgId, IPAddressPool pool, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, bool recursive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageIPAddresses", new object[] {
                        packageId,
                        orgId,
                        pool,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows,
                        recursive}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageIPAddressesPaged EndGetPackageIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageIPAddressesPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageIPAddressesAsync(int packageId, int orgId, IPAddressPool pool, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, bool recursive) {
            this.GetPackageIPAddressesAsync(packageId, orgId, pool, filterColumn, filterValue, sortColumn, startRow, maximumRows, recursive, null);
        }
        
        /// <remarks/>
        public void GetPackageIPAddressesAsync(int packageId, int orgId, IPAddressPool pool, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, bool recursive, object userState) {
            if ((this.GetPackageIPAddressesOperationCompleted == null)) {
                this.GetPackageIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageIPAddressesOperationCompleted);
            }
            this.InvokeAsync("GetPackageIPAddresses", new object[] {
                        packageId,
                        orgId,
                        pool,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows,
                        recursive}, this.GetPackageIPAddressesOperationCompleted, userState);
        }
        
        private void OnGetPackageIPAddressesOperationCompleted(object arg) {
            if ((this.GetPackageIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageIPAddressesCompleted(this, new GetPackageIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageIPAddressesCount", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetPackageIPAddressesCount(int packageId, int orgId, IPAddressPool pool) {
            object[] results = this.Invoke("GetPackageIPAddressesCount", new object[] {
                        packageId,
                        orgId,
                        pool});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageIPAddressesCount(int packageId, int orgId, IPAddressPool pool, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageIPAddressesCount", new object[] {
                        packageId,
                        orgId,
                        pool}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetPackageIPAddressesCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageIPAddressesCountAsync(int packageId, int orgId, IPAddressPool pool) {
            this.GetPackageIPAddressesCountAsync(packageId, orgId, pool, null);
        }
        
        /// <remarks/>
        public void GetPackageIPAddressesCountAsync(int packageId, int orgId, IPAddressPool pool, object userState) {
            if ((this.GetPackageIPAddressesCountOperationCompleted == null)) {
                this.GetPackageIPAddressesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageIPAddressesCountOperationCompleted);
            }
            this.InvokeAsync("GetPackageIPAddressesCount", new object[] {
                        packageId,
                        orgId,
                        pool}, this.GetPackageIPAddressesCountOperationCompleted, userState);
        }
        
        private void OnGetPackageIPAddressesCountOperationCompleted(object arg) {
            if ((this.GetPackageIPAddressesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageIPAddressesCountCompleted(this, new GetPackageIPAddressesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageUnassignedIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageIPAddress[] GetPackageUnassignedIPAddresses(int packageId, int orgId, IPAddressPool pool) {
            object[] results = this.Invoke("GetPackageUnassignedIPAddresses", new object[] {
                        packageId,
                        orgId,
                        pool});
            return ((PackageIPAddress[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageUnassignedIPAddresses(int packageId, int orgId, IPAddressPool pool, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageUnassignedIPAddresses", new object[] {
                        packageId,
                        orgId,
                        pool}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageIPAddress[] EndGetPackageUnassignedIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageIPAddress[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageUnassignedIPAddressesAsync(int packageId, int orgId, IPAddressPool pool) {
            this.GetPackageUnassignedIPAddressesAsync(packageId, orgId, pool, null);
        }
        
        /// <remarks/>
        public void GetPackageUnassignedIPAddressesAsync(int packageId, int orgId, IPAddressPool pool, object userState) {
            if ((this.GetPackageUnassignedIPAddressesOperationCompleted == null)) {
                this.GetPackageUnassignedIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageUnassignedIPAddressesOperationCompleted);
            }
            this.InvokeAsync("GetPackageUnassignedIPAddresses", new object[] {
                        packageId,
                        orgId,
                        pool}, this.GetPackageUnassignedIPAddressesOperationCompleted, userState);
        }
        
        private void OnGetPackageUnassignedIPAddressesOperationCompleted(object arg) {
            if ((this.GetPackageUnassignedIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageUnassignedIPAddressesCompleted(this, new GetPackageUnassignedIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AllocatePackageIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AllocatePackageIPAddresses(int packageId, int orgId, string groupName, IPAddressPool pool, bool allocateRandom, int addressesNumber, int[] addressId) {
            object[] results = this.Invoke("AllocatePackageIPAddresses", new object[] {
                        packageId,
                        orgId,
                        groupName,
                        pool,
                        allocateRandom,
                        addressesNumber,
                        addressId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAllocatePackageIPAddresses(int packageId, int orgId, string groupName, IPAddressPool pool, bool allocateRandom, int addressesNumber, int[] addressId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AllocatePackageIPAddresses", new object[] {
                        packageId,
                        orgId,
                        groupName,
                        pool,
                        allocateRandom,
                        addressesNumber,
                        addressId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAllocatePackageIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AllocatePackageIPAddressesAsync(int packageId, int orgId, string groupName, IPAddressPool pool, bool allocateRandom, int addressesNumber, int[] addressId) {
            this.AllocatePackageIPAddressesAsync(packageId, orgId, groupName, pool, allocateRandom, addressesNumber, addressId, null);
        }
        
        /// <remarks/>
        public void AllocatePackageIPAddressesAsync(int packageId, int orgId, string groupName, IPAddressPool pool, bool allocateRandom, int addressesNumber, int[] addressId, object userState) {
            if ((this.AllocatePackageIPAddressesOperationCompleted == null)) {
                this.AllocatePackageIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllocatePackageIPAddressesOperationCompleted);
            }
            this.InvokeAsync("AllocatePackageIPAddresses", new object[] {
                        packageId,
                        orgId,
                        groupName,
                        pool,
                        allocateRandom,
                        addressesNumber,
                        addressId}, this.AllocatePackageIPAddressesOperationCompleted, userState);
        }
        
        private void OnAllocatePackageIPAddressesOperationCompleted(object arg) {
            if ((this.AllocatePackageIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllocatePackageIPAddressesCompleted(this, new AllocatePackageIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AllocateMaximumPackageIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AllocateMaximumPackageIPAddresses(int packageId, string groupName, IPAddressPool pool) {
            object[] results = this.Invoke("AllocateMaximumPackageIPAddresses", new object[] {
                        packageId,
                        groupName,
                        pool});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAllocateMaximumPackageIPAddresses(int packageId, string groupName, IPAddressPool pool, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AllocateMaximumPackageIPAddresses", new object[] {
                        packageId,
                        groupName,
                        pool}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAllocateMaximumPackageIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AllocateMaximumPackageIPAddressesAsync(int packageId, string groupName, IPAddressPool pool) {
            this.AllocateMaximumPackageIPAddressesAsync(packageId, groupName, pool, null);
        }
        
        /// <remarks/>
        public void AllocateMaximumPackageIPAddressesAsync(int packageId, string groupName, IPAddressPool pool, object userState) {
            if ((this.AllocateMaximumPackageIPAddressesOperationCompleted == null)) {
                this.AllocateMaximumPackageIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllocateMaximumPackageIPAddressesOperationCompleted);
            }
            this.InvokeAsync("AllocateMaximumPackageIPAddresses", new object[] {
                        packageId,
                        groupName,
                        pool}, this.AllocateMaximumPackageIPAddressesOperationCompleted, userState);
        }
        
        private void OnAllocateMaximumPackageIPAddressesOperationCompleted(object arg) {
            if ((this.AllocateMaximumPackageIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllocateMaximumPackageIPAddressesCompleted(this, new AllocateMaximumPackageIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeallocatePackageIPAddresses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeallocatePackageIPAddresses(int packageId, int[] addressId) {
            object[] results = this.Invoke("DeallocatePackageIPAddresses", new object[] {
                        packageId,
                        addressId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeallocatePackageIPAddresses(int packageId, int[] addressId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeallocatePackageIPAddresses", new object[] {
                        packageId,
                        addressId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeallocatePackageIPAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeallocatePackageIPAddressesAsync(int packageId, int[] addressId) {
            this.DeallocatePackageIPAddressesAsync(packageId, addressId, null);
        }
        
        /// <remarks/>
        public void DeallocatePackageIPAddressesAsync(int packageId, int[] addressId, object userState) {
            if ((this.DeallocatePackageIPAddressesOperationCompleted == null)) {
                this.DeallocatePackageIPAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeallocatePackageIPAddressesOperationCompleted);
            }
            this.InvokeAsync("DeallocatePackageIPAddresses", new object[] {
                        packageId,
                        addressId}, this.DeallocatePackageIPAddressesOperationCompleted, userState);
        }
        
        private void OnDeallocatePackageIPAddressesOperationCompleted(object arg) {
            if ((this.DeallocatePackageIPAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeallocatePackageIPAddressesCompleted(this, new DeallocatePackageIPAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetClusters", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClusterInfo[] GetClusters() {
            object[] results = this.Invoke("GetClusters", new object[0]);
            return ((ClusterInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClusters(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClusters", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ClusterInfo[] EndGetClusters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClusterInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetClustersAsync() {
            this.GetClustersAsync(null);
        }
        
        /// <remarks/>
        public void GetClustersAsync(object userState) {
            if ((this.GetClustersOperationCompleted == null)) {
                this.GetClustersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClustersOperationCompleted);
            }
            this.InvokeAsync("GetClusters", new object[0], this.GetClustersOperationCompleted, userState);
        }
        
        private void OnGetClustersOperationCompleted(object arg) {
            if ((this.GetClustersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClustersCompleted(this, new GetClustersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddCluster", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCluster(ClusterInfo cluster) {
            object[] results = this.Invoke("AddCluster", new object[] {
                        cluster});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCluster(ClusterInfo cluster, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCluster", new object[] {
                        cluster}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddCluster(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddClusterAsync(ClusterInfo cluster) {
            this.AddClusterAsync(cluster, null);
        }
        
        /// <remarks/>
        public void AddClusterAsync(ClusterInfo cluster, object userState) {
            if ((this.AddClusterOperationCompleted == null)) {
                this.AddClusterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClusterOperationCompleted);
            }
            this.InvokeAsync("AddCluster", new object[] {
                        cluster}, this.AddClusterOperationCompleted, userState);
        }
        
        private void OnAddClusterOperationCompleted(object arg) {
            if ((this.AddClusterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClusterCompleted(this, new AddClusterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteCluster", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteCluster(int clusterId) {
            object[] results = this.Invoke("DeleteCluster", new object[] {
                        clusterId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCluster(int clusterId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCluster", new object[] {
                        clusterId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteCluster(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteClusterAsync(int clusterId) {
            this.DeleteClusterAsync(clusterId, null);
        }
        
        /// <remarks/>
        public void DeleteClusterAsync(int clusterId, object userState) {
            if ((this.DeleteClusterOperationCompleted == null)) {
                this.DeleteClusterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClusterOperationCompleted);
            }
            this.InvokeAsync("DeleteCluster", new object[] {
                        clusterId}, this.DeleteClusterOperationCompleted, userState);
        }
        
        private void OnDeleteClusterOperationCompleted(object arg) {
            if ((this.DeleteClusterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClusterCompleted(this, new DeleteClusterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawDnsRecordsByService", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawDnsRecordsByService(int serviceId) {
            object[] results = this.Invoke("GetRawDnsRecordsByService", new object[] {
                        serviceId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawDnsRecordsByService(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawDnsRecordsByService", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawDnsRecordsByService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByServiceAsync(int serviceId) {
            this.GetRawDnsRecordsByServiceAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByServiceAsync(int serviceId, object userState) {
            if ((this.GetRawDnsRecordsByServiceOperationCompleted == null)) {
                this.GetRawDnsRecordsByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawDnsRecordsByServiceOperationCompleted);
            }
            this.InvokeAsync("GetRawDnsRecordsByService", new object[] {
                        serviceId}, this.GetRawDnsRecordsByServiceOperationCompleted, userState);
        }
        
        private void OnGetRawDnsRecordsByServiceOperationCompleted(object arg) {
            if ((this.GetRawDnsRecordsByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawDnsRecordsByServiceCompleted(this, new GetRawDnsRecordsByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawDnsRecordsByServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawDnsRecordsByServer(int serverId) {
            object[] results = this.Invoke("GetRawDnsRecordsByServer", new object[] {
                        serverId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawDnsRecordsByServer(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawDnsRecordsByServer", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawDnsRecordsByServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByServerAsync(int serverId) {
            this.GetRawDnsRecordsByServerAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByServerAsync(int serverId, object userState) {
            if ((this.GetRawDnsRecordsByServerOperationCompleted == null)) {
                this.GetRawDnsRecordsByServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawDnsRecordsByServerOperationCompleted);
            }
            this.InvokeAsync("GetRawDnsRecordsByServer", new object[] {
                        serverId}, this.GetRawDnsRecordsByServerOperationCompleted, userState);
        }
        
        private void OnGetRawDnsRecordsByServerOperationCompleted(object arg) {
            if ((this.GetRawDnsRecordsByServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawDnsRecordsByServerCompleted(this, new GetRawDnsRecordsByServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawDnsRecordsByPackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawDnsRecordsByPackage(int packageId) {
            object[] results = this.Invoke("GetRawDnsRecordsByPackage", new object[] {
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawDnsRecordsByPackage(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawDnsRecordsByPackage", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawDnsRecordsByPackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByPackageAsync(int packageId) {
            this.GetRawDnsRecordsByPackageAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByPackageAsync(int packageId, object userState) {
            if ((this.GetRawDnsRecordsByPackageOperationCompleted == null)) {
                this.GetRawDnsRecordsByPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawDnsRecordsByPackageOperationCompleted);
            }
            this.InvokeAsync("GetRawDnsRecordsByPackage", new object[] {
                        packageId}, this.GetRawDnsRecordsByPackageOperationCompleted, userState);
        }
        
        private void OnGetRawDnsRecordsByPackageOperationCompleted(object arg) {
            if ((this.GetRawDnsRecordsByPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawDnsRecordsByPackageCompleted(this, new GetRawDnsRecordsByPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawDnsRecordsByGroup", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawDnsRecordsByGroup(int groupId) {
            object[] results = this.Invoke("GetRawDnsRecordsByGroup", new object[] {
                        groupId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawDnsRecordsByGroup(int groupId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawDnsRecordsByGroup", new object[] {
                        groupId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawDnsRecordsByGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByGroupAsync(int groupId) {
            this.GetRawDnsRecordsByGroupAsync(groupId, null);
        }
        
        /// <remarks/>
        public void GetRawDnsRecordsByGroupAsync(int groupId, object userState) {
            if ((this.GetRawDnsRecordsByGroupOperationCompleted == null)) {
                this.GetRawDnsRecordsByGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawDnsRecordsByGroupOperationCompleted);
            }
            this.InvokeAsync("GetRawDnsRecordsByGroup", new object[] {
                        groupId}, this.GetRawDnsRecordsByGroupOperationCompleted, userState);
        }
        
        private void OnGetRawDnsRecordsByGroupOperationCompleted(object arg) {
            if ((this.GetRawDnsRecordsByGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawDnsRecordsByGroupCompleted(this, new GetRawDnsRecordsByGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDnsRecordsByService", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GlobalDnsRecord[] GetDnsRecordsByService(int serviceId) {
            object[] results = this.Invoke("GetDnsRecordsByService", new object[] {
                        serviceId});
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDnsRecordsByService(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDnsRecordsByService", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] EndGetDnsRecordsByService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDnsRecordsByServiceAsync(int serviceId) {
            this.GetDnsRecordsByServiceAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetDnsRecordsByServiceAsync(int serviceId, object userState) {
            if ((this.GetDnsRecordsByServiceOperationCompleted == null)) {
                this.GetDnsRecordsByServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDnsRecordsByServiceOperationCompleted);
            }
            this.InvokeAsync("GetDnsRecordsByService", new object[] {
                        serviceId}, this.GetDnsRecordsByServiceOperationCompleted, userState);
        }
        
        private void OnGetDnsRecordsByServiceOperationCompleted(object arg) {
            if ((this.GetDnsRecordsByServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDnsRecordsByServiceCompleted(this, new GetDnsRecordsByServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDnsRecordsByServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GlobalDnsRecord[] GetDnsRecordsByServer(int serverId) {
            object[] results = this.Invoke("GetDnsRecordsByServer", new object[] {
                        serverId});
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDnsRecordsByServer(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDnsRecordsByServer", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] EndGetDnsRecordsByServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDnsRecordsByServerAsync(int serverId) {
            this.GetDnsRecordsByServerAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetDnsRecordsByServerAsync(int serverId, object userState) {
            if ((this.GetDnsRecordsByServerOperationCompleted == null)) {
                this.GetDnsRecordsByServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDnsRecordsByServerOperationCompleted);
            }
            this.InvokeAsync("GetDnsRecordsByServer", new object[] {
                        serverId}, this.GetDnsRecordsByServerOperationCompleted, userState);
        }
        
        private void OnGetDnsRecordsByServerOperationCompleted(object arg) {
            if ((this.GetDnsRecordsByServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDnsRecordsByServerCompleted(this, new GetDnsRecordsByServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDnsRecordsByPackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GlobalDnsRecord[] GetDnsRecordsByPackage(int packageId) {
            object[] results = this.Invoke("GetDnsRecordsByPackage", new object[] {
                        packageId});
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDnsRecordsByPackage(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDnsRecordsByPackage", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] EndGetDnsRecordsByPackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDnsRecordsByPackageAsync(int packageId) {
            this.GetDnsRecordsByPackageAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetDnsRecordsByPackageAsync(int packageId, object userState) {
            if ((this.GetDnsRecordsByPackageOperationCompleted == null)) {
                this.GetDnsRecordsByPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDnsRecordsByPackageOperationCompleted);
            }
            this.InvokeAsync("GetDnsRecordsByPackage", new object[] {
                        packageId}, this.GetDnsRecordsByPackageOperationCompleted, userState);
        }
        
        private void OnGetDnsRecordsByPackageOperationCompleted(object arg) {
            if ((this.GetDnsRecordsByPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDnsRecordsByPackageCompleted(this, new GetDnsRecordsByPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDnsRecordsByGroup", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GlobalDnsRecord[] GetDnsRecordsByGroup(int groupId) {
            object[] results = this.Invoke("GetDnsRecordsByGroup", new object[] {
                        groupId});
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDnsRecordsByGroup(int groupId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDnsRecordsByGroup", new object[] {
                        groupId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] EndGetDnsRecordsByGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GlobalDnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDnsRecordsByGroupAsync(int groupId) {
            this.GetDnsRecordsByGroupAsync(groupId, null);
        }
        
        /// <remarks/>
        public void GetDnsRecordsByGroupAsync(int groupId, object userState) {
            if ((this.GetDnsRecordsByGroupOperationCompleted == null)) {
                this.GetDnsRecordsByGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDnsRecordsByGroupOperationCompleted);
            }
            this.InvokeAsync("GetDnsRecordsByGroup", new object[] {
                        groupId}, this.GetDnsRecordsByGroupOperationCompleted, userState);
        }
        
        private void OnGetDnsRecordsByGroupOperationCompleted(object arg) {
            if ((this.GetDnsRecordsByGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDnsRecordsByGroupCompleted(this, new GetDnsRecordsByGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDnsRecord", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GlobalDnsRecord GetDnsRecord(int recordId) {
            object[] results = this.Invoke("GetDnsRecord", new object[] {
                        recordId});
            return ((GlobalDnsRecord)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDnsRecord(int recordId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDnsRecord", new object[] {
                        recordId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GlobalDnsRecord EndGetDnsRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GlobalDnsRecord)(results[0]));
        }
        
        /// <remarks/>
        public void GetDnsRecordAsync(int recordId) {
            this.GetDnsRecordAsync(recordId, null);
        }
        
        /// <remarks/>
        public void GetDnsRecordAsync(int recordId, object userState) {
            if ((this.GetDnsRecordOperationCompleted == null)) {
                this.GetDnsRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDnsRecordOperationCompleted);
            }
            this.InvokeAsync("GetDnsRecord", new object[] {
                        recordId}, this.GetDnsRecordOperationCompleted, userState);
        }
        
        private void OnGetDnsRecordOperationCompleted(object arg) {
            if ((this.GetDnsRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDnsRecordCompleted(this, new GetDnsRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddDnsRecord", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDnsRecord(GlobalDnsRecord record) {
            object[] results = this.Invoke("AddDnsRecord", new object[] {
                        record});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDnsRecord(GlobalDnsRecord record, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDnsRecord", new object[] {
                        record}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddDnsRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDnsRecordAsync(GlobalDnsRecord record) {
            this.AddDnsRecordAsync(record, null);
        }
        
        /// <remarks/>
        public void AddDnsRecordAsync(GlobalDnsRecord record, object userState) {
            if ((this.AddDnsRecordOperationCompleted == null)) {
                this.AddDnsRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDnsRecordOperationCompleted);
            }
            this.InvokeAsync("AddDnsRecord", new object[] {
                        record}, this.AddDnsRecordOperationCompleted, userState);
        }
        
        private void OnAddDnsRecordOperationCompleted(object arg) {
            if ((this.AddDnsRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDnsRecordCompleted(this, new AddDnsRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateDnsRecord", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateDnsRecord(GlobalDnsRecord record) {
            object[] results = this.Invoke("UpdateDnsRecord", new object[] {
                        record});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDnsRecord(GlobalDnsRecord record, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateDnsRecord", new object[] {
                        record}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateDnsRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDnsRecordAsync(GlobalDnsRecord record) {
            this.UpdateDnsRecordAsync(record, null);
        }
        
        /// <remarks/>
        public void UpdateDnsRecordAsync(GlobalDnsRecord record, object userState) {
            if ((this.UpdateDnsRecordOperationCompleted == null)) {
                this.UpdateDnsRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDnsRecordOperationCompleted);
            }
            this.InvokeAsync("UpdateDnsRecord", new object[] {
                        record}, this.UpdateDnsRecordOperationCompleted, userState);
        }
        
        private void OnUpdateDnsRecordOperationCompleted(object arg) {
            if ((this.UpdateDnsRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDnsRecordCompleted(this, new UpdateDnsRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteDnsRecord", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteDnsRecord(int recordId) {
            object[] results = this.Invoke("DeleteDnsRecord", new object[] {
                        recordId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDnsRecord(int recordId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDnsRecord", new object[] {
                        recordId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteDnsRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDnsRecordAsync(int recordId) {
            this.DeleteDnsRecordAsync(recordId, null);
        }
        
        /// <remarks/>
        public void DeleteDnsRecordAsync(int recordId, object userState) {
            if ((this.DeleteDnsRecordOperationCompleted == null)) {
                this.DeleteDnsRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDnsRecordOperationCompleted);
            }
            this.InvokeAsync("DeleteDnsRecord", new object[] {
                        recordId}, this.DeleteDnsRecordOperationCompleted, userState);
        }
        
        private void OnDeleteDnsRecordOperationCompleted(object arg) {
            if ((this.DeleteDnsRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDnsRecordCompleted(this, new DeleteDnsRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDomainDnsRecords", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DnsRecordInfo[] GetDomainDnsRecords(int domainId) {
            object[] results = this.Invoke("GetDomainDnsRecords", new object[] {
                        domainId});
            return ((DnsRecordInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainDnsRecords(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainDnsRecords", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DnsRecordInfo[] EndGetDomainDnsRecords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DnsRecordInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainDnsRecordsAsync(int domainId) {
            this.GetDomainDnsRecordsAsync(domainId, null);
        }
        
        /// <remarks/>
        public void GetDomainDnsRecordsAsync(int domainId, object userState) {
            if ((this.GetDomainDnsRecordsOperationCompleted == null)) {
                this.GetDomainDnsRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainDnsRecordsOperationCompleted);
            }
            this.InvokeAsync("GetDomainDnsRecords", new object[] {
                        domainId}, this.GetDomainDnsRecordsOperationCompleted, userState);
        }
        
        private void OnGetDomainDnsRecordsOperationCompleted(object arg) {
            if ((this.GetDomainDnsRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainDnsRecordsCompleted(this, new GetDomainDnsRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDomains", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo[] GetDomains(int packageId) {
            object[] results = this.Invoke("GetDomains", new object[] {
                        packageId});
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomains(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomains", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainInfo[] EndGetDomains(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainsAsync(int packageId) {
            this.GetDomainsAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetDomainsAsync(int packageId, object userState) {
            if ((this.GetDomainsOperationCompleted == null)) {
                this.GetDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainsOperationCompleted);
            }
            this.InvokeAsync("GetDomains", new object[] {
                        packageId}, this.GetDomainsOperationCompleted, userState);
        }
        
        private void OnGetDomainsOperationCompleted(object arg) {
            if ((this.GetDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainsCompleted(this, new GetDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDomainsByDomainId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo[] GetDomainsByDomainId(int domainId) {
            object[] results = this.Invoke("GetDomainsByDomainId", new object[] {
                        domainId});
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainsByDomainId(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainsByDomainId", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainInfo[] EndGetDomainsByDomainId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainsByDomainIdAsync(int domainId) {
            this.GetDomainsByDomainIdAsync(domainId, null);
        }
        
        /// <remarks/>
        public void GetDomainsByDomainIdAsync(int domainId, object userState) {
            if ((this.GetDomainsByDomainIdOperationCompleted == null)) {
                this.GetDomainsByDomainIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainsByDomainIdOperationCompleted);
            }
            this.InvokeAsync("GetDomainsByDomainId", new object[] {
                        domainId}, this.GetDomainsByDomainIdOperationCompleted, userState);
        }
        
        private void OnGetDomainsByDomainIdOperationCompleted(object arg) {
            if ((this.GetDomainsByDomainIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainsByDomainIdCompleted(this, new GetDomainsByDomainIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMyDomains", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo[] GetMyDomains(int packageId) {
            object[] results = this.Invoke("GetMyDomains", new object[] {
                        packageId});
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMyDomains(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMyDomains", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainInfo[] EndGetMyDomains(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyDomainsAsync(int packageId) {
            this.GetMyDomainsAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetMyDomainsAsync(int packageId, object userState) {
            if ((this.GetMyDomainsOperationCompleted == null)) {
                this.GetMyDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyDomainsOperationCompleted);
            }
            this.InvokeAsync("GetMyDomains", new object[] {
                        packageId}, this.GetMyDomainsOperationCompleted, userState);
        }
        
        private void OnGetMyDomainsOperationCompleted(object arg) {
            if ((this.GetMyDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyDomainsCompleted(this, new GetMyDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetResellerDomains", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo[] GetResellerDomains(int packageId) {
            object[] results = this.Invoke("GetResellerDomains", new object[] {
                        packageId});
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetResellerDomains(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetResellerDomains", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainInfo[] EndGetResellerDomains(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResellerDomainsAsync(int packageId) {
            this.GetResellerDomainsAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetResellerDomainsAsync(int packageId, object userState) {
            if ((this.GetResellerDomainsOperationCompleted == null)) {
                this.GetResellerDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResellerDomainsOperationCompleted);
            }
            this.InvokeAsync("GetResellerDomains", new object[] {
                        packageId}, this.GetResellerDomainsOperationCompleted, userState);
        }
        
        private void OnGetResellerDomainsOperationCompleted(object arg) {
            if ((this.GetResellerDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResellerDomainsCompleted(this, new GetResellerDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDomainsPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDomainsPaged(int packageId, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetDomainsPaged", new object[] {
                        packageId,
                        serverId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainsPaged(int packageId, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainsPaged", new object[] {
                        packageId,
                        serverId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetDomainsPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainsPagedAsync(int packageId, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetDomainsPagedAsync(packageId, serverId, recursive, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetDomainsPagedAsync(int packageId, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetDomainsPagedOperationCompleted == null)) {
                this.GetDomainsPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainsPagedOperationCompleted);
            }
            this.InvokeAsync("GetDomainsPaged", new object[] {
                        packageId,
                        serverId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetDomainsPagedOperationCompleted, userState);
        }
        
        private void OnGetDomainsPagedOperationCompleted(object arg) {
            if ((this.GetDomainsPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainsPagedCompleted(this, new GetDomainsPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo GetDomain(int domainId) {
            object[] results = this.Invoke("GetDomain", new object[] {
                        domainId});
            return ((DomainInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomain(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomain", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainInfo EndGetDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainAsync(int domainId) {
            this.GetDomainAsync(domainId, null);
        }
        
        /// <remarks/>
        public void GetDomainAsync(int domainId, object userState) {
            if ((this.GetDomainOperationCompleted == null)) {
                this.GetDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainOperationCompleted);
            }
            this.InvokeAsync("GetDomain", new object[] {
                        domainId}, this.GetDomainOperationCompleted, userState);
        }
        
        private void OnGetDomainOperationCompleted(object arg) {
            if ((this.GetDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainCompleted(this, new GetDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDomain(DomainInfo domain) {
            object[] results = this.Invoke("AddDomain", new object[] {
                        domain});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDomain(DomainInfo domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDomain", new object[] {
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDomainAsync(DomainInfo domain) {
            this.AddDomainAsync(domain, null);
        }
        
        /// <remarks/>
        public void AddDomainAsync(DomainInfo domain, object userState) {
            if ((this.AddDomainOperationCompleted == null)) {
                this.AddDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainOperationCompleted);
            }
            this.InvokeAsync("AddDomain", new object[] {
                        domain}, this.AddDomainOperationCompleted, userState);
        }
        
        private void OnAddDomainOperationCompleted(object arg) {
            if ((this.AddDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDomainCompleted(this, new AddDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddDomainWithProvisioning", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDomainWithProvisioning(int packageId, string domainName, DomainType domainType, bool createWebSite, int pointWebSiteId, int pointMailDomainId, bool createDnsZone, bool createPreviewDomain, bool allowSubDomains, string hostName) {
            object[] results = this.Invoke("AddDomainWithProvisioning", new object[] {
                        packageId,
                        domainName,
                        domainType,
                        createWebSite,
                        pointWebSiteId,
                        pointMailDomainId,
                        createDnsZone,
                        createPreviewDomain,
                        allowSubDomains,
                        hostName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDomainWithProvisioning(int packageId, string domainName, DomainType domainType, bool createWebSite, int pointWebSiteId, int pointMailDomainId, bool createDnsZone, bool createPreviewDomain, bool allowSubDomains, string hostName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDomainWithProvisioning", new object[] {
                        packageId,
                        domainName,
                        domainType,
                        createWebSite,
                        pointWebSiteId,
                        pointMailDomainId,
                        createDnsZone,
                        createPreviewDomain,
                        allowSubDomains,
                        hostName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddDomainWithProvisioning(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDomainWithProvisioningAsync(int packageId, string domainName, DomainType domainType, bool createWebSite, int pointWebSiteId, int pointMailDomainId, bool createDnsZone, bool createPreviewDomain, bool allowSubDomains, string hostName) {
            this.AddDomainWithProvisioningAsync(packageId, domainName, domainType, createWebSite, pointWebSiteId, pointMailDomainId, createDnsZone, createPreviewDomain, allowSubDomains, hostName, null);
        }
        
        /// <remarks/>
        public void AddDomainWithProvisioningAsync(int packageId, string domainName, DomainType domainType, bool createWebSite, int pointWebSiteId, int pointMailDomainId, bool createDnsZone, bool createPreviewDomain, bool allowSubDomains, string hostName, object userState) {
            if ((this.AddDomainWithProvisioningOperationCompleted == null)) {
                this.AddDomainWithProvisioningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainWithProvisioningOperationCompleted);
            }
            this.InvokeAsync("AddDomainWithProvisioning", new object[] {
                        packageId,
                        domainName,
                        domainType,
                        createWebSite,
                        pointWebSiteId,
                        pointMailDomainId,
                        createDnsZone,
                        createPreviewDomain,
                        allowSubDomains,
                        hostName}, this.AddDomainWithProvisioningOperationCompleted, userState);
        }
        
        private void OnAddDomainWithProvisioningOperationCompleted(object arg) {
            if ((this.AddDomainWithProvisioningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDomainWithProvisioningCompleted(this, new AddDomainWithProvisioningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateDomain(DomainInfo domain) {
            object[] results = this.Invoke("UpdateDomain", new object[] {
                        domain});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDomain(DomainInfo domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateDomain", new object[] {
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDomainAsync(DomainInfo domain) {
            this.UpdateDomainAsync(domain, null);
        }
        
        /// <remarks/>
        public void UpdateDomainAsync(DomainInfo domain, object userState) {
            if ((this.UpdateDomainOperationCompleted == null)) {
                this.UpdateDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDomainOperationCompleted);
            }
            this.InvokeAsync("UpdateDomain", new object[] {
                        domain}, this.UpdateDomainOperationCompleted, userState);
        }
        
        private void OnUpdateDomainOperationCompleted(object arg) {
            if ((this.UpdateDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDomainCompleted(this, new UpdateDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteDomain(int domainId) {
            object[] results = this.Invoke("DeleteDomain", new object[] {
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDomain(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDomain", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDomainAsync(int domainId) {
            this.DeleteDomainAsync(domainId, null);
        }
        
        /// <remarks/>
        public void DeleteDomainAsync(int domainId, object userState) {
            if ((this.DeleteDomainOperationCompleted == null)) {
                this.DeleteDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteDomain", new object[] {
                        domainId}, this.DeleteDomainOperationCompleted, userState);
        }
        
        private void OnDeleteDomainOperationCompleted(object arg) {
            if ((this.DeleteDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDomainCompleted(this, new DeleteDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DetachDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DetachDomain(int domainId) {
            object[] results = this.Invoke("DetachDomain", new object[] {
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDetachDomain(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DetachDomain", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDetachDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DetachDomainAsync(int domainId) {
            this.DetachDomainAsync(domainId, null);
        }
        
        /// <remarks/>
        public void DetachDomainAsync(int domainId, object userState) {
            if ((this.DetachDomainOperationCompleted == null)) {
                this.DetachDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDetachDomainOperationCompleted);
            }
            this.InvokeAsync("DetachDomain", new object[] {
                        domainId}, this.DetachDomainOperationCompleted, userState);
        }
        
        private void OnDetachDomainOperationCompleted(object arg) {
            if ((this.DetachDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DetachDomainCompleted(this, new DetachDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/EnableDomainDns", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int EnableDomainDns(int domainId) {
            object[] results = this.Invoke("EnableDomainDns", new object[] {
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnableDomainDns(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnableDomainDns", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndEnableDomainDns(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void EnableDomainDnsAsync(int domainId) {
            this.EnableDomainDnsAsync(domainId, null);
        }
        
        /// <remarks/>
        public void EnableDomainDnsAsync(int domainId, object userState) {
            if ((this.EnableDomainDnsOperationCompleted == null)) {
                this.EnableDomainDnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableDomainDnsOperationCompleted);
            }
            this.InvokeAsync("EnableDomainDns", new object[] {
                        domainId}, this.EnableDomainDnsOperationCompleted, userState);
        }
        
        private void OnEnableDomainDnsOperationCompleted(object arg) {
            if ((this.EnableDomainDnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableDomainDnsCompleted(this, new EnableDomainDnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DisableDomainDns", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DisableDomainDns(int domainId) {
            object[] results = this.Invoke("DisableDomainDns", new object[] {
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisableDomainDns(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisableDomainDns", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDisableDomainDns(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DisableDomainDnsAsync(int domainId) {
            this.DisableDomainDnsAsync(domainId, null);
        }
        
        /// <remarks/>
        public void DisableDomainDnsAsync(int domainId, object userState) {
            if ((this.DisableDomainDnsOperationCompleted == null)) {
                this.DisableDomainDnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableDomainDnsOperationCompleted);
            }
            this.InvokeAsync("DisableDomainDns", new object[] {
                        domainId}, this.DisableDomainDnsOperationCompleted, userState);
        }
        
        private void OnDisableDomainDnsOperationCompleted(object arg) {
            if ((this.DisableDomainDnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableDomainDnsCompleted(this, new DisableDomainDnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateDomainPreviewDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateDomainPreviewDomain(string hostName, int domainId) {
            object[] results = this.Invoke("CreateDomainPreviewDomain", new object[] {
                        hostName,
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateDomainPreviewDomain(string hostName, int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateDomainPreviewDomain", new object[] {
                        hostName,
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateDomainPreviewDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDomainPreviewDomainAsync(string hostName, int domainId) {
            this.CreateDomainPreviewDomainAsync(hostName, domainId, null);
        }
        
        /// <remarks/>
        public void CreateDomainPreviewDomainAsync(string hostName, int domainId, object userState) {
            if ((this.CreateDomainPreviewDomainOperationCompleted == null)) {
                this.CreateDomainPreviewDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDomainPreviewDomainOperationCompleted);
            }
            this.InvokeAsync("CreateDomainPreviewDomain", new object[] {
                        hostName,
                        domainId}, this.CreateDomainPreviewDomainOperationCompleted, userState);
        }
        
        private void OnCreateDomainPreviewDomainOperationCompleted(object arg) {
            if ((this.CreateDomainPreviewDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDomainPreviewDomainCompleted(this, new CreateDomainPreviewDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteDomainPreviewDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteDomainPreviewDomain(int domainId) {
            object[] results = this.Invoke("DeleteDomainPreviewDomain", new object[] {
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDomainPreviewDomain(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDomainPreviewDomain", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteDomainPreviewDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDomainPreviewDomainAsync(int domainId) {
            this.DeleteDomainPreviewDomainAsync(domainId, null);
        }
        
        /// <remarks/>
        public void DeleteDomainPreviewDomainAsync(int domainId, object userState) {
            if ((this.DeleteDomainPreviewDomainOperationCompleted == null)) {
                this.DeleteDomainPreviewDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainPreviewDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteDomainPreviewDomain", new object[] {
                        domainId}, this.DeleteDomainPreviewDomainOperationCompleted, userState);
        }
        
        private void OnDeleteDomainPreviewDomainOperationCompleted(object arg) {
            if ((this.DeleteDomainPreviewDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDomainPreviewDomainCompleted(this, new DeleteDomainPreviewDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDnsZoneRecords", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DnsRecord[] GetDnsZoneRecords(int domainId) {
            object[] results = this.Invoke("GetDnsZoneRecords", new object[] {
                        domainId});
            return ((DnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDnsZoneRecords(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDnsZoneRecords", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DnsRecord[] EndGetDnsZoneRecords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DnsRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDnsZoneRecordsAsync(int domainId) {
            this.GetDnsZoneRecordsAsync(domainId, null);
        }
        
        /// <remarks/>
        public void GetDnsZoneRecordsAsync(int domainId, object userState) {
            if ((this.GetDnsZoneRecordsOperationCompleted == null)) {
                this.GetDnsZoneRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDnsZoneRecordsOperationCompleted);
            }
            this.InvokeAsync("GetDnsZoneRecords", new object[] {
                        domainId}, this.GetDnsZoneRecordsOperationCompleted, userState);
        }
        
        private void OnGetDnsZoneRecordsOperationCompleted(object arg) {
            if ((this.GetDnsZoneRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDnsZoneRecordsCompleted(this, new GetDnsZoneRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawDnsZoneRecords", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawDnsZoneRecords(int domainId) {
            object[] results = this.Invoke("GetRawDnsZoneRecords", new object[] {
                        domainId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawDnsZoneRecords(int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawDnsZoneRecords", new object[] {
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawDnsZoneRecords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawDnsZoneRecordsAsync(int domainId) {
            this.GetRawDnsZoneRecordsAsync(domainId, null);
        }
        
        /// <remarks/>
        public void GetRawDnsZoneRecordsAsync(int domainId, object userState) {
            if ((this.GetRawDnsZoneRecordsOperationCompleted == null)) {
                this.GetRawDnsZoneRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawDnsZoneRecordsOperationCompleted);
            }
            this.InvokeAsync("GetRawDnsZoneRecords", new object[] {
                        domainId}, this.GetRawDnsZoneRecordsOperationCompleted, userState);
        }
        
        private void OnGetRawDnsZoneRecordsOperationCompleted(object arg) {
            if ((this.GetRawDnsZoneRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawDnsZoneRecordsCompleted(this, new GetRawDnsZoneRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddDnsZoneRecord", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDnsZoneRecord(int domainId, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber) {
            object[] results = this.Invoke("AddDnsZoneRecord", new object[] {
                        domainId,
                        recordName,
                        recordType,
                        recordData,
                        mxPriority,
                        srvPriority,
                        srvWeight,
                        srvPortNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDnsZoneRecord(int domainId, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDnsZoneRecord", new object[] {
                        domainId,
                        recordName,
                        recordType,
                        recordData,
                        mxPriority,
                        srvPriority,
                        srvWeight,
                        srvPortNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddDnsZoneRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDnsZoneRecordAsync(int domainId, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber) {
            this.AddDnsZoneRecordAsync(domainId, recordName, recordType, recordData, mxPriority, srvPriority, srvWeight, srvPortNumber, null);
        }
        
        /// <remarks/>
        public void AddDnsZoneRecordAsync(int domainId, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber, object userState) {
            if ((this.AddDnsZoneRecordOperationCompleted == null)) {
                this.AddDnsZoneRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDnsZoneRecordOperationCompleted);
            }
            this.InvokeAsync("AddDnsZoneRecord", new object[] {
                        domainId,
                        recordName,
                        recordType,
                        recordData,
                        mxPriority,
                        srvPriority,
                        srvWeight,
                        srvPortNumber}, this.AddDnsZoneRecordOperationCompleted, userState);
        }
        
        private void OnAddDnsZoneRecordOperationCompleted(object arg) {
            if ((this.AddDnsZoneRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDnsZoneRecordCompleted(this, new AddDnsZoneRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateDnsZoneRecord", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateDnsZoneRecord(int domainId, string originalRecordName, string originalRecordData, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber) {
            object[] results = this.Invoke("UpdateDnsZoneRecord", new object[] {
                        domainId,
                        originalRecordName,
                        originalRecordData,
                        recordName,
                        recordType,
                        recordData,
                        mxPriority,
                        srvPriority,
                        srvWeight,
                        srvPortNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDnsZoneRecord(int domainId, string originalRecordName, string originalRecordData, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateDnsZoneRecord", new object[] {
                        domainId,
                        originalRecordName,
                        originalRecordData,
                        recordName,
                        recordType,
                        recordData,
                        mxPriority,
                        srvPriority,
                        srvWeight,
                        srvPortNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateDnsZoneRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDnsZoneRecordAsync(int domainId, string originalRecordName, string originalRecordData, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber) {
            this.UpdateDnsZoneRecordAsync(domainId, originalRecordName, originalRecordData, recordName, recordType, recordData, mxPriority, srvPriority, srvWeight, srvPortNumber, null);
        }
        
        /// <remarks/>
        public void UpdateDnsZoneRecordAsync(int domainId, string originalRecordName, string originalRecordData, string recordName, DnsRecordType recordType, string recordData, int mxPriority, int srvPriority, int srvWeight, int srvPortNumber, object userState) {
            if ((this.UpdateDnsZoneRecordOperationCompleted == null)) {
                this.UpdateDnsZoneRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDnsZoneRecordOperationCompleted);
            }
            this.InvokeAsync("UpdateDnsZoneRecord", new object[] {
                        domainId,
                        originalRecordName,
                        originalRecordData,
                        recordName,
                        recordType,
                        recordData,
                        mxPriority,
                        srvPriority,
                        srvWeight,
                        srvPortNumber}, this.UpdateDnsZoneRecordOperationCompleted, userState);
        }
        
        private void OnUpdateDnsZoneRecordOperationCompleted(object arg) {
            if ((this.UpdateDnsZoneRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDnsZoneRecordCompleted(this, new UpdateDnsZoneRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteDnsZoneRecord", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteDnsZoneRecord(int domainId, string recordName, DnsRecordType recordType, string recordData) {
            object[] results = this.Invoke("DeleteDnsZoneRecord", new object[] {
                        domainId,
                        recordName,
                        recordType,
                        recordData});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDnsZoneRecord(int domainId, string recordName, DnsRecordType recordType, string recordData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDnsZoneRecord", new object[] {
                        domainId,
                        recordName,
                        recordType,
                        recordData}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteDnsZoneRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDnsZoneRecordAsync(int domainId, string recordName, DnsRecordType recordType, string recordData) {
            this.DeleteDnsZoneRecordAsync(domainId, recordName, recordType, recordData, null);
        }
        
        /// <remarks/>
        public void DeleteDnsZoneRecordAsync(int domainId, string recordName, DnsRecordType recordType, string recordData, object userState) {
            if ((this.DeleteDnsZoneRecordOperationCompleted == null)) {
                this.DeleteDnsZoneRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDnsZoneRecordOperationCompleted);
            }
            this.InvokeAsync("DeleteDnsZoneRecord", new object[] {
                        domainId,
                        recordName,
                        recordType,
                        recordData}, this.DeleteDnsZoneRecordOperationCompleted, userState);
        }
        
        private void OnDeleteDnsZoneRecordOperationCompleted(object arg) {
            if ((this.DeleteDnsZoneRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDnsZoneRecordCompleted(this, new DeleteDnsZoneRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetTerminalServicesSessions", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TerminalSession[] GetTerminalServicesSessions(int serverId) {
            object[] results = this.Invoke("GetTerminalServicesSessions", new object[] {
                        serverId});
            return ((TerminalSession[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTerminalServicesSessions(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTerminalServicesSessions", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public TerminalSession[] EndGetTerminalServicesSessions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TerminalSession[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminalServicesSessionsAsync(int serverId) {
            this.GetTerminalServicesSessionsAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetTerminalServicesSessionsAsync(int serverId, object userState) {
            if ((this.GetTerminalServicesSessionsOperationCompleted == null)) {
                this.GetTerminalServicesSessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminalServicesSessionsOperationCompleted);
            }
            this.InvokeAsync("GetTerminalServicesSessions", new object[] {
                        serverId}, this.GetTerminalServicesSessionsOperationCompleted, userState);
        }
        
        private void OnGetTerminalServicesSessionsOperationCompleted(object arg) {
            if ((this.GetTerminalServicesSessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminalServicesSessionsCompleted(this, new GetTerminalServicesSessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CloseTerminalServicesSession", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CloseTerminalServicesSession(int serverId, int sessionId) {
            object[] results = this.Invoke("CloseTerminalServicesSession", new object[] {
                        serverId,
                        sessionId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCloseTerminalServicesSession(int serverId, int sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CloseTerminalServicesSession", new object[] {
                        serverId,
                        sessionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCloseTerminalServicesSession(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CloseTerminalServicesSessionAsync(int serverId, int sessionId) {
            this.CloseTerminalServicesSessionAsync(serverId, sessionId, null);
        }
        
        /// <remarks/>
        public void CloseTerminalServicesSessionAsync(int serverId, int sessionId, object userState) {
            if ((this.CloseTerminalServicesSessionOperationCompleted == null)) {
                this.CloseTerminalServicesSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseTerminalServicesSessionOperationCompleted);
            }
            this.InvokeAsync("CloseTerminalServicesSession", new object[] {
                        serverId,
                        sessionId}, this.CloseTerminalServicesSessionOperationCompleted, userState);
        }
        
        private void OnCloseTerminalServicesSessionOperationCompleted(object arg) {
            if ((this.CloseTerminalServicesSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseTerminalServicesSessionCompleted(this, new CloseTerminalServicesSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOSProcesses", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OSProcess[] GetOSProcesses(int serverId) {
            object[] results = this.Invoke("GetOSProcesses", new object[] {
                        serverId});
            return ((OSProcess[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOSProcesses(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOSProcesses", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OSProcess[] EndGetOSProcesses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OSProcess[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOSProcessesAsync(int serverId) {
            this.GetOSProcessesAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetOSProcessesAsync(int serverId, object userState) {
            if ((this.GetOSProcessesOperationCompleted == null)) {
                this.GetOSProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOSProcessesOperationCompleted);
            }
            this.InvokeAsync("GetOSProcesses", new object[] {
                        serverId}, this.GetOSProcessesOperationCompleted, userState);
        }
        
        private void OnGetOSProcessesOperationCompleted(object arg) {
            if ((this.GetOSProcessesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOSProcessesCompleted(this, new GetOSProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/TerminateOSProcess", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TerminateOSProcess(int serverId, int pid) {
            object[] results = this.Invoke("TerminateOSProcess", new object[] {
                        serverId,
                        pid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTerminateOSProcess(int serverId, int pid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TerminateOSProcess", new object[] {
                        serverId,
                        pid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndTerminateOSProcess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TerminateOSProcessAsync(int serverId, int pid) {
            this.TerminateOSProcessAsync(serverId, pid, null);
        }
        
        /// <remarks/>
        public void TerminateOSProcessAsync(int serverId, int pid, object userState) {
            if ((this.TerminateOSProcessOperationCompleted == null)) {
                this.TerminateOSProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminateOSProcessOperationCompleted);
            }
            this.InvokeAsync("TerminateOSProcess", new object[] {
                        serverId,
                        pid}, this.TerminateOSProcessOperationCompleted, userState);
        }
        
        private void OnTerminateOSProcessOperationCompleted(object arg) {
            if ((this.TerminateOSProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminateOSProcessCompleted(this, new TerminateOSProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckLoadUserProfile", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckLoadUserProfile(int serverId) {
            object[] results = this.Invoke("CheckLoadUserProfile", new object[] {
                        serverId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckLoadUserProfile(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckLoadUserProfile", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckLoadUserProfile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckLoadUserProfileAsync(int serverId) {
            this.CheckLoadUserProfileAsync(serverId, null);
        }
        
        /// <remarks/>
        public void CheckLoadUserProfileAsync(int serverId, object userState) {
            if ((this.CheckLoadUserProfileOperationCompleted == null)) {
                this.CheckLoadUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoadUserProfileOperationCompleted);
            }
            this.InvokeAsync("CheckLoadUserProfile", new object[] {
                        serverId}, this.CheckLoadUserProfileOperationCompleted, userState);
        }
        
        private void OnCheckLoadUserProfileOperationCompleted(object arg) {
            if ((this.CheckLoadUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoadUserProfileCompleted(this, new CheckLoadUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/EnableLoadUserProfile", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableLoadUserProfile(int serverId) {
            this.Invoke("EnableLoadUserProfile", new object[] {
                        serverId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnableLoadUserProfile(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnableLoadUserProfile", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEnableLoadUserProfile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void EnableLoadUserProfileAsync(int serverId) {
            this.EnableLoadUserProfileAsync(serverId, null);
        }
        
        /// <remarks/>
        public void EnableLoadUserProfileAsync(int serverId, object userState) {
            if ((this.EnableLoadUserProfileOperationCompleted == null)) {
                this.EnableLoadUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableLoadUserProfileOperationCompleted);
            }
            this.InvokeAsync("EnableLoadUserProfile", new object[] {
                        serverId}, this.EnableLoadUserProfileOperationCompleted, userState);
        }
        
        private void OnEnableLoadUserProfileOperationCompleted(object arg) {
            if ((this.EnableLoadUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableLoadUserProfileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InitWPIFeeds", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InitWPIFeeds(int serverId) {
            this.Invoke("InitWPIFeeds", new object[] {
                        serverId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInitWPIFeeds(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InitWPIFeeds", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInitWPIFeeds(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void InitWPIFeedsAsync(int serverId) {
            this.InitWPIFeedsAsync(serverId, null);
        }
        
        /// <remarks/>
        public void InitWPIFeedsAsync(int serverId, object userState) {
            if ((this.InitWPIFeedsOperationCompleted == null)) {
                this.InitWPIFeedsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitWPIFeedsOperationCompleted);
            }
            this.InvokeAsync("InitWPIFeeds", new object[] {
                        serverId}, this.InitWPIFeedsOperationCompleted, userState);
        }
        
        private void OnInitWPIFeedsOperationCompleted(object arg) {
            if ((this.InitWPIFeedsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitWPIFeedsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWPITabs", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WPITab[] GetWPITabs(int serverId) {
            object[] results = this.Invoke("GetWPITabs", new object[] {
                        serverId});
            return ((WPITab[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWPITabs(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWPITabs", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WPITab[] EndGetWPITabs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WPITab[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWPITabsAsync(int serverId) {
            this.GetWPITabsAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetWPITabsAsync(int serverId, object userState) {
            if ((this.GetWPITabsOperationCompleted == null)) {
                this.GetWPITabsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWPITabsOperationCompleted);
            }
            this.InvokeAsync("GetWPITabs", new object[] {
                        serverId}, this.GetWPITabsOperationCompleted, userState);
        }
        
        private void OnGetWPITabsOperationCompleted(object arg) {
            if ((this.GetWPITabsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWPITabsCompleted(this, new GetWPITabsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWPIKeywords", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WPIKeyword[] GetWPIKeywords(int serverId) {
            object[] results = this.Invoke("GetWPIKeywords", new object[] {
                        serverId});
            return ((WPIKeyword[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWPIKeywords(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWPIKeywords", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WPIKeyword[] EndGetWPIKeywords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WPIKeyword[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWPIKeywordsAsync(int serverId) {
            this.GetWPIKeywordsAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetWPIKeywordsAsync(int serverId, object userState) {
            if ((this.GetWPIKeywordsOperationCompleted == null)) {
                this.GetWPIKeywordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWPIKeywordsOperationCompleted);
            }
            this.InvokeAsync("GetWPIKeywords", new object[] {
                        serverId}, this.GetWPIKeywordsOperationCompleted, userState);
        }
        
        private void OnGetWPIKeywordsOperationCompleted(object arg) {
            if ((this.GetWPIKeywordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWPIKeywordsCompleted(this, new GetWPIKeywordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWPIProducts", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WPIProduct[] GetWPIProducts(int serverId, string tabId, string keywordId) {
            object[] results = this.Invoke("GetWPIProducts", new object[] {
                        serverId,
                        tabId,
                        keywordId});
            return ((WPIProduct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWPIProducts(int serverId, string tabId, string keywordId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWPIProducts", new object[] {
                        serverId,
                        tabId,
                        keywordId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WPIProduct[] EndGetWPIProducts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WPIProduct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWPIProductsAsync(int serverId, string tabId, string keywordId) {
            this.GetWPIProductsAsync(serverId, tabId, keywordId, null);
        }
        
        /// <remarks/>
        public void GetWPIProductsAsync(int serverId, string tabId, string keywordId, object userState) {
            if ((this.GetWPIProductsOperationCompleted == null)) {
                this.GetWPIProductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWPIProductsOperationCompleted);
            }
            this.InvokeAsync("GetWPIProducts", new object[] {
                        serverId,
                        tabId,
                        keywordId}, this.GetWPIProductsOperationCompleted, userState);
        }
        
        private void OnGetWPIProductsOperationCompleted(object arg) {
            if ((this.GetWPIProductsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWPIProductsCompleted(this, new GetWPIProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWPIProductsFiltered", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WPIProduct[] GetWPIProductsFiltered(int serverId, string keywordId) {
            object[] results = this.Invoke("GetWPIProductsFiltered", new object[] {
                        serverId,
                        keywordId});
            return ((WPIProduct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWPIProductsFiltered(int serverId, string keywordId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWPIProductsFiltered", new object[] {
                        serverId,
                        keywordId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WPIProduct[] EndGetWPIProductsFiltered(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WPIProduct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWPIProductsFilteredAsync(int serverId, string keywordId) {
            this.GetWPIProductsFilteredAsync(serverId, keywordId, null);
        }
        
        /// <remarks/>
        public void GetWPIProductsFilteredAsync(int serverId, string keywordId, object userState) {
            if ((this.GetWPIProductsFilteredOperationCompleted == null)) {
                this.GetWPIProductsFilteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWPIProductsFilteredOperationCompleted);
            }
            this.InvokeAsync("GetWPIProductsFiltered", new object[] {
                        serverId,
                        keywordId}, this.GetWPIProductsFilteredOperationCompleted, userState);
        }
        
        private void OnGetWPIProductsFilteredOperationCompleted(object arg) {
            if ((this.GetWPIProductsFilteredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWPIProductsFilteredCompleted(this, new GetWPIProductsFilteredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWPIProductById", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WPIProduct GetWPIProductById(int serverId, string productdId) {
            object[] results = this.Invoke("GetWPIProductById", new object[] {
                        serverId,
                        productdId});
            return ((WPIProduct)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWPIProductById(int serverId, string productdId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWPIProductById", new object[] {
                        serverId,
                        productdId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WPIProduct EndGetWPIProductById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WPIProduct)(results[0]));
        }
        
        /// <remarks/>
        public void GetWPIProductByIdAsync(int serverId, string productdId) {
            this.GetWPIProductByIdAsync(serverId, productdId, null);
        }
        
        /// <remarks/>
        public void GetWPIProductByIdAsync(int serverId, string productdId, object userState) {
            if ((this.GetWPIProductByIdOperationCompleted == null)) {
                this.GetWPIProductByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWPIProductByIdOperationCompleted);
            }
            this.InvokeAsync("GetWPIProductById", new object[] {
                        serverId,
                        productdId}, this.GetWPIProductByIdOperationCompleted, userState);
        }
        
        private void OnGetWPIProductByIdOperationCompleted(object arg) {
            if ((this.GetWPIProductByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWPIProductByIdCompleted(this, new GetWPIProductByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWPIProductsWithDependencies", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WPIProduct[] GetWPIProductsWithDependencies(int serverId, string[] products) {
            object[] results = this.Invoke("GetWPIProductsWithDependencies", new object[] {
                        serverId,
                        products});
            return ((WPIProduct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWPIProductsWithDependencies(int serverId, string[] products, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWPIProductsWithDependencies", new object[] {
                        serverId,
                        products}, callback, asyncState);
        }
        
        /// <remarks/>
        public WPIProduct[] EndGetWPIProductsWithDependencies(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WPIProduct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWPIProductsWithDependenciesAsync(int serverId, string[] products) {
            this.GetWPIProductsWithDependenciesAsync(serverId, products, null);
        }
        
        /// <remarks/>
        public void GetWPIProductsWithDependenciesAsync(int serverId, string[] products, object userState) {
            if ((this.GetWPIProductsWithDependenciesOperationCompleted == null)) {
                this.GetWPIProductsWithDependenciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWPIProductsWithDependenciesOperationCompleted);
            }
            this.InvokeAsync("GetWPIProductsWithDependencies", new object[] {
                        serverId,
                        products}, this.GetWPIProductsWithDependenciesOperationCompleted, userState);
        }
        
        private void OnGetWPIProductsWithDependenciesOperationCompleted(object arg) {
            if ((this.GetWPIProductsWithDependenciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWPIProductsWithDependenciesCompleted(this, new GetWPIProductsWithDependenciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallWPIProducts", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InstallWPIProducts(int serverId, string[] products) {
            this.Invoke("InstallWPIProducts", new object[] {
                        serverId,
                        products});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInstallWPIProducts(int serverId, string[] products, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InstallWPIProducts", new object[] {
                        serverId,
                        products}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInstallWPIProducts(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void InstallWPIProductsAsync(int serverId, string[] products) {
            this.InstallWPIProductsAsync(serverId, products, null);
        }
        
        /// <remarks/>
        public void InstallWPIProductsAsync(int serverId, string[] products, object userState) {
            if ((this.InstallWPIProductsOperationCompleted == null)) {
                this.InstallWPIProductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallWPIProductsOperationCompleted);
            }
            this.InvokeAsync("InstallWPIProducts", new object[] {
                        serverId,
                        products}, this.InstallWPIProductsOperationCompleted, userState);
        }
        
        private void OnInstallWPIProductsOperationCompleted(object arg) {
            if ((this.InstallWPIProductsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallWPIProductsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CancelInstallWPIProducts", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelInstallWPIProducts(int serviceId) {
            this.Invoke("CancelInstallWPIProducts", new object[] {
                        serviceId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelInstallWPIProducts(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelInstallWPIProducts", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCancelInstallWPIProducts(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CancelInstallWPIProductsAsync(int serviceId) {
            this.CancelInstallWPIProductsAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void CancelInstallWPIProductsAsync(int serviceId, object userState) {
            if ((this.CancelInstallWPIProductsOperationCompleted == null)) {
                this.CancelInstallWPIProductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInstallWPIProductsOperationCompleted);
            }
            this.InvokeAsync("CancelInstallWPIProducts", new object[] {
                        serviceId}, this.CancelInstallWPIProductsOperationCompleted, userState);
        }
        
        private void OnCancelInstallWPIProductsOperationCompleted(object arg) {
            if ((this.CancelInstallWPIProductsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInstallWPIProductsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWPIStatus", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWPIStatus(int serverId) {
            object[] results = this.Invoke("GetWPIStatus", new object[] {
                        serverId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWPIStatus(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWPIStatus", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetWPIStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWPIStatusAsync(int serverId) {
            this.GetWPIStatusAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetWPIStatusAsync(int serverId, object userState) {
            if ((this.GetWPIStatusOperationCompleted == null)) {
                this.GetWPIStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWPIStatusOperationCompleted);
            }
            this.InvokeAsync("GetWPIStatus", new object[] {
                        serverId}, this.GetWPIStatusOperationCompleted, userState);
        }
        
        private void OnGetWPIStatusOperationCompleted(object arg) {
            if ((this.GetWPIStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWPIStatusCompleted(this, new GetWPIStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/WpiGetLogFileDirectory", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WpiGetLogFileDirectory(int serverId) {
            object[] results = this.Invoke("WpiGetLogFileDirectory", new object[] {
                        serverId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWpiGetLogFileDirectory(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WpiGetLogFileDirectory", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndWpiGetLogFileDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WpiGetLogFileDirectoryAsync(int serverId) {
            this.WpiGetLogFileDirectoryAsync(serverId, null);
        }
        
        /// <remarks/>
        public void WpiGetLogFileDirectoryAsync(int serverId, object userState) {
            if ((this.WpiGetLogFileDirectoryOperationCompleted == null)) {
                this.WpiGetLogFileDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWpiGetLogFileDirectoryOperationCompleted);
            }
            this.InvokeAsync("WpiGetLogFileDirectory", new object[] {
                        serverId}, this.WpiGetLogFileDirectoryOperationCompleted, userState);
        }
        
        private void OnWpiGetLogFileDirectoryOperationCompleted(object arg) {
            if ((this.WpiGetLogFileDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WpiGetLogFileDirectoryCompleted(this, new WpiGetLogFileDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/WpiGetLogsInDirectory", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SettingPair[] WpiGetLogsInDirectory(int serverId, string Path) {
            object[] results = this.Invoke("WpiGetLogsInDirectory", new object[] {
                        serverId,
                        Path});
            return ((SettingPair[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWpiGetLogsInDirectory(int serverId, string Path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WpiGetLogsInDirectory", new object[] {
                        serverId,
                        Path}, callback, asyncState);
        }
        
        /// <remarks/>
        public SettingPair[] EndWpiGetLogsInDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SettingPair[])(results[0]));
        }
        
        /// <remarks/>
        public void WpiGetLogsInDirectoryAsync(int serverId, string Path) {
            this.WpiGetLogsInDirectoryAsync(serverId, Path, null);
        }
        
        /// <remarks/>
        public void WpiGetLogsInDirectoryAsync(int serverId, string Path, object userState) {
            if ((this.WpiGetLogsInDirectoryOperationCompleted == null)) {
                this.WpiGetLogsInDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWpiGetLogsInDirectoryOperationCompleted);
            }
            this.InvokeAsync("WpiGetLogsInDirectory", new object[] {
                        serverId,
                        Path}, this.WpiGetLogsInDirectoryOperationCompleted, userState);
        }
        
        private void OnWpiGetLogsInDirectoryOperationCompleted(object arg) {
            if ((this.WpiGetLogsInDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WpiGetLogsInDirectoryCompleted(this, new WpiGetLogsInDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOSServices", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OSService[] GetOSServices(int serverId) {
            object[] results = this.Invoke("GetOSServices", new object[] {
                        serverId});
            return ((OSService[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOSServices(int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOSServices", new object[] {
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OSService[] EndGetOSServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OSService[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOSServicesAsync(int serverId) {
            this.GetOSServicesAsync(serverId, null);
        }
        
        /// <remarks/>
        public void GetOSServicesAsync(int serverId, object userState) {
            if ((this.GetOSServicesOperationCompleted == null)) {
                this.GetOSServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOSServicesOperationCompleted);
            }
            this.InvokeAsync("GetOSServices", new object[] {
                        serverId}, this.GetOSServicesOperationCompleted, userState);
        }
        
        private void OnGetOSServicesOperationCompleted(object arg) {
            if ((this.GetOSServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOSServicesCompleted(this, new GetOSServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeOSServiceStatusCompletedEventHandler(object sender, ChangeOSServiceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeOSServiceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeOSServiceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLogNamesCompletedEventHandler(object sender, GetLogNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLogEntriesCompletedEventHandler(object sender, GetLogEntriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemLogEntry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemLogEntry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLogEntriesPagedCompletedEventHandler(object sender, GetLogEntriesPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogEntriesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogEntriesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemLogEntriesPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemLogEntriesPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ClearLogCompletedEventHandler(object sender, ClearLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RebootSystemCompletedEventHandler(object sender, RebootSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RebootSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RebootSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMemoryPackageIdCompletedEventHandler(object sender, GetMemoryPackageIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMemoryPackageIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMemoryPackageIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Memory Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Memory)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMemoryCompletedEventHandler(object sender, GetMemoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMemoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMemoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Memory Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Memory)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAllServersCompletedEventHandler(object sender, GetAllServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawAllServersCompletedEventHandler(object sender, GetRawAllServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawAllServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawAllServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServersCompletedEventHandler(object sender, GetServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawServersCompletedEventHandler(object sender, GetRawServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServerShortDetailsCompletedEventHandler(object sender, GetServerShortDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerShortDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerShortDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServerByIdCompletedEventHandler(object sender, GetServerByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServerByNameCompletedEventHandler(object sender, GetServerByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckServerAvailableCompletedEventHandler(object sender, CheckServerAvailableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckServerAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckServerAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddServerCompletedEventHandler(object sender, AddServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateServerCompletedEventHandler(object sender, UpdateServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateServerConnectionPasswordCompletedEventHandler(object sender, UpdateServerConnectionPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServerConnectionPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServerConnectionPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateServerADPasswordCompletedEventHandler(object sender, UpdateServerADPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServerADPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServerADPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteServerCompletedEventHandler(object sender, DeleteServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AutoUpdateServerCompletedEventHandler(object sender, AutoUpdateServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AutoUpdateServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AutoUpdateServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVirtualServersCompletedEventHandler(object sender, GetVirtualServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVirtualServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableVirtualServicesCompletedEventHandler(object sender, GetAvailableVirtualServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableVirtualServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableVirtualServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVirtualServicesCompletedEventHandler(object sender, GetVirtualServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVirtualServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddVirtualServicesCompletedEventHandler(object sender, AddVirtualServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddVirtualServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddVirtualServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteVirtualServicesCompletedEventHandler(object sender, DeleteVirtualServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteVirtualServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteVirtualServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateVirtualGroupsCompletedEventHandler(object sender, UpdateVirtualGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVirtualGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVirtualGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawServicesByServerIdCompletedEventHandler(object sender, GetRawServicesByServerIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawServicesByServerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawServicesByServerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServicesByServerIdCompletedEventHandler(object sender, GetServicesByServerIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesByServerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesByServerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServicesByServerIdGroupNameCompletedEventHandler(object sender, GetServicesByServerIdGroupNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesByServerIdGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesByServerIdGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawServicesByGroupIdCompletedEventHandler(object sender, GetRawServicesByGroupIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawServicesByGroupIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawServicesByGroupIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawServicesByGroupNameCompletedEventHandler(object sender, GetRawServicesByGroupNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawServicesByGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawServicesByGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServiceInfoCompletedEventHandler(object sender, GetServiceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddServiceCompletedEventHandler(object sender, AddServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateServiceCompletedEventHandler(object sender, UpdateServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteServiceCompletedEventHandler(object sender, DeleteServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServiceSettingsCompletedEventHandler(object sender, GetServiceSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServiceSettingsRDSCompletedEventHandler(object sender, GetServiceSettingsRDSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceSettingsRDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceSettingsRDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateServiceSettingsCompletedEventHandler(object sender, UpdateServiceSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallServiceCompletedEventHandler(object sender, InstallServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetProviderServiceQuotaCompletedEventHandler(object sender, GetProviderServiceQuotaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProviderServiceQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProviderServiceQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QuotaInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QuotaInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMailServiceSettingsByPackageCompletedEventHandler(object sender, GetMailServiceSettingsByPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailServiceSettingsByPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailServiceSettingsByPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetInstalledProvidersCompletedEventHandler(object sender, GetInstalledProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstalledProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstalledProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetResourceGroupsCompletedEventHandler(object sender, GetResourceGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourceGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResourceGroupInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResourceGroupInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetResourceGroupCompletedEventHandler(object sender, GetResourceGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResourceGroupInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResourceGroupInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetProviderCompletedEventHandler(object sender, GetProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetProvidersCompletedEventHandler(object sender, GetProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetProvidersByGroupIdCompletedEventHandler(object sender, GetProvidersByGroupIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProvidersByGroupIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProvidersByGroupIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageServiceProviderCompletedEventHandler(object sender, GetPackageServiceProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageServiceProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageServiceProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMailFilterUrlCompletedEventHandler(object sender, GetMailFilterUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailFilterUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailFilterUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMailFilterUrlByHostingPlanCompletedEventHandler(object sender, GetMailFilterUrlByHostingPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailFilterUrlByHostingPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailFilterUrlByHostingPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsInstalledCompletedEventHandler(object sender, IsInstalledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsInstalledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsInstalledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BoolResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BoolResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServerVersionCompletedEventHandler(object sender, GetServerVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServerFilePathCompletedEventHandler(object sender, GetServerFilePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerFilePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerFilePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPrivateNetworVLANsPagedCompletedEventHandler(object sender, GetPrivateNetworVLANsPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivateNetworVLANsPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivateNetworVLANsPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VLANsPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VLANsPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPrivateNetworkVLANCompletedEventHandler(object sender, AddPrivateNetworkVLANCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPrivateNetworkVLANCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPrivateNetworkVLANCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IntResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IntResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeletePrivateNetworkVLANsCompletedEventHandler(object sender, DeletePrivateNetworkVLANsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePrivateNetworkVLANsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePrivateNetworkVLANsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPrivateNetworkVLANsRangeCompletedEventHandler(object sender, AddPrivateNetworkVLANsRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPrivateNetworkVLANsRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPrivateNetworkVLANsRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPrivateNetworVLANCompletedEventHandler(object sender, GetPrivateNetworVLANCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivateNetworVLANCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivateNetworVLANCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VLANInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VLANInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdatePrivateNetworVLANCompletedEventHandler(object sender, UpdatePrivateNetworVLANCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePrivateNetworVLANCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePrivateNetworVLANCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackagePrivateNetworkVLANsCompletedEventHandler(object sender, GetPackagePrivateNetworkVLANsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagePrivateNetworkVLANsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagePrivateNetworkVLANsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageVLANsPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageVLANsPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeallocatePackageVLANsCompletedEventHandler(object sender, DeallocatePackageVLANsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeallocatePackageVLANsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeallocatePackageVLANsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUnallottedVLANsCompletedEventHandler(object sender, GetUnallottedVLANsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnallottedVLANsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnallottedVLANsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VLANInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VLANInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AllocatePackageVLANsCompletedEventHandler(object sender, AllocatePackageVLANsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllocatePackageVLANsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllocatePackageVLANsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetIPAddressesCompletedEventHandler(object sender, GetIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IPAddressInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IPAddressInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetIPAddressesPagedCompletedEventHandler(object sender, GetIPAddressesPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIPAddressesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIPAddressesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IPAddressesPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IPAddressesPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetIPAddressCompletedEventHandler(object sender, GetIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IPAddressInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IPAddressInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddIPAddressCompletedEventHandler(object sender, AddIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IntResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IntResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddIPAddressesRangeCompletedEventHandler(object sender, AddIPAddressesRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIPAddressesRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIPAddressesRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateIPAddressCompletedEventHandler(object sender, UpdateIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateIPAddressesCompletedEventHandler(object sender, UpdateIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteIPAddressCompletedEventHandler(object sender, DeleteIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteIPAddressesCompletedEventHandler(object sender, DeleteIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUnallottedIPAddressesCompletedEventHandler(object sender, GetUnallottedIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnallottedIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnallottedIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IPAddressInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IPAddressInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageIPAddressesCompletedEventHandler(object sender, GetPackageIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageIPAddressesPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageIPAddressesPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageIPAddressesCountCompletedEventHandler(object sender, GetPackageIPAddressesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageIPAddressesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageIPAddressesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageUnassignedIPAddressesCompletedEventHandler(object sender, GetPackageUnassignedIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageUnassignedIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageUnassignedIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageIPAddress[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageIPAddress[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AllocatePackageIPAddressesCompletedEventHandler(object sender, AllocatePackageIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllocatePackageIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllocatePackageIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AllocateMaximumPackageIPAddressesCompletedEventHandler(object sender, AllocateMaximumPackageIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllocateMaximumPackageIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllocateMaximumPackageIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeallocatePackageIPAddressesCompletedEventHandler(object sender, DeallocatePackageIPAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeallocatePackageIPAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeallocatePackageIPAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetClustersCompletedEventHandler(object sender, GetClustersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClustersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClustersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClusterInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClusterInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddClusterCompletedEventHandler(object sender, AddClusterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddClusterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddClusterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteClusterCompletedEventHandler(object sender, DeleteClusterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteClusterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteClusterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawDnsRecordsByServiceCompletedEventHandler(object sender, GetRawDnsRecordsByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawDnsRecordsByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawDnsRecordsByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawDnsRecordsByServerCompletedEventHandler(object sender, GetRawDnsRecordsByServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawDnsRecordsByServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawDnsRecordsByServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawDnsRecordsByPackageCompletedEventHandler(object sender, GetRawDnsRecordsByPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawDnsRecordsByPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawDnsRecordsByPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawDnsRecordsByGroupCompletedEventHandler(object sender, GetRawDnsRecordsByGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawDnsRecordsByGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawDnsRecordsByGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDnsRecordsByServiceCompletedEventHandler(object sender, GetDnsRecordsByServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDnsRecordsByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDnsRecordsByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GlobalDnsRecord[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDnsRecordsByServerCompletedEventHandler(object sender, GetDnsRecordsByServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDnsRecordsByServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDnsRecordsByServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GlobalDnsRecord[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDnsRecordsByPackageCompletedEventHandler(object sender, GetDnsRecordsByPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDnsRecordsByPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDnsRecordsByPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GlobalDnsRecord[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDnsRecordsByGroupCompletedEventHandler(object sender, GetDnsRecordsByGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDnsRecordsByGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDnsRecordsByGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GlobalDnsRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GlobalDnsRecord[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDnsRecordCompletedEventHandler(object sender, GetDnsRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDnsRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDnsRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GlobalDnsRecord Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GlobalDnsRecord)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddDnsRecordCompletedEventHandler(object sender, AddDnsRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDnsRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDnsRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateDnsRecordCompletedEventHandler(object sender, UpdateDnsRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDnsRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDnsRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteDnsRecordCompletedEventHandler(object sender, DeleteDnsRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDnsRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDnsRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDomainDnsRecordsCompletedEventHandler(object sender, GetDomainDnsRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainDnsRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainDnsRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DnsRecordInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DnsRecordInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDomainsCompletedEventHandler(object sender, GetDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DomainInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDomainsByDomainIdCompletedEventHandler(object sender, GetDomainsByDomainIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainsByDomainIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainsByDomainIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DomainInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMyDomainsCompletedEventHandler(object sender, GetMyDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DomainInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetResellerDomainsCompletedEventHandler(object sender, GetResellerDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResellerDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResellerDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DomainInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDomainsPagedCompletedEventHandler(object sender, GetDomainsPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainsPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainsPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDomainCompletedEventHandler(object sender, GetDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DomainInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddDomainCompletedEventHandler(object sender, AddDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddDomainWithProvisioningCompletedEventHandler(object sender, AddDomainWithProvisioningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDomainWithProvisioningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDomainWithProvisioningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateDomainCompletedEventHandler(object sender, UpdateDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteDomainCompletedEventHandler(object sender, DeleteDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DetachDomainCompletedEventHandler(object sender, DetachDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DetachDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DetachDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnableDomainDnsCompletedEventHandler(object sender, EnableDomainDnsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableDomainDnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnableDomainDnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DisableDomainDnsCompletedEventHandler(object sender, DisableDomainDnsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableDomainDnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisableDomainDnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateDomainPreviewDomainCompletedEventHandler(object sender, CreateDomainPreviewDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDomainPreviewDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDomainPreviewDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteDomainPreviewDomainCompletedEventHandler(object sender, DeleteDomainPreviewDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDomainPreviewDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDomainPreviewDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDnsZoneRecordsCompletedEventHandler(object sender, GetDnsZoneRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDnsZoneRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDnsZoneRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DnsRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DnsRecord[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawDnsZoneRecordsCompletedEventHandler(object sender, GetRawDnsZoneRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawDnsZoneRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawDnsZoneRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddDnsZoneRecordCompletedEventHandler(object sender, AddDnsZoneRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDnsZoneRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDnsZoneRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateDnsZoneRecordCompletedEventHandler(object sender, UpdateDnsZoneRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDnsZoneRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDnsZoneRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteDnsZoneRecordCompletedEventHandler(object sender, DeleteDnsZoneRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDnsZoneRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDnsZoneRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTerminalServicesSessionsCompletedEventHandler(object sender, GetTerminalServicesSessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminalServicesSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminalServicesSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TerminalSession[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminalSession[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CloseTerminalServicesSessionCompletedEventHandler(object sender, CloseTerminalServicesSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseTerminalServicesSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseTerminalServicesSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetOSProcessesCompletedEventHandler(object sender, GetOSProcessesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOSProcessesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOSProcessesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OSProcess[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OSProcess[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TerminateOSProcessCompletedEventHandler(object sender, TerminateOSProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TerminateOSProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TerminateOSProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckLoadUserProfileCompletedEventHandler(object sender, CheckLoadUserProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoadUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckLoadUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnableLoadUserProfileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InitWPIFeedsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWPITabsCompletedEventHandler(object sender, GetWPITabsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWPITabsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWPITabsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WPITab[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WPITab[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWPIKeywordsCompletedEventHandler(object sender, GetWPIKeywordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWPIKeywordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWPIKeywordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WPIKeyword[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WPIKeyword[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWPIProductsCompletedEventHandler(object sender, GetWPIProductsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWPIProductsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWPIProductsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WPIProduct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WPIProduct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWPIProductsFilteredCompletedEventHandler(object sender, GetWPIProductsFilteredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWPIProductsFilteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWPIProductsFilteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WPIProduct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WPIProduct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWPIProductByIdCompletedEventHandler(object sender, GetWPIProductByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWPIProductByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWPIProductByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WPIProduct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WPIProduct)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWPIProductsWithDependenciesCompletedEventHandler(object sender, GetWPIProductsWithDependenciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWPIProductsWithDependenciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWPIProductsWithDependenciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WPIProduct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WPIProduct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallWPIProductsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelInstallWPIProductsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWPIStatusCompletedEventHandler(object sender, GetWPIStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWPIStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWPIStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void WpiGetLogFileDirectoryCompletedEventHandler(object sender, WpiGetLogFileDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WpiGetLogFileDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WpiGetLogFileDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void WpiGetLogsInDirectoryCompletedEventHandler(object sender, WpiGetLogsInDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WpiGetLogsInDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WpiGetLogsInDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SettingPair[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SettingPair[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetOSServicesCompletedEventHandler(object sender, GetOSServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOSServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOSServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OSService[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OSService[])(this.results[0]));
            }
        }
    }
}
