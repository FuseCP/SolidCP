#pragma checksum "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "29f7302dd51d3eeccbf17238c75b889d6e71f214"
// <auto-generated/>
#pragma warning disable 1591
namespace SolidCP.Build
{
    #line hidden
#nullable restore
#line 2 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
using Microsoft.CodeAnalysis;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
using Microsoft.CodeAnalysis.CSharp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
using Microsoft.CodeAnalysis.CSharp.Syntax;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

#line default
#line hidden
#nullable disable
    #nullable restore
    internal partial class ClientAssemblyClass : RazorBlade.PlainTextTemplate
    #nullable disable
    {
        #pragma warning disable 1998
        protected async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("// wcf client assembly proxy class\r\n");
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
            WriteLiteral("\r\n[System.CodeDom.Compiler.GeneratedCodeAttribute(\"SolidCP.Build\", \"1.0\")]\r\npublic class ");
#nullable restore
#line (14,16)-(14,32) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(Class.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral("AssemblyClient: SolidCP.Web.Client.ClientAssemblyBase, I");
#nullable restore
#line (14,91)-(14,107) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(Class.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral(" {\r\n\r\n");
#nullable restore
#line 16 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
     foreach (var method in WebMethods
       .Select(m => new
       {
           Method = m,
           Normal = (MemberDeclarationSyntax)MethodDeclaration(m.ReturnType, m.Identifier)
                   .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
                   .WithParameterList(m.ParameterList),
           Async = (MemberDeclarationSyntax)MethodDeclaration(ParseTypeName(
                           (m.ReturnType is PredefinedTypeSyntax && ((PredefinedTypeSyntax)m.ReturnType).Keyword.IsKind(SyntaxKind.VoidKeyword)) ?
                           "System.Threading.Tasks.Task" : $"System.Threading.Tasks.Task<{m.ReturnType}>"),
                           $"{m.Identifier}Async")
                       .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.AsyncKeyword)))
                       .WithParameterList(m.ParameterList),
           IsVoid = (m.ReturnType is PredefinedTypeSyntax && ((PredefinedTypeSyntax)m.ReturnType).Keyword.IsKind(SyntaxKind.VoidKeyword)),
           IsRefPar = (m.ParameterList.Parameters.Any(p => p.Modifiers.Any()))
       }))
{
    var returnTypeIsList = !method.IsVoid && method.Method.ReturnType is ArrayTypeSyntax array && array.HasTrailingTrivia && array.GetTrailingTrivia().Any(tr => tr.ToString() == "/*List*/");
    var elementType = returnTypeIsList ? ((ArrayTypeSyntax)method.Method.ReturnType).ElementType : null;
    

#line default
#line hidden
#nullable disable
#nullable restore
#line (35,6)-(35,41) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.Normal.NormalizeWhitespace());

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n     {");
#nullable restore
#line 38 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
         if (method.IsRefPar)
        {
            

#line default
#line hidden
#nullable disable
            WriteLiteral("var _params = new object[] { ");
#nullable restore
#line 40 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                      
            int n = 0;
            foreach (var par in method.Method.ParameterList.Parameters)
            {
                if (n++ > 0)
                {
                    

#line default
#line hidden
#nullable disable
            WriteLiteral(", ");
#nullable restore
#line 46 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                   
                }
                if (par.Type is ArrayTypeSyntax parray && parray.HasTrailingTrivia && parray.GetTrailingTrivia().Any(tr => tr.ToString() == "/*List*/"))
                {
                    

#line default
#line hidden
#nullable disable
#nullable restore
#line (50,29)-(50,125) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Modifiers.Any(m => m.IsKind(SyntaxKind.OutKeyword)) ? "null" :  $"{par.Identifier}.ToList()");

#line default
#line hidden
#nullable disable
#nullable restore
#line 50 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                                                                                                    
                }
                else
                {
                

#line default
#line hidden
#nullable disable
#nullable restore
#line (54,25)-(54,106) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Modifiers.Any(m => m.IsKind(SyntaxKind.OutKeyword)) ? "null" : par.Identifier);

#line default
#line hidden
#nullable disable
#nullable restore
#line 54 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                                                                                 
                }
            }
            

#line default
#line hidden
#nullable disable
            WriteLiteral("};");
#nullable restore
#line (58,15)-(58,141) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.IsVoid ? "Invoke(" : $"var _result = Invoke<{method.Method.ReturnType}{(returnTypeIsList ? $", {elementType}" : "")}>(");

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
#nullable restore
#line (58,151)-(58,163) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(OldNamespace);

#line default
#line hidden
#nullable disable
            WriteLiteral(".");
#nullable restore
#line (58,167)-(58,183) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(Class.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral("\", \"");
#nullable restore
#line (58,189)-(58,213) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.Method.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral("\", _params);");
#nullable restore
#line 58 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                                                                                                                                                                                                       

            n = 0;
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 61 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
             foreach (var par in method.Method.ParameterList.Parameters)
            {
                if (par.Modifiers.Any())
                {
                    if (par.Type is ArrayTypeSyntax parray && parray.HasTrailingTrivia && parray.GetTrailingTrivia().Any(tr => tr.ToString() == "/*List*/"))
                    {
                        var parElementType = ((ArrayTypeSyntax)par.Type).ElementType;
                        

#line default
#line hidden
#nullable disable
#nullable restore
#line (68,27)-(68,41) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral(" = ((IEnumerable<");
#nullable restore
#line (68,67)-(68,81) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(parElementType);

#line default
#line hidden
#nullable disable
            WriteLiteral(">)_params[");
#nullable restore
#line (68,93)-(68,94) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(n);

#line default
#line hidden
#nullable disable
            WriteLiteral("]).ToArray();");
#nullable restore
#line 68 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                                                                                 
                    }
                    else
                    {
                    

#line default
#line hidden
#nullable disable
#nullable restore
#line (72,23)-(72,37) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral(" = (");
#nullable restore
#line (74,32)-(74,40) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral(")_params[");
#nullable restore
#line (74,50)-(74,51) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(n);

#line default
#line hidden
#nullable disable
            WriteLiteral("];");
#nullable restore
#line 74 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                           
                }
                n++;
            }
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 78 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
         
            if (!method.IsVoid)
            {
                

#line default
#line hidden
#nullable disable
            WriteLiteral("return _result;");
#nullable restore
#line 81 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                            
            }
        }
        else
        {

            

#line default
#line hidden
#nullable disable
#nullable restore
#line (87,15)-(87,134) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.IsVoid ? "Invoke(" : $"return Invoke<{method.Method.ReturnType}{(returnTypeIsList ? $", {elementType}" : "")}>(");

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
#nullable restore
#line (87,144)-(87,156) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(OldNamespace);

#line default
#line hidden
#nullable disable
            WriteLiteral(".");
#nullable restore
#line (87,160)-(87,176) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(Class.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral("\", \"");
#nullable restore
#line (87,182)-(87,206) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.Method.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
#nullable restore
#line 87 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                                                                                                                                                                                     
          
            foreach (var par in method.Method.ParameterList.Parameters)
            {
                if (par.Type is ArrayTypeSyntax parray && parray.HasTrailingTrivia && parray.GetTrailingTrivia().Any(tr => tr.ToString() == "/*List*/"))
                {
                    

#line default
#line hidden
#nullable disable
            WriteLiteral(", ");
#nullable restore
#line (93,31)-(93,45) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral(".ToList()");
#nullable restore
#line 93 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                             
                }
                else
                {
                    

#line default
#line hidden
#nullable disable
            WriteLiteral(", ");
#nullable restore
#line (97,30)-(97,44) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Identifier);

#line default
#line hidden
#nullable disable
#nullable restore
#line 97 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                                  
                }
            }

            

#line default
#line hidden
#nullable disable
            WriteLiteral(");");
#nullable restore
#line 101 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                           
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("}");
#nullable restore
#line 105 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
     if (!method.IsRefPar)
    {
        

#line default
#line hidden
#nullable disable
#nullable restore
#line (107,10)-(107,44) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.Async.NormalizeWhitespace());

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            {\r\n            ");
#nullable restore
#line (110,15)-(110,57) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.IsVoid ? "await " : "return await ");

#line default
#line hidden
#nullable disable
            WriteLiteral("InvokeAsync");
#nullable restore
#line (110,71)-(110,169) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.IsVoid ? "" : $"<{method.Method.ReturnType}{(returnTypeIsList ? $", {elementType}" : "")}>");

#line default
#line hidden
#nullable disable
            WriteLiteral("(\"");
#nullable restore
#line (110,174)-(110,186) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(OldNamespace);

#line default
#line hidden
#nullable disable
            WriteLiteral(".");
#nullable restore
#line (110,190)-(110,206) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(Class.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral("\", \"");
#nullable restore
#line (110,212)-(110,236) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(method.Method.Identifier);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"\r\n         ");
#nullable restore
#line 113 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
          foreach (var par in method.Method.ParameterList.Parameters)
         {
            

#line default
#line hidden
#nullable disable
            WriteLiteral(", ");
#nullable restore
#line (115,22)-(115,36) 6 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
Write(par.Identifier);

#line default
#line hidden
#nullable disable
#nullable restore
#line 115 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                                          
         }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n          );\r\n          }\r\n          ");
#nullable restore
#line 120 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
                 
    } else {
        

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n            // No async method since asnyc methods cannot contain ref, in or out parameters.\r\n\r\n        ");
#nullable restore
#line 126 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
               
    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 127 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
     
}

#line default
#line hidden
#nullable disable
            WriteLiteral("}\r\n");
        }
        #pragma warning restore 1998
#nullable restore
#line 131 "c:\GitHub\SolidCP\SolidCP\Sources\SolidCP.Build\ClientAssemblyClass.cshtml"
 
    public string OldNamespace { get; set; }
    public ClassDeclarationSyntax Class { get; set; }
    public IEnumerable<MethodDeclarationSyntax> WebMethods { get; set; }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
