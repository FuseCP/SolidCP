 // wcf client contract
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using System.Collections.Generic;
@using System.Linq;
@using System;

@using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory

@namespace SolidCP.Build
@inherits RazorBlade.PlainTextTemplate

@(HasPolicyAttribute?.ToString() ?? "")
@(HasSoapHeader ? "[SolidCP.Providers.SoapHeader]" : "")
[System.CodeDom.Compiler.GeneratedCodeAttribute("SolidCP.Build", "1.0")]
[ServiceKnownType("GetKnownTypes", typeof(SolidCP.Providers.GlobalKnownTypes))]
[ServiceContract(ConfigurationName="I@(Class.Identifier)", Namespace="@(WebServiceNamespace)")]
public interface I@(Class.Identifier) {

@foreach (var method in Methods)
{
	@method.Item1.NormalizeWhitespace()

	@(method.Item2 != null ? method.Item2.NormalizeWhitespace() : "\n\n// No async method, because method has ref, in or out parameters.\n\n")
}

}

@functions
{
	public bool HasSoapHeader { get; set; }
	public AttributeListSyntax HasPolicyAttribute { get; set; }
	public string WebServiceNamespace { get; set; }
	public ClassDeclarationSyntax Class { get; set; }
	public IEnumerable<MethodDeclarationSyntax> WebMethods { get; set; }
	public IEnumerable<Tuple<MethodDeclarationSyntax, MethodDeclarationSyntax>> Methods => WebMethods
		.Select(m => new
		{
			Method = m,
			IsVoid = (m.ReturnType is PredefinedTypeSyntax && ((PredefinedTypeSyntax)m.ReturnType).Keyword.IsKind(SyntaxKind.VoidKeyword)),
			IsRefPar = (m.ParameterList.Parameters.Any(p => p.Modifiers.Any(
				m => m.IsKind(SyntaxKind.OutKeyword) || m.IsKind(SyntaxKind.RefKeyword)))),
			WithTokens = new Func<MethodDeclarationSyntax, MethodDeclarationSyntax>(method => method
					.WithAttributeLists(List(m.AttributeLists
						.Append(AttributeList(SingletonSeparatedList(Attribute(IdentifierName("OperationContract"),
							ParseAttributeArgumentList($"(Action = \"{WebServiceNamespace}I{Class.Identifier}/{m.Identifier}\", ReplyAction = \"{WebServiceNamespace}I{Class.Identifier}/{m.Identifier}Response\")")))))))
					.WithParameterList(m.ParameterList)
					.WithSemicolonToken(Token(SyntaxKind.SemicolonToken)))
		})
		.Select(m => new Tuple<MethodDeclarationSyntax, MethodDeclarationSyntax>
		(
			m.WithTokens(MethodDeclaration(m.Method.ReturnType, m.Method.Identifier)),
			m.IsRefPar ? null : m.WithTokens(MethodDeclaration(ParseTypeName((m.IsVoid) ? "System.Threading.Tasks.Task" : $"System.Threading.Tasks.Task<{m.Method.ReturnType}>"), $"{m.Method.Identifier}Async"))
		));
}