// wcf client assembly proxy class
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using System.Collections.Generic;
@using System.Linq;

@using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory

@namespace SolidCP.Build
@inherits RazorBlade.PlainTextTemplate

[System.CodeDom.Compiler.GeneratedCodeAttribute("SolidCP.Build", "1.0")]
public class @(Class.Identifier)AssemblyClient: SolidCP.Web.Client.ClientAssemblyBase, I@(Class.Identifier) {

@foreach (var method in WebMethods
           .Select(m => new
           {
               Method = m,
               Normal = (MemberDeclarationSyntax)MethodDeclaration(m.ReturnType, m.Identifier)
                       .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
                       .WithParameterList(m.ParameterList),
               Async = (MemberDeclarationSyntax)MethodDeclaration(ParseTypeName(
                               (m.ReturnType is PredefinedTypeSyntax && ((PredefinedTypeSyntax)m.ReturnType).Keyword.IsKind(SyntaxKind.VoidKeyword)) ?
                               "System.Threading.Tasks.Task" : $"System.Threading.Tasks.Task<{m.ReturnType}>"),
                               $"{m.Identifier}Async")
                           .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.AsyncKeyword)))
                           .WithParameterList(m.ParameterList),
               IsVoid = (m.ReturnType is PredefinedTypeSyntax && ((PredefinedTypeSyntax)m.ReturnType).Keyword.IsKind(SyntaxKind.VoidKeyword))
           }))
{
    var returnTypeIsList = !method.IsVoid && method.Method.ReturnType is ArrayTypeSyntax array && array.HasTrailingTrivia && array.GetTrailingTrivia().Any(tr => tr.ToString() == "/*List*/");
    var elementType = returnTypeIsList ? ((ArrayTypeSyntax)method.Method.ReturnType).ElementType : null;
    @method.Normal.NormalizeWhitespace()
    <text>
        {
        @(method.IsVoid ? "Invoke(" : $"return Invoke<{method.Method.ReturnType}{(returnTypeIsList ? $", {elementType}" : "")}>(")"@(OldNamespace).@(Class.Identifier)", "@method.Method.Identifier"
    </text>
    foreach (var par in method.Method.ParameterList.Parameters)
    {
        if (par.Type is ArrayTypeSyntax parray && parray.HasTrailingTrivia && parray.GetTrailingTrivia().Any(tr => tr.ToString() == "/*List*/"))
        {
            <text>, @(par.Identifier).ToList()</text>
        }
        else
        {
            <text>, @par.Identifier</text>
        }

    }

    <text>);
        }</text>

    @method.Async.NormalizeWhitespace()
    <text>
        {
        @(method.IsVoid ? "await " : "return await ")InvokeAsync@(method.IsVoid ? "" : $"<{method.Method.ReturnType}{(returnTypeIsList ? $", {elementType}" : "")}>")("@(OldNamespace).@(Class.Identifier)", "@method.Method.Identifier"
    </text>

    foreach (var par in method.Method.ParameterList.Parameters)
    {
        <text>, @par.Identifier</text>
    }
    <text>);
        }</text>

    }
}

@functions
{
    public string OldNamespace { get; set; }
    public ClassDeclarationSyntax Class { get; set; }
    public IEnumerable<MethodDeclarationSyntax> WebMethods { get; set; }
}
