// wcf client proxy class
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using System.Text.RegularExpressions
@using System.Collections.Generic
@using System.Linq

@using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory

@namespace SolidCP.Build
@inherits RazorBlade.PlainTextTemplate

[System.CodeDom.Compiler.GeneratedCodeAttribute("SolidCP.Build", "1.0")]
public class @(Class.Identifier): SolidCP.Web.Clients.ClientBase<I@(Class.Identifier), @(Class.Identifier)AssemblyClient>, I@(Class.Identifier) {

	@foreach (var method in WebMethods
		.Select(m => new {
			Method = m,
			Normal = (MemberDeclarationSyntax)MethodDeclaration(m.ReturnType, m.Identifier)
					.WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
					.WithParameterList(m.ParameterList),
			Async = (MemberDeclarationSyntax)MethodDeclaration(ParseTypeName(
						(m.ReturnType is PredefinedTypeSyntax && ((PredefinedTypeSyntax)m.ReturnType).Keyword.IsKind(SyntaxKind.VoidKeyword)) ? 
						"System.Threading.Tasks.Task" : $"System.Threading.Tasks.Task<{m.ReturnType}>"),
						$"{m.Identifier}Async")
					.WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.AsyncKeyword)))
					.WithParameterList(m.ParameterList),
			IsVoid = (m.ReturnType is PredefinedTypeSyntax && ((PredefinedTypeSyntax)m.ReturnType).Keyword.IsKind(SyntaxKind.VoidKeyword)),
			IsRefPar = (m.ParameterList.Parameters.Any(p => p.Modifiers.Any(
				m => m.IsKind(SyntaxKind.OutKeyword) || m.IsKind(SyntaxKind.RefKeyword)))),
			HasSoapHeader = m.AttributeLists
				.SelectMany(at => at.Attributes)
				.Any(at => Regex.IsMatch(at.Name.ToString(), "(?:(?:SolidCP.)?Providers.)?SoapHeader(?:Attribute)?"))
		}))
	{
		@method.Normal.NormalizeWhitespace()
		<text>
		{
			@if (method.HasSoapHeader)
			{
				<text>base.CheckSoapHeader(nameof(@method.Method.Identifier));</text>
			}
			@(method.IsVoid ? "" : $"return ")base.Client.@(method.Method.Identifier)(
		</text>

		var first = true;
		foreach (var par in method.Method.ParameterList.Parameters)
		{
			if (!first) {
				<text>, </text>
			} else { first = false; }
			<text>@(par.Modifiers.Any(m =>
					m.IsKind(SyntaxKind.OutKeyword) || m.IsKind(SyntaxKind.RefKeyword)) ?
				$"{par.Modifiers} " : "")@(par.Identifier)</text>
		}

		<text>);
			}</text>

		if (!method.IsRefPar)
		{
			@method.Async.NormalizeWhitespace()
			<text>
			{
				@if (method.HasSoapHeader)
				{
					<text>base.CheckSoapHeader(nameof(@method.Method.Identifier));</text>
				}
				@(method.IsVoid ? "await " : $"return await ")base.Client.@(method.Method.Identifier)Async(
			</text>

			first = true;
			foreach (var par in method.Method.ParameterList.Parameters)
			{
				if (!first)
				{
					<text>, </text>
				}
				else { first = false; }
				<text>@par.Identifier</text>
			}

			<text>).ConfigureAwait(true);
				}</text>
		} else {
			<text>
				
			//No async method, because the method has ref, in or out parameters.

			</text>
		}
	}
}
@functions
 {
	public ClassDeclarationSyntax Class { get; set; }
	public IEnumerable<MethodDeclarationSyntax> WebMethods { get; set; }
}