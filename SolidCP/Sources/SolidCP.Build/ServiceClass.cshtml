// wcf service
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using System.Collections.Generic;
@using System.Linq;
@using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory

@namespace SolidCP.Build
@inherits RazorBlade.PlainTextTemplate

[System.CodeDom.Compiler.GeneratedCodeAttribute("SolidCP.Build", "1.0")]
#if NETFRAMEWORK
[System.ServiceModel.Activation.AspNetCompatibilityRequirements(RequirementsMode = System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed)]
#endif
public class @(Class.Identifier): @(OldNamespace).@Class.Identifier, I@(Class.Identifier) {

	@if (WebServices.EmitOpenApiTypes)
	{
		@foreach (MethodDeclarationSyntax method in WebMethods)
		{
			var argumentList = ArgumentList(
				SeparatedList<ArgumentSyntax>(method.ParameterList.Parameters
					.Select(par => new
					{
						Argument = Argument(IdentifierName(par.Identifier)),
						Parameter = par
					})
					.Select(par =>
					{
						var arg = par.Argument;
						return par.Parameter.Modifiers.Select(mod => arg = arg.WithRefKindKeyword(mod)).LastOrDefault() ?? arg;
					})));

			var callStatement = method.Modifiers.Any(mod => mod.IsKind(SyntaxKind.AsyncKeyword)) ?
				(method.ReturnType is GenericNameSyntax ? "return await " : "await ") :
				(method.ReturnType is PredefinedTypeSyntax pre && pre.Keyword.IsKind(SyntaxKind.VoidKeyword) ? "" : "return ");

			var hasSwaggerReturnTypeAttribute = method.AttributeLists.Any(al => al.Attributes.Any(at => at.Name.ToString().EndsWith("SwaggerWcfReturnType")));
			var hasOpenApiReturnTypeAttribute = method.AttributeLists.Any(al => al.Attributes.Any(at => at.Name.ToString().EndsWith("OpenApiResponse")));

		<text>
#if NETFRAMEWORK@(hasSwaggerReturnTypeAttribute ? "" : $"\n[SwaggerWcfReturnType(typeof({method.ReturnType}))]")
#else@(hasOpenApiReturnTypeAttribute ? "" : $"\n[OpenApiResponse(Type=typeof({method.ReturnType}), StatusCode = System.Net.HttpStatusCode.OK)]")
#endif	
				@(method.AttributeLists)
				@(method.Modifiers) new @(method.ReturnType) @(method.Identifier)@(method.ParameterList) {
				@(callStatement)base.@(method.Identifier)@(argumentList)@(";")
				}	
			</text>
		}
	}
}

@functions
{
	public string OldNamespace { get; set; }
	public ClassDeclarationSyntax Class { get; set; }
	public IEnumerable<MethodDeclarationSyntax> WebMethods { get; set; }
}